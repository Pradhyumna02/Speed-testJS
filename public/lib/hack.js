function FEATURE_ENABLED(labels) {
    for (var i = 0; i < labels.length; i++)if (FLAGS[labels[i]])return !0
}
function MODEL(model) {
    function defineProperty(proto, key, map) {
        map.value && proto !== Object.prototype && proto !== Array.prototype ? proto[key] = map.value : Object.defineProperty.apply(this, arguments)
    }

    var proto
    if (model.name ? (GLOBAL[model.name] || (model.extends ? GLOBAL[model.name] = {__proto__: GLOBAL[model.extends]} : GLOBAL[model.name] = {}), proto = GLOBAL[model.name]) : proto = model.extendsProto ? GLOBAL[model.extendsProto].prototype : GLOBAL[model.extendsObject], model.properties)for (var i = 0; i < model.properties.length; i++) {
        var p = model.properties[i]
        defineProperty(proto, p.name, {get: p.getter, enumerable: !1})
    }
    for (key in model.constants)defineProperty(proto, key, {value: model.constants[key], writable: !0, enumerable: !1})
    if (Array.isArray(model.methods))for (var i = 0; i < model.methods.length; i++) {
        var m = model.methods[i]
        defineProperty(proto, m.name, {value: m, writable: !0, enumerable: !1})
    } else for (var key in model.methods)defineProperty(proto, key, {
        value: model.methods[key],
        writable: !0,
        enumerable: !1
    })
}
function prep(arg) {
    return "string" == typeof arg ? literal(arg) : arg
}
function prepArgs(args) {
    for (var i = 0; i < args.length; i++)args[i] = prep(args[i])
    return args
}
function range(c1, c2) {
    var f = function (ps) {
        if (ps.head && !(ps.head < c1 || ps.head > c2))return ps.tail.setValue(ps.head)
    }
    return f.toString = function () {
        return "range(" + c1 + ", " + c2 + ")"
    }, f
}
function literal_ic(str, opt_value) {
    str = str.toLowerCase()
    var f = function (ps) {
        for (var i = 0; i < str.length; i++, ps = ps.tail)if (!ps.head || str.charAt(i) !== ps.head.toLowerCase())return
        return ps.setValue(opt_value || str)
    }
    return f.toString = function () {
        return '"' + str + '"'
    }, f
}
function anyChar(ps) {
    return ps.head ? ps.tail : void 0
}
function fail(ps) {
}
function notChar(c) {
    return function (ps) {
        return ps.head && ps.head !== c ? ps.tail.setValue(ps.head) : void 0
    }
}
function notChars(s) {
    return function (ps) {
        return ps.head && s.indexOf(ps.head) == -1 ? ps.tail.setValue(ps.head) : void 0
    }
}
function not(p, opt_else) {
    p = prep(p), opt_else = prep(opt_else)
    var f = function (ps) {
        return this.parse(p, ps) ? void 0 : opt_else ? this.parse(opt_else, ps) : ps
    }
    return f.toString = function () {
        return "not(" + p + ")"
    }, f
}
function optional(p) {
    p = prep(p)
    var f = function (ps) {
        return this.parse(p, ps) || ps.setValue(void 0)
    }
    return f.toString = function () {
        return "optional(" + p + ")"
    }, f
}
function copyInput(p) {
    p = prep(p)
    var f = function (ps) {
        var res = this.parse(p, ps)
        return res ? res.setValue(ps.str_.toString().substring(ps.pos, res.pos)) : res
    }
    return f.toString = function () {
        return "copyInput(" + p + ")"
    }, f
}
function lookahead(p) {
    p = prep(p)
    var f = function (ps) {
        return this.parse(p, ps) && ps
    }
    return f.toString = function () {
        return "lookahead(" + p + ")"
    }, f
}
function repeat(p, opt_delim, opt_min, opt_max) {
    p = prep(p), opt_delim = prep(opt_delim)
    var f = function (ps) {
        for (var ret = [], i = 0; !opt_max || i < opt_max; i++) {
            var res
            if (opt_delim && 0 != ret.length) {
                if (!(res = this.parse(opt_delim, ps)))break
                ps = res
            }
            if (!(res = this.parse(p, ps)))break
            ret.push(res.value), ps = res
        }
        if (!(opt_min && ret.length < opt_min))return ps.setValue(ret)
    }
    return f.toString = function () {
        return "repeat(" + p + ", " + opt_delim + ", " + opt_min + ", " + opt_max + ")"
    }, f
}
function plus(p, opt_delim) {
    return repeat(p, opt_delim, 1)
}
function noskip(p) {
    return function (ps) {
        return this.skip_ = !1, ps = this.parse(p, ps), this.skip_ = !0, ps
    }
}
function repeat0(p) {
    p = prep(p)
    var f = function (ps) {
        for (var res; res = this.parse(p, ps);)ps = res
        return ps.setValue("")
    }
    return f.toString = function () {
        return "repeat0(" + p + ")"
    }, f
}
function plus0(p) {
    p = prep(p)
    var f = function (ps) {
        var res
        if (res = this.parse(p, ps)) {
            for (ps = res; res = this.parse(p, ps);)ps = res
            return ps.setValue("")
        }
    }
    return f.toString = function () {
        return "repeat0(" + p + ")"
    }, f
}
function seq() {
    var args = prepArgs(arguments), f = function (ps) {
        for (var ret = [], i = 0; i < args.length; i++) {
            if (!(ps = this.parse(args[i], ps)))return
            ret.push(ps.value)
        }
        return ps.setValue(ret)
    }
    return f.toString = function () {
        return "seq(" + argsToArray(args).join(",") + ")"
    }, f
}
function seq1(n) {
    var args = prepArgs(argsToArray(arguments).slice(1)), f = function (ps) {
        for (var ret, i = 0; i < args.length; i++) {
            if (!(ps = this.parse(args[i], ps)))return
            i == n && (ret = ps.value)
        }
        return ps.setValue(ret)
    }
    return f.toString = function () {
        return "seq1(" + n + ", " + argsToArray(args).join(",") + ")"
    }, f
}
function invalidateParsers() {
    parserVersion_++
}
function simpleAlt() {
    var args = prepArgs(arguments)
    if (1 == args.length)return args[0]
    var f = function (ps) {
        for (var i = 0; i < args.length; i++) {
            var res = this.parse(args[i], ps)
            if (res)return res
        }
    }
    return f.toString = function () {
        return "simpleAlt(" + argsToArray(args).join(" | ") + ")"
    }, f
}
function alt() {
    function nullParser() {
    }

    function testParser(p, ps) {
        var trapPS = TrapPStream.create(ps)
        return this.parse(p, trapPS), trapPS.goodChar
    }

    function getParserForChar(ps) {
        var c = ps.head, p = map[c]
        if (!p) {
            for (var alts = [], i = 0; i < args.length; i++) {
                var parser = args[i]
                testParser.call(this, parser, ps) && alts.push(parser)
            }
            p = 0 == alts.length ? nullParser : 1 == alts.length ? alts[0] : simpleAlt.apply(null, alts), map[c] = p
        }
        return p
    }

    var SIMPLE_ALT = simpleAlt.apply(null, arguments), args = prepArgs(arguments), map = {}, parserVersion = parserVersion_, f = function (ps) {
        parserVersion !== parserVersion_ && (map = {}, parserVersion = parserVersion_)
        var r1 = this.parse(getParserForChar.call(this, ps), ps)
        return r1
    }
    return f.toString = function () {
        return "alt(" + argsToArray(args).join(" | ") + ")"
    }, f
}
function str(p) {
    p = prep(p)
    var f = function (ps) {
        var ps = this.parse(p, ps)
        return ps ? ps.setValue(ps.value.join("")) : void 0
    }
    return f.toString = function () {
        return "str(" + p + ")"
    }, f
}
function pick(as, p) {
    p = prep(p)
    var f = function (ps) {
        var ps = this.parse(p, ps)
        if (ps) {
            for (var ret = [], i = 0; i < as.length; i++)ret.push(ps.value[as[i]])
            return ps.setValue(ret)
        }
    }
    return f.toString = function () {
        return "pick(" + as + ", " + p + ")"
    }, f
}
function parsedebug(p) {
    return function (ps) {
        var old = DEBUG_PARSE
        DEBUG_PARSE = !0
        var ret = this.parse(p, ps)
        return DEBUG_PARSE = old, ret
    }
}
function sym(name) {
    var f = function (ps) {
        var p = this[name]
        return p || console.log("PARSE ERROR: Unknown Symbol <" + name + ">"), this.parse(p, ps)
    }
    return f.toString = function () {
        return "<" + name + ">"
    }, f
}
function defineTTLProperty(obj, name, ttl, f) {
    obj.__defineGetter__(name, function () {
        var accessed, value = void 0
        return this.__defineGetter__(name, function () {
            function scheduleTimer() {
                var ref = setTimeout(function () {
                    accessed ? scheduleTimer() : value = void 0, accessed = !1
                }, ttl)
                ref && ref.unref && ref.unref()
            }

            return value ? accessed = !0 : (accessed = !1, value = f(), scheduleTimer()), value
        }), this[name]
    })
}
function lookup(key) {
    if (key) {
        if ("string" != typeof key)return key
        var root = this, cache
        cache = this.lookupCache_
        var ret = cache[key]
        if (void 0 === ret && key.indexOf(".") == -1 && (ret = GLOBAL[key]), void 0 === ret) {
            for (var path = key.split("."), i = 0; root && i < path.length; i++)root = root[path[i]]
            ret = root, cache[key] = ret ? ret : null
        }
        return ret
    }
}
function set(key, value) {
    Object.defineProperty(this, key, {
        value: value,
        writable: "window" !== key,
        configurable: !0
    }), GLOBAL.SimpleReadOnlyValue && "$" !== key && "$$" !== key && (this[key + "$"] = SimpleReadOnlyValue.create({value: value}))
}
function setValue(key, value) {
    var X = this
    Object.defineProperty(this, key, {
        get: function () {
            return value.get()
        }, configurable: !0
    }), "$" !== key && "$$" !== key && (this[key + "$"] = value)
}
function sub(opt_args, opt_name) {
    var sub = Object.create(this)
    if (opt_args)for (var key in opt_args)if (opt_args.hasOwnProperty(key)) {
        var asValue = "$" !== key && "$$" != key && "$" == key.charAt(key.length - 1)
        asValue ? sub.setValue(key.substring(0, key.length - 1), opt_args[key]) : sub.set(key, opt_args[key])
    }
    return opt_name && (sub.NAME = opt_name), sub
}
function subWindow(w, opt_name, isBackground) {
    return w ? foam.ui.Window.create({window: w, name: opt_name, isBackground: isBackground}, this).Y : this.sub()
}
function elementFromString(str) {
    return str.element || (str.element = HTMLParser.create().parseString(str).children[0])
}
function $addWindow(w) {
    w.window.$WID = $WID__++, $documents.push(w.document)
}
function $removeWindow(w) {
    for (var i = $documents.length - 1; i >= 0; i--)$documents[i].defaultView && $documents[i].defaultView !== w || $documents.splice(i, 1)
}
function packagePath(X, path) {
    function packagePath_(Y, path, i) {
        return i === path.length ? Y : (Y[path[i]] || (Y[path[i]] = {}, 0 == i && (GLOBAL[path[i]] = Y[path[i]])), packagePath_(Y[path[i]], path, i + 1))
    }

    return path ? packagePath_(X, path.split("."), 0) : GLOBAL
}
function registerModel(model, opt_name, fastMode) {
    var root = model.package ? this : GLOBAL, name = model.name, pack = model.package
    if (opt_name) {
        var a = opt_name.split(".")
        name = a.pop(), pack = a.join(".")
    }
    var modelRegName = (pack ? pack + "." : "") + name
    if (root === GLOBAL || root === X) {
        var path = packagePath(root, pack)
        fastMode ? path[name] = model : Object.defineProperty(path, name, {
            value: model,
            configurable: !0
        }), path === GLOBAL && (path = X, fastMode ? path[name] = model : Object.defineProperty(path, name, {
            value: model,
            configurable: !0
        }))
    }
    Object.hasOwnProperty.call(this, "lookupCache_") || (this.lookupCache_ = Object.create(this.lookupCache_ || Object.prototype)), this.lookupCache_[modelRegName] = model, this.onRegisterModel(model)
}
function INTERFACE(imodel) {
    var i = JSONUtil.mapToObj(X, imodel, Interface)
    packagePath(X, i.package)[i.name] = i
    var id = i.package ? i.package + "." + i.name : i.name
    NONMODEL_INSTANCES[id] = !0
}
function __DATA(obj) {
    var pkg = obj.package ? obj.package : obj.id.substring(0, obj.id.lastIndexOf(".")), name = obj.name ? obj.name : obj.id.substring(obj.id.lastIndexOf(".") + 1), path = packagePath(X, pkg), triggered = !1
    Object.defineProperty(path, name, {
        get: function triggerDataLatch() {
            if (triggered)return null
            triggered = !0
            var object = JSONUtil.mapToObj(X, obj)
            return X.registerModel(object), object
        }, configurable: !0
    })
}
function onRegisterModel(m) {
    m.package || (GLOBAL[m.name] = m)
}
function defineLocalProperty(cls, name, factory) {
    Object.defineProperty(cls, name, {
        get: function () {
            console.assert(this !== cls, "Called property getter from prototype: " + name)
            var value = factory.call(this)
            return Object.defineProperty(this, name, {configurable: !0, value: value}), value
        }, configurable: !0
    })
}
function override(cls, methodName, method) {
    var super_ = cls[methodName]
    if (method.toString().indexOf("SUPER") == -1)return cls[methodName] = method, void 0
    var SUPER = function () {
        return super_.apply(this, arguments)
    }, slowF = function (OLD_SUPER, args) {
        try {
            return method.apply(this, args)
        } finally {
            this.SUPER = OLD_SUPER
        }
    }, f = function () {
        var OLD_SUPER = this.SUPER
        if (this.SUPER = SUPER, OLD_SUPER)return slowF.call(this, OLD_SUPER, arguments)
        var ret = method.apply(this, arguments)
        return this.SUPER = null, ret
    }
    f.toString = function () {
        return method.toString()
    }, f.super_ = super_, cls[methodName] = f
}
function recopyModelFeatures(m) {
    GLOBAL[m.name] = X[m.name] = m, m.model_ = Model, m.methods = m.methods, m.relationships = m.relationships, m.properties = m.properties, m.models = m.models, DEBUG && (m.tests = m.tests, m.issues = m.issues), m.properties && m.properties[0] && "Model" !== m.properties[0].__proto__.model_.name_ && m.properties.forEach(function (p) {
        "Property" === p.__proto__.model_.name && (p.__proto__ = Property.getPrototype())
    }), DEBUG && BootstrapModel.saveDefinition(m)
}
function or$(values, factory, opt_X) {
    return OrValue.create({values: values, valueFactory: factory}, opt_X)
}
function toNum(p) {
    return p.replace ? parseInt(p.replace("px", "")) : p
}
function elementForName(nodeName) {
    nodeName = nodeName ? nodeName : "div"
    var modelName = this.__element_map__[nodeName.toUpperCase()]
    if (modelName) {
        var model = this.lookup(modelName)
        return console.assert(model, 'Missing Model, Add "' + modelName + '" to your requires: block.'), model.create(null, this)
    }
    var i = nodeName.indexOf(":")
    return i != -1 ? this.elementForFeature(nodeName.substring(0, i), nodeName.substring(i + 1)) : null
}
function elementForFeature(objName, featureName) {
    var data = this[objName || "data"], X = objName ? this.sub({data: this[objName]}) : this
    return data.model_.getFeature(featureName).toE(X)
}
function registerE(name, model) {
    var m = {__proto__: this.__element_map__}
    return m[name.toUpperCase()] = model, this.set("__element_map__", m), this
}
function E(opt_nodeName) {
    this !== X && this !== window || console.log("Deprecated global E() call", new Error)
    var e = this.elementForName && this.elementForName(opt_nodeName)
    return e || (e = this.lookup("foam.u2.Element").create(null, this), opt_nodeName && (e.nodeName = opt_nodeName)), e
}
function start(opt_nodeName) {
    return this.E(opt_nodeName)
}
function compile_(a) {
    return a.f ? a : a === !0 ? TRUE : a === !1 ? FALSE : ConstantExpr.create({arg1: a})
}
function compileArray_(args) {
    for (var b = [], i = 0; i < args.length; i++) {
        var a = args[i]
        null !== a && void 0 !== a && b.push(compile_(a))
    }
    return b
}
function COUNT() {
    return CountExpr.create()
}
function EQ(arg1, arg2) {
    var eq = EqExpr.create()
    return eq.instance_.arg1 = compile_(arg1), eq.instance_.arg2 = compile_(arg2), eq
}
function AND() {
    return AndExpr.create({args: compileArray_.call(null, arguments)})
}
function NEQ(arg1, arg2) {
    return NeqExpr.create({arg1: compile_(arg1), arg2: compile_(arg2)})
}
function UPPER(arg1) {
    return UpperExpr.create({arg1: compile_(arg1)})
}
function EQ_IC(arg1, arg2) {
    return EQ(UPPER(arg1), UPPER(arg2))
}
function IN_IC(arg1, arg2) {
    return IN(UPPER(arg1), arg2.map(UPPER))
}
function atxn(afunc) {
    return function (ret) {
        if (GLOBAL.__TXN__)afunc.apply(this, arguments)
        else {
            GLOBAL.__TXN__ = {}
            var a = argsToArray(arguments)
            a[0] = function () {
                GLOBAL.__TXN__ = void 0, ret()
            }, afunc.apply(this, a)
        }
    }
}
function dump(o) {
    return Array.isArray(o) ? "[" + o.map(dump).join(",") + "]" : o ? o.toString() : "<undefined>"
}
function deferJsonP(X) {
    var future = afuture()
    return X.ajsonp = function () {
        var args = arguments
        return function (ret) {
            future.get(function (f) {
                f.apply(void 0, args)(ret)
            })
        }
    }, future
}
navigator && navigator.userAgent.indexOf("Firefox") != -1 && (console.log("Loading Firefox Support."), Object.defineProperties(MouseEvent.prototype, {
    offsetX: {
        get: function () {
            return this.clientX - this.target.getBoundingClientRect().left
        }
    }, offsetY: {
        get: function () {
            return this.clientY - this.target.getBoundingClientRect().top
        }
    }
})), Number.name || (console.log("Polyfilling Function.prototype.name"), Object.defineProperty(Function.prototype, "name", {
    get: function () {
        var text = this.toString()
        return text.substring(text.indexOf("function") + 9, text.indexOf("(")).trim()
    }, configurable: !0, enumerable: !0
})), function () {
    if ("undefined" == typeof window.performance && (window.performance = {}), !window.performance.now) {
        var nowOffset = Date.now()
        performance.timing && performance.timing.navigationStart && (nowOffset = performance.timing.navigationStart), window.performance.now = function now() {
            return Date.now() - nowOffset
        }
    }
}(), "function" != typeof Number.isFinite && (Number.isFinite = function isFinite(value) {
    return "number" == typeof value && (value === value && value !== 1 / 0 && value !== -(1 / 0))
}), "function" != typeof Number.isNaN && (Number.isNaN = function (value) {
    return "number" == typeof value && value !== value
}), "function" != typeof Number.isInteger && (Number.isInteger = function (value) {
    return "number" == typeof value && Math.round(value) === value
})
var DEBUG = DEBUG || !1, _DOC_ = _DOC_ || !1, FLAGS = FLAGS || {}
FLAGS.javascript = !0, FLAGS.debug = DEBUG, FLAGS.documentation = _DOC_
var GLOBAL = GLOBAL || this, MODEL0 = MODEL
MODEL({
    extendsObject: "GLOBAL", methods: [function memoize(f) {
        var cache = {}, g = function () {
            var key = argsToArray(arguments).toString()
            return cache.hasOwnProperty(key) || (cache[key] = f.apply(this, arguments)), cache[key]
        }
        return g.name = f.name, g
    }, function memoize1(f) {
        var cache = {}, g = function (arg) {
            var key = arg ? arg.toString() : ""
            return cache.hasOwnProperty(key) || (cache[key] = f.call(this, arg)), cache[key]
        }
        return g.name = f.name, g
    }, function constantFn(v) {
        return function () {
            return v
        }
    }, function latchFn(f) {
        var tripped = !1, val
        return function () {
            return tripped || (tripped = !0, val = f(), f = void 0), val
        }
    }, function argsToArray(args) {
        for (var array = new Array(args.length), i = 0; i < args.length; i++)array[i] = args[i]
        return array
    }, function StringComparator(s1, s2) {
        return s1 == s2 ? 0 : s1 < s2 ? -1 : 1
    }, function equals(a, b) {
        return a === b || !(!a || !b) && (a.equals ? a.equals(b) : a.compareTo ? 0 === a.compareTo(b) : b.compareTo ? 0 === b.compareTo(a) : a == b)
    }, function compare(a, b) {
        return a === b ? 0 : null == a ? -1 : null == b ? 1 : a.compareTo ? a.compareTo(b) : b.compareTo ? -b.compareTo(a) : a > b ? 1 : -1
    }, function toCompare(c) {
        return Array.isArray(c) ? CompoundComparator.apply(null, c) : c.compare ? c.compare.bind(c) : c
    }, function CompoundComparator() {
        for (var args = argsToArray(arguments), cs = [], i = 0; i < args.length; i++)cs[i] = toCompare(args[i])
        var f = function (o1, o2) {
            for (var i = 0; i < cs.length; i++) {
                var r = cs[i](o1, o2)
                if (0 != r)return r
            }
            return 0
        }
        return f.toSQL = function () {
            return args.map(function (s) {
                return s.toSQL()
            }).join(",")
        }, f.toMQL = function () {
            return args.map(function (s) {
                return s.toMQL()
            }).join(" ")
        }, f.toBQL = function () {
            return args.map(function (s) {
                return s.toBQL()
            }).join(" ")
        }, f.toString = f.toSQL, f
    }, function randomAct() {
        for (var totalWeight = 0, i = 0; i < arguments.length; i += 2)totalWeight += arguments[i]
        for (var r = Math.random(), i = 0, weight = 0; i < arguments.length; i += 2)if (weight += arguments[i], r <= weight / totalWeight)return arguments[i + 1](), void 0
    }, function Object_forEach(obj, fn) {
        for (var key in obj)obj.hasOwnProperty(key) && fn(obj[key], key)
    }, function predicatedSink(predicate, sink) {
        return predicate !== TRUE && sink ? {
            __proto__: sink, $UID: sink.$UID, put: function (obj, s, fc) {
                !sink.put || obj && !predicate.f(obj) || sink.put(obj, s, fc)
            }, remove: function (obj, s, fc) {
                !sink.remove || obj && !predicate.f(obj) || sink.remove(obj, s, fc)
            }, reset: function () {
                sink.reset && sink.reset()
            }, toString: function () {
                return "PredicatedSink(" + sink.$UID + ", " + predicate + ", " + sink + ")"
            }
        } : sink
    }, function limitedSink(count, sink) {
        var i = 0
        return {
            __proto__: sink, $UID: sink.$UID, put: function (obj, s, fc) {
                i++ >= count && fc ? fc.stop() : sink.put(obj, s, fc)
            }
        }
    }, function skipSink(skip, sink) {
        var i = 0
        return {
            __proto__: sink, $UID: sink.$UID, put: function (obj, s, fc) {
                i++ >= skip && sink.put(obj, s, fc)
            }
        }
    }, function orderedSink(comparator, sink) {
        return comparator = toCompare(comparator), {
            __proto__: sink,
            $UID: sink.$UID,
            i: 0,
            arr: [],
            put: function (obj, s, fc) {
                this.arr.push(obj)
            },
            eof: function () {
                this.arr.sort(comparator), this.arr.select(sink)
            }
        }
    }, function defineLazyProperty(target, name, definitionFn) {
        Object.defineProperty(target, name, {
            get: function () {
                var definition = definitionFn.call(this)
                return Object.defineProperty(this, name, definition), definition.get ? definition.get.call(this) : definition.value
            }, configurable: !0
        })
    }, function multiline(f) {
        if ("string" == typeof f)return f
        var s = f.toString(), start = s.indexOf("/*"), end = s.lastIndexOf("*/")
        return s.substring(start + 2, end)
    }, function findPageXY(node) {
        for (var x = 0, y = 0, parent; node;)parent = node, x += node.offsetLeft, y += node.offsetTop, node = node.offsetParent
        return [x, y, parent]
    }, function findViewportXY(node) {
        var rect = node.getBoundingClientRect()
        return [rect.left, rect.top]
    }, function nop() {
    }, function stringtoutf8(str) {
        for (var res = [], i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i), count = 0
            code < 128 && res.push(code)
        }
        return res
    }, function createGUID() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            var r = 16 * Math.random() | 0, v = "x" === c ? r : 3 & r | 8
            return v.toString(16)
        })
    }]
})
var labelize = memoize1(function (str) {
    return "" === str ? str : capitalize(str.replace(/[a-z][A-Z]/g, function (a) {
        return a.charAt(0) + " " + a.charAt(1)
    }))
}), constantize = memoize1(function (str) {
    return "x" === str ? "X_" : "y" === str ? "Y_" : "$" === str ? "$_" : str.replace(/[a-z][^0-9a-z_]/g, function (a) {
        return a.substring(0, 1) + "_" + a.substring(1, 2)
    }).toUpperCase()
}), capitalize = memoize1(function (str) {
    return str[0].toUpperCase() + str.substring(1)
}), camelize = memoize1(function (str) {
    var ret = str.replace(/(?:[-\s_])(\w)/g, function (_, a) {
        return a ? a.toUpperCase() : ""
    })
    return ret[0].toLowerCase() + ret.substring(1)
}), daoize = memoize1(function (str) {
    return str[0].toLowerCase() + str.substring(1) + "DAO"
}), cssClassize = memoize1(function (str) {
    return str.replace(/\./g, "-")
})
MODEL({
    extendsProto: "Object", properties: [{
        name: "$UID", getter: function () {
            var id = 1
            return function () {
                return Object.hasOwnProperty.call(this, "$UID__") ? this.$UID__ : (this.$UID__ = id, id++, this.$UID__)
            }
        }()
    }], methods: [function become(other) {
        for (var local = Object.getOwnPropertyNames(this), i = 0; i < local.length; i++)delete this[local[i]]
        var remote = Object.getOwnPropertyNames(other)
        for (i = 0; i < remote.length; i++)Object.defineProperty(this, remote[i], Object.getOwnPropertyDescriptor(other, remote[i]))
        this.__proto__ = other.__proto__
    }]
}), MODEL({
    extendsProto: "Array", constants: {oldForEach_: Array.prototype.forEach}, methods: [function clone() {
        return this.slice()
    }, function deepClone() {
        for (var a = this.clone(), i = 0; i < a.length; i++) {
            var o = a[i]
            o && (o.deepClone ? a[i] = o.deepClone() : o.clone && (a[i] = o.clone()))
        }
        return a
    }, function forEach(f, opt_this) {
        if (!this || !f || opt_this)return this.oldForEach_.call(this, f, opt_this)
        for (var l = this.length, i = 0; i < l; i++)f(this[i], i, this)
    }, function diff(other) {
        for (var added = other.slice(0), removed = [], i = 0; i < this.length; i++) {
            for (var j = 0; j < added.length; j++)if (0 == this[i].compareTo(added[j])) {
                added.splice(j, 1), j--
                break
            }
            j == added.length && removed.push(this[i])
        }
        return {added: added, removed: removed}
    }, function binaryInsert(item) {
        for (var start = 0, end = this.length - 1; end >= start;) {
            var m = start + Math.floor((end - start) / 2), c = item.compareTo(this[m])
            if (0 == c)return this
            c < 0 ? end = m - 1 : start = m + 1
        }
        return this.splice(start, 0, item), this
    }, function union(other) {
        return this.concat(other.filter(function (o) {
            return this.indexOf(o) == -1
        }.bind(this)))
    }, function intersection(other) {
        return this.filter(function (o) {
            return other.indexOf(o) != -1
        })
    }, function intern() {
        for (var i = 0; i < this.length; i++)this[i].intern && (this[i] = this[i].intern())
        return this
    }, function compareTo(other) {
        if (this.length !== other.length)return -1
        for (var i = 0; i < this.length; i++) {
            var result = this[i].compareTo(other[i])
            if (0 !== result)return result
        }
        return 0
    }, function deleteF(v) {
        for (var a = this.clone(), i = 0; i < a.length; i++)if (a[i] === v) {
            a.splice(i, 1)
            break
        }
        return a
    }, function deleteI(v) {
        for (var i = 0; i < this.length; i++)if (this[i] === v)return this.splice(i, 1), !0
        return !1
    }, function removeF(p) {
        for (var a = [], i = 0; i < a.length; i++)if (p.f(a[i]))for (i++; i < a.length; i++)a.push(a[i])
        return a
    }, function removeI(p) {
        for (var i = 0; i < this.length; i++)if (p.f(this[i]))return this.splice(i, 1), !0
        return !1
    }, function pushF(obj) {
        var a = this.clone()
        return a.push(obj), a
    }, function spliceF(start, end) {
        var r = [], i
        for (i = 0; i < start; i++)r.push(this[i])
        for (i = 2; i < arguments.length; i++)r.push(arguments[i])
        for (i = start + end; i < this.length; i++)r.push(this[i])
        return r
    }, function fReduce(comparator, arr) {
        compare = toCompare(comparator)
        for (var result = [], i = 0, j = 0, k = 0; i < this.length && j < arr.length;) {
            var a = compare(this[i], arr[j])
            a < 0 ? result[k++] = this[i++] : 0 != a ? result[k++] = arr[j++] : (result[k++] = this[i++], result[k++] = arr[j++])
        }
        return i != this.length && (result = result.concat(this.slice(i))), j != arr.length && (result = result.concat(arr.slice(j))), result
    }, function pushAll(arr) {
        return this.push.apply(this, arr), this.length
    }, function mapFind(map) {
        for (var i = 0; i < this.length; i++) {
            var result = map(this[i], i)
            if (result)return result
        }
    }, function mapProp(prop) {
        return this.map(function (x) {
            return x[prop]
        })
    }, function mapCall() {
        var args = Array.prototype.slice.call(arguments, 0), func = args.shift()
        return this.map(function (x) {
            return x[func] && x[func].apply(x[func], args)
        })
    }], properties: [{
        name: "memento", getter: function () {
            throw"Array's can not be memorized properly as a memento."
        }
    }]
}), MODEL({
    extendsProto: "String", methods: [function indexOfIC(a) {
        return a.length > this.length ? -1 : this.toUpperCase().indexOf(a.toUpperCase())
    }, function equals(other) {
        return 0 === this.compareTo(other)
    }, function equalsIC(other) {
        return other && this.toUpperCase() === other.toUpperCase()
    }, function capitalize() {
        return this.charAt(0).toUpperCase() + this.slice(1)
    }, function labelize() {
        return this.replace(/[a-z][A-Z]/g, function (a) {
            return a.charAt(0) + " " + a.charAt(1)
        }).capitalize()
    }, function compareTo(o) {
        return o == this ? 0 : this < o ? -1 : 1
    }, String.prototype.startsWith || function startsWith(a) {
        return 0 == this.lastIndexOf(a, 0)
    }, String.prototype.endsWith || function endsWith(a) {
        return this.length - a.length == this.lastIndexOf(a)
    }, function startsWithIC(a) {
        if (a.length > this.length)return !1
        for (var l = a.length, i = 0; i < l; i++)if (this[i].toUpperCase() !== a[i].toUpperCase())return !1
        return !0
    }, function put(obj) {
        return this + obj.toJSON()
    }, function () {
        var map = {}
        return function intern() {
            return map[this] || (map[this] = this.toString())
        }
    }(), function hashCode() {
        var hash = 0
        if (0 == this.length)return hash
        for (i = 0; i < this.length; i++) {
            var code = this.charCodeAt(i)
            hash = (hash << 5) - hash + code, hash &= hash
        }
        return hash
    }]
}), MODEL({
    extendsProto: "Function", methods: [function () {
        var oldBind = Function.prototype.bind, simpleBind = function (f, self) {
            return function () {
                return f.apply(self, arguments)
            }
        }
        return function bind(arg) {
            if (1 == arguments.length)return simpleBind(this, arg)
            for (var args = new Array(arguments.length), i = 0; i < arguments.length; i++)args[i] = arguments[i]
            return oldBind.apply(this, args)
        }
    }(), function equals(o) {
        return this === o
    }, function compareTo(o) {
        return this === o ? 0 : this.name.compareTo(o.name) || 1
    }, function o(f2) {
        var f1 = this
        return function () {
            return f1.call(this, f2.apply(this, argsToArray(arguments)))
        }
    }]
}), MODEL({
    extendsObject: "Math", methods: [function sign(n) {
        return n > 0 ? 1 : -1
    }]
}), MODEL({
    extendsProto: "Date", methods: [function toRelativeDateString() {
        var seconds = Math.floor((Date.now() - this.getTime()) / 1e3)
        if (seconds < 60)return "moments ago"
        var minutes = Math.floor(seconds / 60)
        if (1 == minutes)return "1 minute ago"
        if (minutes < 60)return minutes + " minutes ago"
        var hours = Math.floor(minutes / 60)
        if (1 == hours)return "1 hour ago"
        if (hours < 24)return hours + " hours ago"
        var days = Math.floor(hours / 24)
        if (1 == days)return "1 day ago"
        if (days < 7)return days + " days ago"
        if (days < 365) {
            var year = 1900 + this.getYear(), noyear = this.toDateString().replace(" " + year, "")
            return noyear.substring(4)
        }
        return this.toDateString().substring(4)
    }, function equals(o) {
        return !!o && (!!o.getTime && this.getTime() === o.getTime())
    }, function compareTo(o) {
        if (o === this)return 0
        if (!o)return 1
        var d = this.getTime() - o.getTime()
        return 0 == d ? 0 : d > 0 ? 1 : -1
    }, function toMQL() {
        return this.getFullYear() + "/" + (this.getMonth() + 1) + "/" + this.getDate()
    }, function toBQL() {
        var str = this.toISOString()
        return str.substring(0, str.indexOf("."))
    }]
}), MODEL({
    extendsProto: "Number", methods: [function compareTo(o) {
        return o == this ? 0 : this < o ? -1 : 1
    }]
}), MODEL({
    extendsProto: "Boolean", methods: [function compareTo(o) {
        return (this.valueOf() ? 1 : 0) - (o ? 1 : 0)
    }]
}), MODEL({
    extendsProto: "RegExp", methods: [function quote(str) {
        return (str + "").replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1")
    }]
}), console.log.json = function () {
    for (var args = [], i = 0; i < arguments.length; i++) {
        var arg = arguments[i]
        args.push(arg && arg.toJSON ? arg.toJSON() : arg)
    }
    console.log.apply(console, args)
}, console.log.str = function () {
    for (var args = [], i = 0; i < arguments.length; i++) {
        var arg = arguments[i]
        args.push(arg && arg.toString ? arg.toString() : arg)
    }
    console.log.apply(console, args)
}, console.log.put = console.log.bind(console), console.log.remove = console.log.bind(console, "remove: "), console.log.error = console.log.bind(console, "error: "), console.log.json.put = console.log.json.bind(console), console.log.json.reduceI = console.log.json.bind(console, "reduceI: "), console.log.json.remove = console.log.json.bind(console, "remove: "), console.log.json.error = console.log.json.bind(console, "error: "), console.log.str.put = console.log.str.bind(console), console.log.str.remove = console.log.str.bind(console, "remove: "), console.log.str.error = console.log.str.bind(console, "error: "), document.put = function (obj) {
    obj.write ? obj.write(this.X) : this.write(obj.toString())
}, window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setImmediate, window.Blob && (Blob.prototype.slice = Blob.prototype.slice || Blob.prototype.webkitSlice), window.XMLHttpRequest && (XMLHttpRequest.prototype.asend = function (ret, opt_data) {
    var xhr = this
    xhr.onerror = function () {
        console.log("XHR Error: ", arguments)
    }, xhr.onloadend = function () {
        ret(xhr.response, xhr)
    }, xhr.send(opt_data)
}), String.fromCharCode = function () {
    var oldLookup = String.fromCharCode, lookupTable = []
    return function (a) {
        if (1 == arguments.length)return lookupTable[a] || (lookupTable[a] = oldLookup(a))
        for (var result = "", i = 0; i < arguments.length; i++)result += lookupTable[arguments[i]] || (lookupTable[arguments[i]] = oldLookup(arguments[i]))
        return result
    }
}()
var MementoProto = {}
Object.defineProperty(MementoProto, "equals", {
    enumerable: !1, configurable: !0, value: function (o) {
        var keys = Object.keys(this), otherKeys = Object.keys(o)
        if (keys.length != otherKeys.length)return !1
        for (var i = 0; i < keys.length; i++)if (!equals(this[keys[i]], o[keys[i]]))return !1
        return !0
    }
}), MODEL({
    extendsProto: "Function", methods: [function abind(self) {
        return function (ret) {
            this.apply(self, arguments), ret()
        }.bind(this)
    }, function ao(f2) {
        var f1 = this
        return function (ret) {
            var args = argsToArray(arguments)
            args[0] = f1.bind(this, ret), f2.apply(this, args)
        }
    }, function aseq(f2) {
        return f2.ao(this)
    }]
}), MODEL({
    extendsObject: "GLOBAL", methods: [function anop(ret) {
        ret && ret(void 0)
    }, function alog() {
        var args = arguments
        return function (ret) {
            console.log.apply(console, args), ret && ret.apply(this, [].slice.call(arguments, 1))
        }
    }, function aprofile(afunc) {
        return function (ret) {
            var a = argsToArray(arguments)
            console.profile("aprofile")
            var ret2 = function () {
                console.profileEnd(), ret && ret(arguments)
            }
            aapply_(afunc, ret2, a)
        }
    }, function aconstant(v) {
        return function (ret) {
            ret && ret(v)
        }
    }, function arepeat(n, afunc) {
        return n ? function (ret) {
            var a = argsToArray(arguments)
            a.splice(1, 0, 0, n)
            var next = atramp(function () {
                return a[1] == n - 1 ? (a[0] = ret, afunc.apply(this, a), void 0) : (afunc.apply(this, a), a[1]++, void 0)
            })
            a[0] = next, next.apply(this, a)
        } : anop
    }, function aforEach(arr, afunc) {
    }, function awhile(cond, afunc) {
        return function (ret) {
            var a = argsToArray(arguments), g = function () {
                return cond() ? (afunc.apply(this, a), void 0) : (ret.apply(void 0, arguments), void 0)
            }
            a[0] = g, g.apply(this, a)
        }
    }, function aif(cond, afunc, aelse) {
        return function (ret) {
            ("function" == typeof cond ? cond.apply(this, argsToArray(arguments).slice(1)) : cond) ? afunc.apply(this, arguments) : aelse ? aelse.apply(this, arguments) : ret()
        }
    }, function aaif(acond, afunc, aelse) {
        return function (ret) {
            var args = argsToArray(arguments)
            args[0] = function (c) {
                args[0] = ret, c ? afunc.apply(null, args) : aelse ? aelse.apply(null, args) : ret()
            }, acond.apply(null, args)
        }
    }, function () {
        var id = 1, activeOps = {}
        return function atime(str, afunc, opt_endCallback, opt_startCallback) {
            var name = str
            return aseq(function (ret) {
                activeOps[str] ? (name += "-" + id++, activeOps[str]++) : activeOps[str] = 1
                var start = performance.now()
                opt_startCallback && opt_startCallback(name), opt_endCallback || console.time(name), ret.apply(null, [].slice.call(arguments, 1))
            }, afunc, function (ret) {
                if (activeOps[str]--, opt_endCallback) {
                    var end = performance.now()
                    opt_endCallback(name, end - start)
                } else console.timeEnd(name)
                ret && ret.apply(null, [].slice.call(arguments, 1))
            })
        }
    }(), function ametric() {
        return this.atime.apply(this, arguments)
    }, function asleep(ms) {
        return function (ret) {
            window.setTimeout(ret, ms)
        }
    }, function ayield() {
        return function (ret) {
            window.setTimeout(ret, 0)
        }
    }, function afuture() {
        var set = !1, values = void 0, waiters = []
        return {
            isSet: function () {
                return set
            }, set: function () {
                if (set)return console.log("ERROR: redundant set on future"), void 0
                values = arguments, set = !0
                for (var i = 0; i < waiters.length; i++)waiters[i].apply(null, values)
                return waiters = void 0, this
            }, get: function (ret) {
                return set ? (ret.apply(null, values), void 0) : (waiters.push(ret), void 0)
            }
        }
    }, function aapply_(f, ret, args) {
        args.unshift(ret), f.apply(this, args)
    }, function arequestqueue(f, opt_lock, opt_max) {
        var lock = opt_lock || {}
        lock.q || (lock.q = [], lock.active = null)
        var onExit = function () {
            var next = lock.active = lock.q.pop()
            next && setTimeout(function () {
                f(onExit, next)
            }, 0)
        }, reduceDown = function (o, q) {
            for (var i = q.length - 1; i >= 0; i--) {
                var result = o.reduce(q[i])
                if (result) {
                    q.splice(i, 1), reduceDown(result, q)
                    break
                }
            }
            q.push(o)
        }
        return function (o) {
            if (lock.active) {
                var first = o.reduce(lock.active)
                if (first && first.equals(lock.active))return
            }
            reduceDown(o, lock.q, lock.q.length - 1), lock.q.length > opt_max && (lock.q.length = opt_max), lock.active || onExit()
        }
    }, function asynchronized(f, opt_lock) {
        function onExit(ret) {
            return function () {
                var next = lock.q.shift()
                next ? setTimeout(next, 0) : lock.active = !1, ret()
            }
        }

        var lock = opt_lock || {}
        return lock.q || (lock.q = [], lock.active = !1), function (ret) {
            return lock.active ? (lock.q.push(function () {
                f(onExit(ret))
            }), void 0) : (lock.active = !0, f(onExit(ret)), void 0)
        }
    }, function atimeout(delay, f, opt_timeoutF) {
        return function (ret) {
            var timedOut = !1, completed = !1
            setTimeout(function () {
                completed || (timedOut = !0, console.log("timeout"), opt_timeoutF && opt_timeoutF())
            }, delay), f(aseq(function (ret) {
                timedOut || (completed = !0), completed && ret()
            }, ret))
        }
    }, function amemo(f, opt_ttl) {
        var memoized = !1, values, waiters, age = 0, pending = !1
        return function (ret) {
            if (memoized)return ret.apply(null, values), void 0 != opt_ttl && !pending && Date.now() > age + opt_ttl && (pending = !0, f(function () {
                values = arguments, age = Date.now(), pending = !1
            })), void 0
            var first = !waiters
            first && (waiters = []), waiters.push(ret), first && f(function () {
                values = arguments, age = Date.now()
                for (var i = 0; i < waiters.length; i++)waiters[i] && waiters[i].apply(null, values)
                void 0 == opt_ttl && (f = void 0), memoized = !0, waiters = void 0
            })
        }
    }, function amemo1(afunc) {
        var cache = {}
        return function (ret, arg) {
            var key = arg ? arg.toString() : ""
            cache[key] || (cache[key] = afuture(), afunc(cache[key].set, arg)), cache[key].get(ret)
        }
    }, function amerged(f) {
        var waiters
        return function (ret) {
            var first = !waiters
            if (first) {
                waiters = []
                var args = argsToArray(arguments)
            }
            waiters.push(ret), first && (args[0] = function () {
                var calls = waiters
                waiters = void 0
                for (var i = 0; i < calls.length; i++)calls[i] && calls[i].apply(null, arguments)
            }, f.apply(null, args))
        }
    }, function mergeAsync(f) {
        var active = !1, args
        return function () {
            if (active)return args = argsToArray(arguments), void 0
            active = !0
            var ret = function () {
                args ? (args.unshift(ret), f.apply(null, args), args = void 0) : active = !1
            }, a = argsToArray(arguments)
            a.unshift(ret), f.apply(null, a)
        }
    }, function ao() {
        for (var ret = arguments[arguments.length - 1], i = 0; i < arguments.length - 1; i++)ret = arguments[i].ao(ret)
        return ret
    }, function aseq() {
        if (0 == arguments.lenth)return anop
        for (var f = arguments[arguments.length - 1], i = arguments.length - 2; i >= 0; i--)f = arguments[i].aseq(i % 100 == 99 ? atramp(f) : f)
        return f
    }, function apar() {
        var aargs = [], count = 0, fs = arguments
        return function (ret) {
            if (0 == fs.length)return ret && ret(), void 0
            for (var opt_args = Array.prototype.splice.call(arguments, 1), ajoin = function (i) {
                if (aargs[i] = Array.prototype.splice.call(arguments, 1), ++count == fs.length) {
                    for (var a = [], j = 0; j < fs.length; j++)for (var k = 0; k < aargs[j].length; k++)a.push(aargs[j][k])
                    ret && ret.apply(null, a)
                }
            }, i = 0; i < fs.length; i++)fs[i].apply(null, [ajoin.bind(null, i)].concat(opt_args))
        }
    }, function () {
        var active = !1, jobs = []
        return function atramp(afunc) {
            return function () {
                if (jobs.push([afunc, arguments]), !active) {
                    console.assert(jobs.length <= 1, "atramp with multiple jobs"), active = !0
                    for (var job; null != (job = jobs.pop());)job[0].apply(this, job[1])
                    active = !1
                }
            }
        }
    }(), function arepeatpar(n, afunc) {
        return function (ret) {
            if (0 === n)return ret && ret(), void 0
            for (var aargs = [], count = 0, opt_args = Array.prototype.splice.call(arguments, 1), ajoin = function (i) {
                if (++count == n) {
                    var a = []
                    ret && ret.apply(null, a)
                }
            }, i = 0; i < n; i++)afunc.apply(null, [ajoin.bind(null, i)].concat([i, n]).concat(opt_args))
        }
    }, function axhr(url, opt_op, opt_params) {
        var op = opt_op || "GET", params = opt_params || []
        return function (ret) {
            var xhr = new XMLHttpRequest
            xhr.open(op, url), xhr.asend(function (json) {
                ret(JSON.parse(json))
            }, params && params.join("&"))
        }
    }, function futurefn(future) {
        return function () {
            var args = arguments
            future.get(function (f) {
                f.apply(void 0, args)
            })
        }
    }, function adelay(afunc, delay) {
        function pump() {
            if (!timeout && queue.length) {
                var top = queue.shift(), f = top[0], args = top[1], ret = args[0]
                args[0] = function () {
                    ret.apply(null, arguments), pump()
                }, timeout = setTimeout(function () {
                    timeout = 0, f.apply(null, args)
                }, delay)
            }
        }

        var queue = [], timeout
        return function () {
            var args = arguments
            queue.push([afunc, args]), pump()
        }
    }, function adebugger(fn) {
        return function (ret) {
            fn.apply(null, arguments)
        }
    }]
})
var __JSONP_CALLBACKS__ = {}, wrapJsonpCallback = function () {
    var nextID = 0
    return function (ret, opt_nonce) {
        var id = "c" + nextID++
        opt_nonce && (id += Math.floor(16777215 * Math.random()).toString(16))
        var cb = __JSONP_CALLBACKS__[id] = function (data) {
            delete __JSONP_CALLBACKS__[id], ret && ret.call(this, data)
        }
        return cb.id = id, cb
    }
}(), ajsonp = function (url, params) {
    return function (ret) {
        var cb = wrapJsonpCallback(ret), script = document.createElement("script")
        script.src = url + "?callback=__JSONP_CALLBACKS__." + cb.id + (params ? "&" + params.join("&") : ""), script.onload = function () {
            document.body.removeChild(this)
        }, script.onerror = function () {
            cb(null), document.body.removeChild(this)
        }, document.body.appendChild(script)
    }
}, StringPS = {
    create: function (str) {
        var o = Object.create(this)
        return o.pos = 0, o.str_ = [str], o.tail_ = [], o
    }, set str(str) {
        this.str_[0] = str
    }, get head() {
        return this.pos >= this.str_[0].length ? null : this.str_[0].charAt(this.pos)
    }, get value() {
        return this.hasOwnProperty("value_") ? this.value_ : this.str_[0].charAt(this.pos - 1)
    }, get tail() {
        if (!this.tail_[0]) {
            var tail = Object.create(this.__proto__)
            tail.str_ = this.str_, tail.pos = this.pos + 1, tail.tail_ = [], this.tail_[0] = tail
        }
        return this.tail_[0]
    }, setValue: function (value) {
        var ret = Object.create(this.__proto__)
        return ret.str_ = this.str_, ret.pos = this.pos, ret.tail_ = this.tail_, ret.value_ = value, ret
    }, toString: function () {
        return this.str_[0].substring(this.pos)
    }
}, literal = function () {
    var cache = {}
    return function (str, opt_value) {
        if (!opt_value && cache[str])return cache[str]
        var f
        return f = 1 === str.length ? function (ps) {
            return str === ps.head ? ps.tail.setValue(opt_value || str) : void 0
        } : function (ps) {
            for (var i = 0; i < str.length; i++, ps = ps.tail)if (str.charAt(i) !== ps.head)return
            return ps.setValue(opt_value || str)
        }, f.toString = function () {
            return '"' + str + '"'
        }, opt_value ? f : cache[str] = f
    }
}(), alphaChar = alt(range("a", "z"), range("A", "Z")), alphaNumChar = alt(alphaChar, range("0", "9")), wordChar = alt(alphaNumChar, "_"), parserVersion_ = 1, TrapPStream = {
    create: function (ps) {
        return {__proto__: this, head: ps.head, value: ps.value, goodChar: !1}
    }, getValue: function () {
        return this.value
    }, setValue: function (v) {
        return this.value = v, this
    }, get tail() {
        return this.goodChar = !0, {
            value: this.value, getValue: function () {
                return this.value
            }, setValue: function (v) {
                this.value = v
            }
        }
    }
}, DEBUG_PARSE = !1, grammar = {
    parseString: function (str, opt_start) {
        var ps = this.stringPS
        ps.str = str
        var res = this.parse(opt_start || this.START, ps)
        return res && res.value
    }, parse: function (parser, pstream) {
        DEBUG_PARSE && pstream.str_ && (console.log(new Array(pstream.pos).join("."), pstream.head), console.log(pstream.pos + "> " + pstream.str_[0].substring(0, pstream.pos) + "(" + pstream.head + ")"))
        var ret = parser.call(this, pstream)
        return DEBUG_PARSE && console.log(parser + " ==> " + !!ret + "  " + (ret && ret.value)), ret
    }, export: function (str) {
        return this[str].bind(this)
    }, addAction: function (sym, action) {
        var p = this[sym]
        this[sym] = function (ps) {
            var val = ps.value, ps2 = this.parse(p, ps)
            return ps2 && ps2.setValue(action.call(this, ps2.value, val))
        }, this[sym].toString = function () {
            return "<<" + sym + ">>"
        }
    }, addActions: function (map) {
        for (var key in map)this.addAction(key, map[key])
        return this
    }
}
defineTTLProperty(grammar, "stringPS", 3e4, function () {
    return StringPS.create("")
})
var SkipGrammar = {
    create: function (gramr, skipp) {
        return {
            __proto__: gramr, skip_: !0, parse: function (parser, pstream) {
                return this.skip_ && (pstream = this.skip.call(grammar, pstream) || pstream), this.__proto__.parse.call(this, parser, pstream)
            }, skip: skipp
        }
    }
}, __ROOT__ = {}
MODEL({
    name: "EventService",
    extends: "__ROOT__",
    constants: {UNSUBSCRIBE_EXCEPTION: "unsubscribe", WILDCARD: "*"},
    methods: {
        oneTime: function (listener) {
            return function () {
                throw listener.apply(this, argsToArray(arguments)), EventService.UNSUBSCRIBE_EXCEPTION
            }
        }, consoleLog: function (listener) {
            return function () {
                var args = argsToArray(arguments)
                console.log(args), listener.apply(this, args)
            }
        }, merged: function (listener, opt_delay, opt_X) {
            var setTimeoutX = opt_X && opt_X.setTimeout || setTimeout, delay = opt_delay || 16
            return function () {
                var triggered = !1, unsubscribed = !1, lastArgs = null, f = function () {
                    if (lastArgs = arguments, unsubscribed)throw EventService.UNSUBSCRIBE_EXCEPTION
                    if (!triggered) {
                        triggered = !0
                        try {
                            setTimeoutX(function () {
                                triggered = !1
                                var args = argsToArray(lastArgs)
                                lastArgs = null
                                try {
                                    listener.apply(this, args)
                                } catch (x) {
                                    x === EventService.UNSUBSCRIBE_EXCEPTION && (unsubscribed = !0)
                                }
                            }, delay)
                        } catch (e) {
                            throw EventService.UNSUBSCRIBE_EXCEPTION
                        }
                    }
                }
                return DEBUG && (f.toString = function () {
                    return "MERGED(" + delay + ", " + listener.$UID + ", " + listener + ")"
                }), f
            }()
        }, framed: function (listener, opt_X) {
            opt_X = opt_X || this.X
            var requestAnimationFrameX = opt_X && opt_X.requestAnimationFrame || requestAnimationFrame
            return function () {
                var triggered = !1, unsubscribed = !1, lastArgs = null, f = function () {
                    if (lastArgs = arguments, unsubscribed)throw EventService.UNSUBSCRIBE_EXCEPTION
                    triggered || (triggered = !0, requestAnimationFrameX(function () {
                        triggered = !1
                        var args = argsToArray(lastArgs)
                        lastArgs = null
                        try {
                            listener.apply(this, args)
                        } catch (x) {
                            x === EventService.UNSUBSCRIBE_EXCEPTION && (unsubscribed = !0)
                        }
                    }))
                }
                return DEBUG && (f.toString = function () {
                    return "FRAMED(" + listener.$UID + ", " + listener + ")"
                }), f
            }()
        }, async: function (listener, opt_X) {
            return this.delay(0, listener, opt_X)
        }, delay: function (delay, listener, opt_X) {
            return opt_X = opt_X || this.X, function () {
                var args = argsToArray(arguments);
                (opt_X && opt_X.setTimeout ? opt_X.setTimeout : setTimeout)(function () {
                    listener.apply(this, args)
                }, delay)
            }
        }, hasListeners: function (opt_topic) {
            return opt_topic ? (console.log("TODO: haslisteners"), !0) : !!this.subs_
        }, publish: function (topic) {
            return this.subs_ ? this.pub_(this.subs_, 0, topic, this.appendArguments([this, topic], arguments, 1)) : 0
        }, publishAsync: function (topic) {
            var args = argsToArray(arguments), me = this
            setTimeout(function () {
                me.publish.apply(me, args)
            }, 0)
        }, deepPublish: function (topic) {
            return this.publish.apply(this, arguments)
        }, lazyPublish: function (topic, fn) {
            return this.hasListeners(topic) ? this.publish.apply(this, fn()) : 0
        }, subscribe: function (topic, listener) {
            this.subs_ || (this.subs_ = {}), this.sub_(this.subs_, 0, topic, listener)
        }, unsubscribe: function (topic, listener) {
            this.subs_ && this.unsub_(this.subs_, 0, topic, listener)
        }, unsubscribeAll: function () {
            this.sub_ = {}
        }, pub_: function (map, topicIndex, topic, msg) {
            var count = 0
            if (null == map)return 0
            if (topicIndex < topic.length) {
                var t = topic[topicIndex]
                if (t == this.WILDCARD)return this.notifyListeners_(topic, map, msg)
                t && (count += this.pub_(map[t], topicIndex + 1, topic, msg))
            }
            return count += this.notifyListeners_(topic, map[null], msg), count
        }, sub_: function (map, topicIndex, topic, listener) {
            if (topicIndex == topic.length)map[null] || (map[null] = []), map[null].push(listener)
            else {
                var key = topic[topicIndex]
                map[key] || (map[key] = {}), this.sub_(map[key], topicIndex + 1, topic, listener)
            }
        }, unsub_: function (map, topicIndex, topic, listener) {
            if (topicIndex == topic.length) {
                if (!map[null])return !0
                var i = map[null].indexOf(listener)
                i == -1 || (map[null] = map[null].spliceF(i, 1)), map[null].length || delete map[null]
            } else {
                var key = topic[topicIndex]
                if (!map[key])return !1
                this.unsub_(map[key], topicIndex + 1, topic, listener) && delete map[key]
            }
            return 0 == Object.keys(map).length
        }, notifyListener_: function (topic, listener, msg) {
            try {
                listener.apply(null, msg)
            } catch (err) {
                return err !== this.UNSUBSCRIBE_EXCEPTION && (console.error("Error delivering event (removing listener): ", topic.join("."), err), DEBUG && console.error(err.stack)), !1
            }
            return !0
        }, notifyListeners_: function (topic, listeners, msg) {
            if (null == listeners)return 0
            if (Array.isArray(listeners)) {
                for (var i = 0; i < listeners.length; i++) {
                    var listener = listeners[i]
                    this.notifyListener_(topic, listener, msg) || this.unsubscribe(topic, listener)
                }
                return listeners.length
            }
            var count = 0
            for (var key in listeners)count += this.notifyListeners_(topic, listeners[key], msg)
            return count
        }, appendArguments: function (a, args, start) {
            for (var i = start; i < args.length; i++)a.push(args[i])
            return a
        }
    }
}), MODEL({
    name: "PropertyChangeSupport", extends: "EventService", constants: {PROPERTY_TOPIC: "property"}, methods: {
        propertyTopic: memoize1(function (property) {
            return [this.PROPERTY_TOPIC, property]
        }), propertyChange: function (property, oldValue, newValue) {
            this.subs_ && (null != property && (oldValue === newValue || oldValue !== oldValue && newValue !== newValue) || this.publish(this.propertyTopic(property), oldValue, newValue))
        }, propertyChange_: function (propertyTopic, oldValue, newValue) {
            this.subs_ && (oldValue === newValue || oldValue !== oldValue && newValue !== newValue || this.publish(propertyTopic, oldValue, newValue))
        }, globalChange: function () {
            this.publish(this.propertyTopic(this.WILDCARD), null, null)
        }, addListener: function (listener) {
            console.assert(listener, "Listener cannot be null."), this.addPropertyListener(null, listener)
        }, removeListener: function (listener) {
            this.removePropertyListener(null, listener)
        }, addPropertyListener: function (property, listener) {
            this.subscribe(this.propertyTopic(property), listener)
        }, removePropertyListener: function (property, listener) {
            this.unsubscribe(this.propertyTopic(property), listener)
        }, propertyValue: function (prop) {
            if (!prop)throw"Property Name required for propertyValue()."
            var props = this.props_ || (this.props_ = {})
            return Object.hasOwnProperty.call(props, prop) ? props[prop] : props[prop] = PropertyValue.create(this, prop)
        }
    }
})
var FunctionStack = {
    create: function () {
        var stack = [!1]
        return {
            stack: stack, push: function (f) {
                stack.unshift(f)
            }, pop: function () {
                stack.shift()
            }
        }
    }
}, Value = {
    __isValue__: !0, isInstance: function (o) {
        return o && o.__isValue__
    }, follow: function (srcValue) {
        Events.follow(srcValue, this)
    }
}, PropertyValue = {
    __proto__: Value, create: function (obj, prop) {
        var o = Object.create(this)
        return o.$UID = obj.$UID + "." + prop, o.obj = obj, o.prop = prop, o
    }, get: function () {
        return this.obj[this.prop]
    }, set: function (val) {
        this.obj[this.prop] = val
    }, get value() {
        return this.get()
    }, set value(val) {
        this.set(val)
    }, addListener: function (listener) {
        this.obj.addPropertyListener(this.prop, listener)
    }, removeListener: function (listener) {
        this.obj.removePropertyListener(this.prop, listener)
    }, toString: function () {
        return "PropertyValue(" + this.prop + ")"
    }
}, Events = {
    listeners_: new WeakMap, recordListener: function (src, dst, listener, opt_dontCallListener) {
        var srcMap = this.listeners_.get(src)
        srcMap || (srcMap = new WeakMap, this.listeners_.set(src, srcMap)), console.assert(!srcMap.get(dst), "recordListener: duplicate follow"), srcMap.set(dst, listener), src.addListener(listener), opt_dontCallListener || listener()
    }, identity: function (x) {
        return x
    }, follow: function (srcValue, dstValue) {
        srcValue && dstValue && this.recordListener(srcValue, dstValue, function () {
            var sv = srcValue.get(), dv = dstValue.get()
            equals(sv, dv) || dstValue.set(sv)
        })
    }, unfollow: function (src, dst) {
        if (src && dst) {
            var srcMap = this.listeners_.get(src)
            if (srcMap) {
                var listener = srcMap.get(dst)
                listener && (srcMap.delete(dst), src.removeListener(listener))
            }
        }
    }, map: function (srcValue, dstValue, f) {
        srcValue && dstValue && this.recordListener(srcValue, dstValue, function () {
            var s = f(srcValue.get()), d = dstValue.get()
            equals(s, d) || dstValue.set(s)
        })
    }, link: function (srcValue, dstValue) {
        this.follow(srcValue, dstValue), this.follow(dstValue, srcValue)
    }, relate: function (srcValue, dstValue, f, fprime, removeFeedback) {
        if (srcValue && dstValue) {
            var feedback = !1, l = function (sv, dv, f) {
                return function () {
                    if (!removeFeedback || !feedback) {
                        var s = f(sv.get()), d = dv.get()
                        equals(s, d) || (feedback = !0, dv.set(s), feedback = !1)
                    }
                }
            }, l1 = l(srcValue, dstValue, f), l2 = l(dstValue, srcValue, fprime)
            this.recordListener(srcValue, dstValue, l1, !0), this.recordListener(dstValue, srcValue, l2, !0), l1()
        }
    }, unlink: function (value1, value2) {
        this.unfollow(value1, value2), this.unfollow(value2, value1)
    }, dynamicFn: function (fn, opt_fn, opt_X) {
        var fn2 = opt_fn ? function () {
            opt_fn(fn())
        } : fn, listener = EventService.framed(fn2, opt_X), propertyValues = []
        fn(), Events.onGet.push(function (obj, name, value) {
            var l = obj.propertyValue(name)
            propertyValues.indexOf(l) == -1 && (obj.propertyValue(name).addListener(listener), propertyValues.push(l))
        })
        var ret = fn()
        return Events.onGet.pop(), opt_fn && opt_fn(ret), {
            destroy: function () {
                propertyValues.forEach(function (p) {
                    p.removeListener(listener)
                })
            }
        }
    }, onSet: FunctionStack.create(), onGet: FunctionStack.create()
}
MODEL({
    name: "Movement", methods: {
        distance: function (x, y) {
            return Math.sqrt(x * x + y * y)
        }, o: function (f1, f2) {
            return function (x) {
                return f1(f2(x))
            }
        }, avg: function (f1, f2) {
            return function (x) {
                return (f1(x) + f2(x)) / 2
            }
        }, spline: function (f1, f2) {
            return function (x) {
                return (1 - x) * f1(x) + x * f2(x)
            }
        }, linear: function (x) {
            return x
        }, back: function (x) {
            return x < .5 ? 2 * x : 2 - 2 * x
        }, accelerate: function (x) {
            return (Math.sin(x * Math.PI - Math.PI / 2) + 1) / 2
        }, easeIn: function (a) {
            var v = 1 / (1 - a / 2)
            return function (x) {
                var x1 = Math.min(x, a), x2 = Math.max(x - a, 0)
                return (a ? .5 * x1 * (x1 / a) * v : 0) + x2 * v
            }
        }, reverse: function (f) {
            return function (x) {
                return 1 - f(1 - x)
            }
        }, easeOut: function (b) {
            return Movement.reverse(Movement.easeIn(b))
        }, oscillate: function (b, a, opt_c) {
            var c = opt_c || 3
            return function (x) {
                if (x < 1 - b)return x / (1 - b)
                var t = (x - 1 + b) / b
                return 1 + 2 * (1 - t) * a * Math.sin(2 * c * Math.PI * t)
            }
        }, bounce: function (b, a, opt_c) {
            var c = opt_c || 3
            return function (x) {
                if (x < 1 - b)return x / (1 - b)
                var t = (x - 1 + b) / b
                return 1 - 2 * (1 - t) * a * Math.abs(Math.sin(2 * c * Math.PI * t))
            }
        }, bounce2: function (a) {
            var v = 1 / (1 - a)
            return function (x) {
                if (x < 1 - a)return v * x
                var p = (x - 1 + a) / a
                return 1 - (x - 1 + a) * v / 2
            }
        }, stepBack: function (a) {
            return function (x) {
                return x < a ? -x : -2 * a + (1 + 2 * a) * x
            }
        }, ease: function (a, b) {
            return Movement.o(Movement.easeIn(a), Movement.easeOut(b))
        }, seq: function (f1, f2) {
            return f1 && f2 ? function () {
                f1.apply(this, argsToArray(arguments)), f2()
            } : f1 ? f1 : f2
        }, liveAnimations_: 0, animate: function (duration, fn, opt_interp, opt_onEnd, opt_X) {
            var requestAnimationFrameX = opt_X && opt_X.requestAnimationFrame || requestAnimationFrame
            if (0 == duration)return Movement.seq(fn, opt_onEnd)
            var interp = opt_interp || Movement.linear
            return function () {
                function stop() {
                    var onEnd = opt_onEnd
                    if (!stopped && (Movement.liveAnimations_--, stopped = !0, onEnd && onEnd(), onEnd = null, 0 === Movement.liveAnimations_)) {
                        var tasks = Movement.idleTasks_
                        tasks && tasks.length > 0 && (Movement.idleTasks_ = [], setTimeout(function () {
                            var i
                            if (Movement.liveAnimations_ > 0)for (i = 0; i < tasks.length; i++)Movement.idleTasks_.push(tasks[i])
                            else for (i = 0; i < tasks.length; i++)tasks[i]()
                        }, 20))
                    }
                }

                function go() {
                    if (!stopped) {
                        for (var now = Date.now(), p = interp((Math.min(now, startTime + duration) - startTime) / duration), last = now >= startTime + duration, i = 0; i < ranges.length; i++) {
                            var r = ranges[i], obj = r[0], name = r[1], value1 = r[2], value2 = r[3]
                            obj[name] = last ? value2 : value1 + (value2 - value1) * p
                        }
                        last ? stop() : requestAnimationFrameX(go)
                    }
                }

                var ranges = [], stopped = !1
                fn && (Events.onSet.push(function (obj, name, value2) {
                    ranges.push([obj, name, obj[name], value2])
                }), fn.apply(this, argsToArray(arguments)), Events.onSet.pop())
                var startTime = Date.now()
                if (ranges.length > 0)Movement.liveAnimations_++, requestAnimationFrameX(go)
                else {
                    var setTimeoutX = opt_X && opt_X.setTimeout || setTimeout
                    setTimeoutX(stop, duration)
                }
                return stop
            }
        }, whenIdle: function (fn) {
            return function () {
                if (Movement.liveAnimations_ > 0) {
                    Movement.idleTasks_ || (Movement.idleTasks_ = [])
                    var args = arguments
                    Movement.idleTasks_.push(function () {
                        fn.apply(fn, args)
                    })
                } else fn.apply(fn, arguments)
            }
        }, compile: function (a, opt_rest) {
            function noop() {
            }

            function isPause(op) {
                return Array.isArray(op) && 0 == op[0]
            }

            function compilePause(op, rest) {
                return function () {
                    var l = function () {
                        document.removeEventListener("click", l), rest()
                    }
                    document.addEventListener("click", l)
                }
            }

            function isSimple(op) {
                return Array.isArray(op) && "number" == typeof op[0]
            }

            function compileSimple(op, rest) {
                return op[3] = Movement.seq(op[3], rest), function () {
                    Movement.animate.apply(null, op)()
                }
            }

            function isParallel(op) {
                return Array.isArray(op) && Array.isArray(op[0])
            }

            function compileParallel(op, rest) {
                var join = function (num) {
                    return function () {
                        --num || rest()
                    }
                }(op.length)
                return function () {
                    for (var i = 0; i < op.length; i++)isSimple(op[i]) ? Movement.animate(op[i][0], op[i][1], op[i][2], Movement.seq(op[i][3], join))() : Movement.compile(op[i], join)()
                }
            }

            function compileFn(fn, rest) {
                return Movement.seq(fn, rest)
            }

            function compile_(a, i) {
                if (i >= a.length)return opt_rest || noop
                var rest = compile_(a, i + 1), op = a[i]
                return isPause(op) ? compilePause(op, rest) : isSimple(op) ? compileSimple(op, rest) : isParallel(op) ? compileParallel(op, rest) : compileFn(op, rest)
            }

            return compile_(a, 0)
        }, onIntersect: function (o1, o2, fn) {
            o1.model_.R ? Events.dynamicFn(function () {
                o1.x, o1.y, o2.x, o2.y
            }, function () {
                var dx = o1.x - o2.x, dy = o1.y - o2.y, d = dx * dx + dy * dy, r2 = o1.r + o2.r
                d < r2 * r2 && fn.call(null, o1, o2)
            }) : Events.dynamicFn(function () {
                o1.x, o1.y, o2.x, o2.y
            }, function () {
                (o1.x <= o2.x && o1.x + o1.width > o2.x && o1.y <= o2.y && o1.y + o1.height > o2.y || o2.x <= o1.x && o2.x + o2.width > o1.x && o2.y <= o1.y && o2.y + o2.height > o1.y) && fn.call(null, o1, o2)
            })
        }, stepTowards: function (src, dst, maxStep) {
            var dx = src.x - dst.x, dy = src.y - dst.y, theta = Math.atan2(dy, dx), r = Math.sqrt(dx * dx + dy * dy)
            r = r < 0 ? Math.max(-maxStep, r) : Math.min(maxStep, r), dst.x += r * Math.cos(-theta), dst.y -= r * Math.sin(-theta)
        }, moveTowards: function (t, body, sat, v) {
            var bodyX = body.propertyValue("x"), bodyY = body.propertyValue("y"), satX = sat.propertyValue("x"), satY = sat.propertyValue("y")
            t.addListener(function () {
                var dx = bodyX.get() - satX.get(), dy = bodyY.get() - satY.get(), theta = Math.atan2(dy, dx), r = Math.sqrt(dx * dx + dy * dy)
                r = r < 0 ? Math.max(-v, r) : Math.min(v, r), satX.set(satX.get() + r * Math.cos(-theta)), satY.set(satY.get() - r * Math.sin(-theta))
            })
        }, orbit: function (t, body, sat, r, p, opt_start) {
            var bodyX = body.x$, bodyY = body.y$, satX = sat.x$, satY = sat.y$, start = opt_start || 0
            t.addListener(EventService.framed(function () {
                var time = t.time
                satX.set(bodyX.get() + r * Math.sin(time / p * Math.PI * 2 + start)), satY.set(bodyY.get() + r * Math.cos(time / p * Math.PI * 2 + start))
            }))
        }, strut: function (mouse, c, dx, dy) {
            Events.dynamicFn(function () {
                mouse.x, mouse.y
            }, function () {
                c.x = mouse.x + dx, c.y = mouse.y + dy
            })
        }, gravity: function (c, opt_a, opt_theta) {
            var a = opt_a || 1, theta = opt_theta || 1.5 * Math.PI
            Events.dynamicFn(function () {
                c.vx, c.vy
            }, function () {
                c.vy += a
            })
        }, friction: function (c, opt_coef) {
            var coef = opt_coef || .9
            Events.dynamicFn(function () {
                c.vx, c.vy
            }, function () {
                c.vx = Math.abs(c.vx) < .001 ? 0 : c.vx * coef, c.vy = Math.abs(c.vy) < .001 ? 0 : c.vy * coef
            })
        }, inertia: function (c) {
            var last = Date.now()
            Events.dynamicFn(function () {
                c.vx, c.vy, c.x, c.y
            }, function () {
                var now = Date.now(), time = Math.min(Math.max(16, now - last), 64) / 16
                Math.abs(c.vx) > .001 && (c.x += c.vx * time), Math.abs(c.vy) > .001 && (c.y += c.vy * time), last = now
            })
        }, spring: function (mouse, c, dx, dy, opt_strength) {
            var strength = opt_strength || 6, d = Movement.distance(dx, dy)
            Events.dynamicFn(function () {
                mouse.x, mouse.y, c.x, c.y, c.vx, c.vy
            }, function () {
                if (0 === dx && 0 === dy)c.x = mouse.x, c.y = mouse.y
                else {
                    var dx2 = mouse.x + dx - c.x, dy2 = mouse.y + dy - c.y, d2 = Movement.distance(dx2, dy2), dv = strength * d2 / d
                    if (Math.abs(dv) < .01)return
                    var a = Math.atan2(dy2, dx2)
                    c.vx += dv * Math.cos(a), c.vy += dv * Math.sin(a)
                }
            })
        }, spring2: function (c1, c2, length, opt_strength) {
            var strength = opt_strength || 4
            Events.dynamicFn(function () {
                c1.x, c1.y, c2.x, c2.y
            }, function () {
                var d = c1.distanceTo(c2), a = Math.atan2(c2.y - c1.y, c2.x - c1.x)
                d > length ? (c1.applyMomentum(strength * (d / length - 1), a), c2.applyMomentum(-strength * (d / length - 1), a)) : d < length && (c1.applyMomentum(-strength * (length / d - 1), a), c2.applyMomentum(strength * (length / d - 1), a))
            })
        }, createAnimatedPropertyInstallFn: function (duration, interpolation) {
            return function (prop) {
                this.defineProperty({
                    name: prop.name + "$AnimationLatch",
                    defaultValue: 0,
                    hidden: !0,
                    documentation: function () {
                    }
                })
                var actualSetter = this.__lookupSetter__(prop.name)
                this.defineProperty({
                    name: prop.name + "$AnimationSetValue",
                    defaultValue: 0,
                    hidden: !0,
                    documentation: function () {
                    },
                    postSet: function (_, nu) {
                        actualSetter.call(this, nu)
                    }
                }), this.__defineSetter__(prop.name, function (nu) {
                    var latch = this[prop.name + "$AnimationLatch"]
                    latch && latch()
                    var anim = Movement.animate(duration, function () {
                        this[prop.name + "$AnimationSetValue"] = nu
                    }.bind(this), interpolation)
                    this[prop.name + "$AnimationLatch"] = anim()
                })
            }
        }
    }
}), Movement.easy = Movement.spline(Movement.spline(constantFn(0), Movement.linear), Movement.spline(Movement.linear, constantFn(1)))
var AbstractFormatter = {
    keyify: function (str) {
        return '"' + str + '"'
    }, stringify: function (obj) {
        var buf = ""
        return this.output(function () {
            for (var i = 0; i < arguments.length; i++)buf += arguments[i]
        }, obj), buf
    }, stringifyObject: function (obj, opt_defaultModel) {
        var buf = ""
        return this.outputObject_(function () {
            for (var i = 0; i < arguments.length; i++)buf += arguments[i]
        }, obj, opt_defaultModel), buf
    }, where: function (p) {
        return {__proto__: this, p: p.f && p.f.bind(p) || p}
    }, p: function () {
        return !0
    }
}, JSONUtil = {
    escape: function (str) {
        return str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/[\x00-\x1f]/g, function (c) {
            return "\\u00" + (c.charCodeAt(0) < 16 ? "0" + c.charCodeAt(0).toString(16) : c.charCodeAt(0).toString(16))
        })
    },
    parseToMap: function (str) {
        return eval("(" + str + ")")
    },
    aparse: function (ret, X, str) {
        var seq = [], res = this.parse(X, str, seq)
        return seq.length ? (apar.apply(null, seq)(function () {
            ret(res)
        }), void 0) : (ret(res), void 0)
    },
    amapToObj: function (ret, X, obj, opt_defaultModel) {
        var seq = [], res = this.mapToObj(X, obj, opt_defaultModel, seq)
        return seq.length ? (aseq.apply(null, seq)(function () {
            ret(res)
        }), void 0) : res
    },
    parse: function (X, str, seq) {
        return this.mapToObj(X, this.parseToMap(str), void 0, seq)
    },
    arrayToObjArray: function (X, a, opt_defaultModel, seq) {
        for (var i = 0; i < a.length; i++)a[i] = this.mapToObj(X, a[i], opt_defaultModel, seq)
        return a
    },
    mapToObj: function (X, obj, opt_defaultModel, seq) {
        if (!obj || "object" == typeof obj.model_)return obj
        if (Array.isArray(obj))return this.arrayToObjArray(X, obj, void 0, seq)
        if (obj instanceof Function)return obj
        if (obj instanceof Date)return obj
        if (obj instanceof Object) {
            if (("Model" === obj.model_ || "Model" === opt_defaultModel) && obj.properties)for (var i = 0; i < obj.properties.length; i++) {
                var p = obj.properties[i]
                p.type && !p.model_ && "Property" !== p.type && (p.model_ = p.type + "Property", X.arequire(p.model_)(function (obj, p) {
                    return function (m) {
                        Property && !Property.isSubModel(m) && console.log("ERROR: Use of non Property Sub-Model as Property type: ", obj.package + "." + obj.name, p.type)
                    }
                }(obj, p)))
            }
            for (var key in obj)"model_" != key && "prototype_" != key && (obj[key] = this.mapToObj(X, obj[key], null, seq))
            if (opt_defaultModel && !obj.model_)return opt_defaultModel.create(obj, X)
            if (obj.model_) {
                var newObj = X.lookup(obj.model_)
                if (!newObj || !newObj.finished__) {
                    var future = afuture()
                    return seq && seq.push(future.get), X.arequire(obj.model_)(function (model) {
                        if (!model)return FLAGS.debug && "Template" !== obj.model_ && "ArrayProperty" !== obj.model_ && "ViewFactoryProperty" !== obj.model_ && "Documentation" !== obj.model_ && "DocumentationProperty" !== obj.model_ && "CSSProperty" !== obj.model_ && "FunctionProperty" !== obj.model_ && console.warn("Failed to dynamically load: ", obj.model_), future.set(obj), void 0
                        if (!obj.instance_) {
                            var tmp = model.create(obj, X)
                            obj.become(tmp), future.set(obj)
                        }
                    }), obj
                }
                var ret = newObj ? newObj.create(obj, X) : obj
                return ret.readResolve ? ret.readResolve() : ret
            }
            return obj
        }
        return obj
    },
    compact: {
        __proto__: AbstractFormatter, output: function (out, obj, opt_defaultModel) {
            Array.isArray(obj) ? this.outputArray_(out, obj) : "string" == typeof obj ? (out('"'), out(JSONUtil.escape(obj)), out('"')) : obj instanceof Function ? this.outputFunction_(out, obj) : obj instanceof Date ? out(obj.getTime()) : obj instanceof RegExp ? out(obj.toString()) : obj instanceof Object ? obj.model_ && obj.model_.id ? this.outputObject_(out, obj, opt_defaultModel) : this.outputMap_(out, obj) : "number" == typeof obj ? (isFinite(obj) || (obj = null), out(obj)) : out(void 0 === obj ? null : obj)
        }, outputObject_: function (out, obj, opt_defaultModel) {
            var str = "", first = !0
            out("{"), obj.model_.id !== opt_defaultModel && (this.outputModel_(out, obj), first = !1)
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if (this.p(prop, obj) && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && !val.length)continue
                    first || out(","), out(this.keyify(prop.name), ": "), Array.isArray(val) && prop.subType ? this.outputArray_(out, val, prop.subType) : this.output(out, val), first = !1
                }
            }
            out("}")
        }, outputModel_: function (out, obj) {
            out('model_:"'), obj.model_.package && out(obj.model_.package, "."), out(obj.model_.name, '"')
        }, outputMap_: function (out, obj) {
            var str = "", first = !0
            out("{")
            for (var key in obj) {
                var val = obj[key]
                first || out(","), out(this.keyify(key), ": "), this.output(out, val), first = !1
            }
            out("}")
        }, outputArray_: function (out, a, opt_defaultModel) {
            if (0 == a.length)return out("[]"), out
            var str = "", first = !0
            out("[")
            for (var i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                first || out(","), this.output(out, obj, opt_defaultModel)
            }
            out("]")
        }, outputFunction_: function (out, obj) {
            out(obj)
        }
    },
    pretty: {
        __proto__: AbstractFormatter, output: function (out, obj, opt_defaultModel, opt_indent) {
            var indent = opt_indent || ""
            Array.isArray(obj) ? this.outputArray_(out, obj, null, indent) : "string" == typeof obj ? (out('"'), out(JSONUtil.escape(obj)), out('"')) : obj instanceof Function ? this.outputFunction_(out, obj, indent) : obj instanceof Date ? out(obj.getTime()) : obj instanceof RegExp ? out(obj.toString()) : obj instanceof Object ? obj.model_ ? this.outputObject_(out, obj, opt_defaultModel, indent) : this.outputMap_(out, obj, indent) : "number" == typeof obj ? (isFinite(obj) || (obj = null), out(obj)) : (void 0 === obj && (obj = null), out(obj))
        }, outputObject_: function (out, obj, opt_defaultModel, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "   ", str = "", first = !0
            out(indent, "{\n"), obj.model_.id && obj.model_.id !== opt_defaultModel && (this.outputModel_(out, obj, nestedIndent), first = !1)
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if (this.p(prop, obj) && "parent" !== prop.name && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && !val.length)continue
                    if (equals(val, prop.defaultValue))continue
                    first || out(",\n"), out(nestedIndent, this.keyify(prop.name), ": "), Array.isArray(val) && prop.subType ? this.outputArray_(out, val, prop.subType, nestedIndent) : this.output(out, val, null, nestedIndent), first = !1
                }
            }
            out("\n", indent, "}")
        }, outputModel_: function (out, obj, indent) {
            out(indent, '"model_": "', obj.model_.id, '"')
        }, outputMap_: function (out, obj, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "   ", str = "", first = !0
            out(indent, "{\n", nestedIndent)
            for (var key in obj) {
                var val = obj[key]
                first || out(",\n"), out(nestedIndent, this.keyify(key), ": "), this.output(out, val, null, nestedIndent), first = !1
            }
            out("\n", indent, "}")
        }, outputArray_: function (out, a, opt_defaultModel, opt_indent) {
            if (0 == a.length)return out("[]"), out
            var indent = opt_indent || "", nestedIndent = indent + "   ", str = "", first = !0
            out("[\n")
            for (var i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                first || out(",\n"), this.output(out, obj, opt_defaultModel, nestedIndent)
            }
            out("\n", indent, "]")
        }, outputFunction_: function (out, obj, indent) {
            var str = obj.toString(), lines = str.split("\n")
            if (1 == lines.length)return out(str), void 0
            for (var minIndent = 1e4, i = 0; i < lines.length; i++) {
                for (var j = 0; j < lines[i].length && " " === lines[i].charAt(j) && j < minIndent; j++);
                j > 0 && j < minIndent && (minIndent = j)
            }
            if (1e4 === minIndent)return out(str), void 0
            for (var i = 0; i < lines.length; i++)lines[i].length && " " === lines[i].charAt(0) && (lines[i] = indent + lines[i].substring(minIndent)), out(lines[i]), i < lines.length - 1 && out("\n")
        }
    },
    moreCompact: {__proto__: AbstractFormatter},
    compressed: {
        __proto__: AbstractFormatter, stringify: function (obj) {
            return Iuppiter.Base64.encode(Iuppiter.compress(JSONUtil.compact.stringify(obj), !0))
        }
    }
}
JSONUtil.prettyModel = {
    __proto__: JSONUtil.pretty, outputModel_: function (out, obj, indent) {
        out(indent, 'model_: "', obj.model_.id, '"')
    }, keys_: {}, keyify: function (str) {
        return this.keys_.hasOwnProperty(str) || (this.keys_[str] = /^[a-zA-Z\$_][0-9a-zA-Z$_]*$/.test(str) ? str : '"' + str + '"'), this.keys_[str]
    }
}, JSONUtil.stringify = JSONUtil.pretty.stringify.bind(JSONUtil.pretty), JSONUtil.stringifyObject = JSONUtil.pretty.stringifyObject.bind(JSONUtil.pretty), JSONUtil.output = JSONUtil.pretty.output.bind(JSONUtil.pretty), JSONUtil.where = JSONUtil.pretty.where.bind(JSONUtil.pretty)
var NOT_TRANSIENT = function (prop) {
    return !prop.transient
}, XMLParser = {
    __proto__: grammar,
    START: seq1(1, sym("whitespace"), sym("tag"), sym("whitespace")),
    tag: seq("<", sym("tagName"), sym("whitespace"), repeat(sym("attribute"), sym("whitespace")), sym("whitespace"), ">", repeat(alt(sym("tag"), sym("text"))), "</", sym("tagName"), ">"),
    label: str(plus(notChars(" =/\t\r\n<>'\""))),
    tagName: sym("label"),
    text: str(plus(notChar("<"))),
    attribute: seq(sym("label"), "=", sym("value")),
    value: str(alt(seq1(1, '"', repeat(notChar('"')), '"'), seq1(1, "'", repeat(notChar("'")), "'"))),
    whitespace: repeat(alt(" ", "\t", "\r", "\n"))
}
XMLParser.addActions({
    tag: function (xs) {
        if (xs[1] == xs[8]) {
            var obj = {tag: xs[1], attrs: {}, children: xs[6]}
            return xs[3].forEach(function (attr) {
                obj.attrs[attr[0]] = attr[2]
            }), obj
        }
    }
})
var XMLUtil = {
    escape: function (str) {
        return str && str.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    }, unescape: function (str) {
        return str && str.toString().replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&")
    }, escapeAttr: function (str) {
        return str && str.replace(/"/g, "&quot;")
    }, unescapeAttr: function (str) {
        return str && str.replace(/&quot;/g, '"')
    }, parse: function (str) {
        var result = XMLParser.parseString(str)
        return result ? this.parseArray(result.children) : result
    }, parseObject: function (tag) {
        var obj = {}, self = this
        if (tag.children.forEach(function (c) {
                if ("object" == typeof c && c.attrs && c.attrs.name) {
                    var result
                    if (c.attrs.type && "function" == c.attrs.type) {
                        var code = XMLUtil.unescape(c.children.join(""))
                        result = code.startsWith("function") ? eval("(" + code + ")") : new Function(code)
                    } else result = self.parseArray(c.children)
                    obj[self.unescapeAttr(c.attrs.name)] = result
                }
            }), !tag.attrs.model)return obj
        var model = this.unescapeAttr(tag.attrs.model)
        return GLOBAL[model] ? GLOBAL[model].create(obj) : obj
    }, parseArray: function (a) {
        var self = this, ret = []
        return a.forEach(function (x) {
            "object" == typeof x && ("i" == x.tag ? ret.push(XMLUtil.unescape(x.children[0])) : ret.push(self.parseObject(x)))
        }), ret.length ? ret : XMLUtil.unescape(a.join(""))
    }, compact: {
        stringify: function (obj) {
            var buf = []
            return this.output(buf.push.bind(buf), obj), "<foam>" + buf.join("") + "</foam>"
        }, output: function (out, obj) {
            Array.isArray(obj) ? this.outputArray_(out, obj) : "string" == typeof obj ? out(XMLUtil.escape(obj)) : obj instanceof Function ? this.outputFunction_(out, obj) : obj instanceof Date ? out(obj.getTime()) : obj instanceof Object ? obj.model_ ? this.outputObject_(out, obj) : this.outputMap_(out, obj) : out(obj)
        }, outputObject_: function (out, obj) {
            out('<object model="', XMLUtil.escapeAttr(obj.model_.name), '">')
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if ("parent" !== prop.name && obj.instance_ && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && 0 == val.length)continue
                    if (equals(val, prop.defaultValue))continue
                    out('<property name="', XMLUtil.escapeAttr(prop.name), '" ' + ("function" == typeof val ? 'type="function"' : "") + ">"), this.output(out, val), out("</property>")
                }
            }
            out("</object>")
        }, outputMap_: function (out, obj) {
            out("<object>")
            for (var key in obj) {
                var val = obj[key]
                out('<property name="', XMLUtil.escapeAttr(key), '">'), this.output(out, val), out("</property>")
            }
            out("</object>")
        }, outputArray_: function (out, a) {
            if (0 == a.length)return out
            for (var i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                "string" == typeof obj || "number" == typeof obj ? out("<i>", XMLUtil.escape(obj), "</i>") : this.output(out, obj)
            }
        }, outputFunction_: function (out, f) {
            out(XMLUtil.escape(f.toString()))
        }
    }, pretty: {
        stringify: function (obj) {
            var buf = []
            return this.output(buf.push.bind(buf), obj), "<foam>\n" + buf.join("") + "</foam>\n"
        }, output: function (out, obj, opt_indent) {
            var indent = opt_indent || ""
            if (Array.isArray(obj))this.outputArray_(out, obj, indent)
            else if ("string" == typeof obj)out(XMLUtil.escape(obj))
            else if (obj instanceof Function)this.outputFunction_(out, obj, indent)
            else if (obj instanceof Date)out(obj.getTime())
            else if (obj instanceof Object)try {
                obj.model_ && "string" != typeof obj.model_ ? this.outputObject_(out, obj, indent) : this.outputMap_(out, obj, indent)
            } catch (x) {
                console.log("toXMLError: ", x)
            } else out(obj)
        }, outputObject_: function (out, obj, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "  "
            out(indent, '<object model="', XMLUtil.escapeAttr(obj.model_.name), '">')
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if ("parent" !== prop.name && obj.instance_ && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && 0 == val.length)continue
                    if (val == prop.defaultValue)continue
                    var type = "function" == typeof obj[prop.name] ? ' type="function"' : ""
                    out("\n", nestedIndent, '<property name="', XMLUtil.escapeAttr(prop.name), '"', type, ">"), this.output(out, val, nestedIndent), out("</property>")
                }
            }
            out("\n", indent, "</object>"), out("\n")
        }, outputMap_: function (out, obj, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "  "
            out(indent, "<object>")
            for (var key in obj) {
                var val = obj[key]
                out("\n", nestedIndent, '<property name="', XMLUtil.escapeAttr(key), '">'), this.output(out, val, nestedIndent), out("</property>")
            }
            out("\n", indent, "</object>\n")
        }, outputArray_: function (out, a, opt_indent) {
            if (0 == a.length)return out
            for (var indent = opt_indent || "", nestedIndent = indent + "  ", i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                out("\n"), "string" == typeof obj || "number" == typeof obj ? out(nestedIndent, "<i>", XMLUtil.escape(obj), "</i>") : this.output(out, obj, nestedIndent)
            }
            out("\n", indent)
        }, outputFunction_: function (out, f, opt_indent) {
            out(XMLUtil.escape(f.toString()) + "\n" + (opt_indent || ""))
        }
    }
}
XMLUtil.stringify = XMLUtil.pretty.stringify.bind(XMLUtil.pretty), XMLUtil.output = XMLUtil.pretty.output.bind(XMLUtil.pretty), GLOBAL.lookupCache_ = {}
var X = {
    lookupCache_: GLOBAL.lookupCache_,
    sub: sub,
    subWindow: subWindow,
    set: set,
    lookup: lookup,
    setValue: setValue,
    GLOBAL: GLOBAL
}, foam = X.foam = {}, registerFactory = function (model, factory) {
}, registerModelForModel = function (modelType, targetModel, model) {
}, registerFactoryForModel = function (factory, targetModel, model) {
}, JSONParser = SkipGrammar.create({
    __proto__: grammar, START: copyInput(sym("objAsString")),
    objAsString: copyInput(sym("obj")), obj: seq1(1, "{", repeat(sym("pair"), ","), "}"),
    pair: seq(sym("key"), ":", sym("value")), key: alt(sym("symbol"), sym("string")),
    symbol: noskip(str(seq(sym("char"), str(repeat(sym("alpha")))))),
    char: alt(range("a", "z"), range("A", "Z"), "_", "$"),
    alpha: alt(range("a", "z"), range("A", "Z"), "_", "$", range("0", "9")),
    value: simpleAlt(sym("null"), sym("undefined"), sym("function literal"), sym("expr"), sym("number"), sym("string"), sym("obj"), sym("bool"), sym("array")),
    null: literal("null"), undefined: literal("undefined"),
    expr: str(seq(sym("symbol"), optional(str(alt(seq(".", sym("expr")), seq("(", str(repeat(sym("value"), ",")), ")")))))),
    number: noskip(seq(optional("-"), repeat(range("0", "9"), null, 1), optional(seq(".", repeat(range("0", "9")))))),
    string: noskip(alt(sym("single quoted string"), sym("double quoted string"))),
    "double quoted string": seq1(1, '"', str(repeat(sym("double quoted char"))), '"'),
    "double quoted char": alt(sym("escape char"), literal('\\"', '"'), notChar('"')),
    "single quoted string": seq1(1, "'", str(repeat(sym("single quoted char"))), "'"),
    "single quoted char": alt(sym("escape char"), literal("\\'", "'"), notChar("'")),
    "escape char": alt(literal("\\\\", "\\"), literal("\\n", "\n")),
    bool: alt(literal("true", !0), literal("false", !1)), array: seq1(1, "[", repeat(sym("value"), ","), "]"),
    "function prototype": seq("function", optional(sym("symbol")), "(", repeat(sym("symbol"), ","), ")"),
    "function literal": seq(sym("function prototype"), "{", repeat(notChar("}")), "}")
}.addActions({
    obj: function (v) {
        for (var m = {}, i = 0; i < v.length; i++)m[v[i][0]] = v[i][2]
        return m
    }, null: function () {
        return null
    }, undefined: function () {
    }, number: function (v) {
        var str = ""
        return v[0] && (str += v[0]), str += v[1].join(""), v[2] && (str += v[2][0] + v[2][1].join("")), v[2] ? parseFloat(str) : parseInt(str)
    }
}), repeat0(alt(" ", "\t", "\n", "\r")))
MODEL({
    name: "TemplateParser",
    extends: "grammar",
    methods: {
        START: sym("markup"),
        markup: repeat0(alt(sym("comment"), sym("foamTag"), sym("create child"), sym("simple value"), sym("live value tag"), sym("raw values tag"), sym("values tag"), sym("code tag"), sym("ignored newline"), sym("newline"), sym("single quote"), sym("text"))),
        comment: seq1(1, "<!--", repeat0(not("-->", anyChar)), "-->"),
        foamTag: sym("foamTag_"),
        foamTag_: function () {
        },
        "create child": seq("$$", repeat(notChars(" $\r\n<{,.")), optional(JSONParser.export("objAsString"))),
        "simple value": seq("%%", repeat(notChars(' ()-"\r\n><:;,')), optional("()")),
        "live value tag": seq("<%#", repeat(not("%>", anyChar)), "%>"),
        "raw values tag": alt(seq("<%=", repeat(not("%>", anyChar)), "%>"), seq("{{{", repeat(not("}}}", anyChar)), "}}}")),
        "values tag": seq("{{", repeat(not("}}", anyChar)), "}}"),
        "code tag": seq("<%", repeat(not("%>", anyChar)), "%>"),
        "ignored newline": alt(literal("\\\r\\\n"), literal("\\\n")),
        newline: alt(literal("\r\n"), literal("\n")),
        "single quote": literal("'"),
        text: anyChar
    }
})
var TemplateOutput = {
    create: function (obj) {
        console.assert(obj, "Owner required when creating TemplateOutput.")
        var buf = [], f = function templateOut() {
            for (var i = 0; i < arguments.length; i++) {
                var o = arguments[i]
                if ("string" == typeof o)buf.push(o)
                else if (o && "Element" === o.name_) {
                    var s = o.createOutputStream()
                    o.output(s), buf.push(s.toString()), obj.addChild({initHTML: o.load.bind(o)})
                } else o && o.toView_ && (o = o.toView_()), null !== o && void 0 !== o && (o.appendHTML ? o.appendHTML(this) : o.toHTML ? buf.push(o.toHTML()) : buf.push(o), o.initHTML && obj && obj.addChild && obj.addChild(o))
            }
        }
        return f.toString = function () {
            return 0 === buf.length ? "" : (buf.length > 1 && (buf = [buf.join("")]), buf[0])
        }, f
    }
}, ConstantTemplate = function (str) {
    var TemplateOutputCreate = TemplateOutput.create.bind(TemplateOutput), f = function (opt_out) {
        var out = opt_out ? opt_out : TemplateOutputCreate(this)
        return out(str), out.toString()
    }
    return f.toString = function () {
        return 'ConstantTemplate("' + str.replace(/\n/g, "\\n").replace(/"/g, '\\"').replace(/\r/g, "") + '")'
    }, f
}, TemplateCompiler = {
    __proto__: TemplateParser, out: [], simple: !0, push: function () {
        this.simple = !1, this.pushSimple.apply(this, arguments)
    }, pushSimple: function () {
        this.out.push.apply(this.out, arguments)
    }
}.addActions({
    markup: function (v) {
        var wasSimple = this.simple, ret = wasSimple ? null : this.out.join("")
        return this.out = [], this.simple = !0, [wasSimple, ret]
    }, "create child": function (v) {
        var name = v[1].join("")
        this.push("', self.createTemplateView('", name, "'", v[2] ? ", " + v[2] : "", "),\n'")
    }, foamTag: function (e) {
        var fName = e.getAttribute("f")
        fName ? (this.push("', self.createTemplateView('", fName, "',{}).fromElement(FOAM("), this.push(JSONUtil.where(NOT_TRANSIENT).stringify(e)), this.push("))")) : (this.push("', (function() { var tagView = X.foam.ui.FoamTagView.create({element: FOAM("), this.push(JSONUtil.where(NOT_TRANSIENT).stringify(e)), this.push(")}, Y); self.addDataChild(tagView); return tagView; })() ")), this.push(",\n'")
    }, "simple value": function (v) {
        this.push("',\n self.", v[1].join(""), v[2], ",\n'")
    }, "raw values tag": function (v) {
        this.push("',\n", v[1].join(""), ",\n'")
    }, "values tag": function (v) {
        this.push("',\nescapeHTML(", v[1].join(""), "),\n'")
    }, "live value tag": function (v) {
        this.push("',\nself.dynamicTag('span', function() { return ", v[1].join(""), "; }.bind(this)),\n'")
    }, "code tag": function (v) {
        this.push("');\n", v[1].join(""), ";out('")
    }, "single quote": function () {
        this.pushSimple("\\'")
    }, newline: function () {
        this.pushSimple("\\n")
    }, text: function (v) {
        this.pushSimple(v)
    }
})
MODEL({
    name: "TemplateUtil",
    constants: {
        HEADER: "var self = this, X = this.X, Y = this.Y;var out = opt_out ? opt_out : TOC(this);out('",
        FOOTERS: {
            html: "');return out.toString();",
            css: "');return X.foam.grammars.CSSDecl.create({model:this.model_}).parser.parseString(out.toString());"
        }
    },
    methods: {
        lazyCompile: function (t) {
            var delegate, f = function () {
                if (!delegate) {
                    if (!t.template)throw"Must arequire() template model before use for " + this.name_ + "." + t.name
                    delegate = TemplateUtil.compile(Template.isInstance(t) ? t : Template.create(t), this.model_)
                }
                return delegate.apply(this, arguments)
            }
            return f.toString = function () {
                return delegate ? delegate.toString() : t.toString()
            }, f
        }, compile_: function (t, code, model) {
            for (var args = ["opt_out"], i = 0; i < t.args.length; i++)args.push(t.args[i].name)
            return eval("(function() { var escapeHTML = XMLUtil.escape, TOC = TemplateOutput.create.bind(TemplateOutput); return function(" + args.join(",") + "){" + code + "};})()" + (model && model.id ? "\n\n//# sourceURL=" + model.id.replace(/\./g, "/") + "." + t.name + "\n" : ""))
        }, parseCSS: function (t, model) {
            var parser = this.CSSParser_ || (this.CSSParser_ = X.foam.grammars.CSSDecl.create())
            return parser.model = model, parser.parser.parseString(t).toString()
        }, parseU2: function (template, t, model) {
            X.foam.u2.ElementParser.getPrototype()
            var parser = this.U2Parser_ || (this.U2Parser_ = X.foam.u2.ElementParser.parser__.create())
            parser.modelName_ = cssClassize(model.id)
            var out = parser.parseString(t.trim(), "initE" === template.name ? parser.initTemplate : parser.template)
            return out.toString()
        }, compile: function (t, model) {
            if ("CSS" !== t.name) {
                if (model.isSubModel(X.lookup("foam.u2.Element")))return eval("(function() { return " + this.parseU2(t, t.template, model) + "; })()")
                if (t.template.startsWith("#U2")) {
                    var code = "(function() { return " + this.parseU2(t, t.template.substring(3), model) + "; })()"
                    return eval(code)
                }
            }
            var parseResult = TemplateCompiler.parseString(t.template)
            if (parseResult[0])return ConstantTemplate("css" === t.language ? this.parseCSS(t.template, model) : t.template)
            var code = this.HEADER + parseResult[1] + this.FOOTERS[t.language]
            try {
                return this.compile_(t, code, model)
            } catch (err) {
                return console.log("Template Error: ", err), console.log(parseResult), function () {
                }
            }
        }, stringifyTemplate: function (template) {
            return function () {
                var buf = []
                return this.output(buf.push.bind(buf), obj), buf.join("")
            }
        }, expandTemplate: function (self, t, opt_X) {
            var X = opt_X || self.X
            if ("function" == typeof t)t = X.Template.create({
                name: t.name,
                args: t.toString().match(/\((.*?)\)/)[1].split(",").slice(1).map(function (a) {
                    return X.Arg.create({name: a.trim()})
                }),
                template: multiline(t)
            })
            else if ("string" == typeof t)t = docTemplate = X.Template.create({name: "body", template: t})
            else if (t.template || t.code)"function" == typeof t.template && (t.template = multiline(t.template))
            else {
                t = X.Template.create(t)
                var future = afuture(), path = self.sourcePath
                if (t.futureTemplate = future.get, path = path.substring(0, path.lastIndexOf("/") + 1), path += t.path ? t.path : self.name + "_" + t.name + ".ft", "undefined" != typeof vm && vm.runInThisContext) {
                    var fs = require("fs")
                    fs.readFile(path, function (err, data) {
                        t.template = data.toString(), future.set(Template.create(t))
                    })
                } else {
                    var xhr = new XMLHttpRequest
                    xhr.open("GET", path), xhr.asend(function (data) {
                        t.template = data, future.set(Template.create(t))
                    })
                }
            }
            return t.futureTemplate || (t.futureTemplate = aconstant(t)), t.template$ || (t = "undefined" != typeof X.Template ? JSONUtil.mapToObj(X, t, X.Template) : t), t
        }, expandModelTemplates: function (self) {
            for (var templates = self.templates, i = 0; i < templates.length; i++)templates[i] = TemplateUtil.expandTemplate(self, templates[i])
        }
    }
})
var aeval = function (src) {
    return aconstant(eval("(" + src + ")"))
}, aevalTemplate = function (t, model) {
    return aseq(t.futureTemplate, function (ret, t) {
        ret(TemplateUtil.lazyCompile(t))
    })
}, escapeHTML = XMLUtil.escape, TOC = TemplateOutput.create.bind(TemplateOutput), $documents = []
window && $documents.push(window.document)
var $WID__ = 0, $ = function (id) {
    console.log("Deprecated use of GLOBAL.$.")
    for (var i = 0; i < $documents.length; i++) {
        if (document.FOAM_OBJECTS && document.FOAM_OBJECTS[id])return document.FOAM_OBJECTS[id]
        var ret = $documents[i].getElementById(id)
        if (ret)return ret
    }
}, $$ = function (cls) {
    console.log("Deprecated use of GLOBAL.$$.")
    for (var i = 0; i < $documents.length; i++) {
        var ret = $documents[i].getElementsByClassName(cls)
        if (ret.length > 0)return ret
    }
    return []
}, FOAM = function (map, opt_X, seq) {
    var obj = JSONUtil.mapToObj(opt_X || X, map, void 0, seq)
    return obj
}
FOAM.putFactory = function (ctx, name, factory) {
    ctx.__defineGetter__(name, function () {
        return console.log("Bouncing Factory: ", name), delete ctx[name], ctx[name] = factory()
    })
}
var USED_MODELS = {}, UNUSED_MODELS = {}, NONMODEL_INSTANCES = {}
FOAM.browse = function (model, opt_dao, opt_X) {
    var Y = opt_X || X.sub(void 0, "FOAM BROWSER")
    "string" == typeof model && (model = Y[model])
    var dao = opt_dao || Y[model.name + "DAO"] || Y[model.plural]
    dao || (Y[model.name + "DAO"] = [].dao)
    var ctrl = Y.foam.ui.DAOController.create({model: model, dao: dao, useSearchView: !1})
    if (Y.stack)Y.stack.pushView(ctrl)
    else {
        var w = opt_X ? opt_X.window : window
        Y.stack = Y.foam.ui.StackView.create()
        var win = Y.foam.ui.layout.Window.create({window: w, data: Y.stack}, Y)
        document.body.insertAdjacentHTML("beforeend", win.toHTML()), win.initHTML(), Y.stack.setTopView(ctrl)
    }
}
var arequire = function (modelName) {
    var THIS = this === GLOBAL ? X : this, model = THIS.lookup(modelName)
    if (!model) {
        if (!THIS.ModelDAO)return aconstant()
        if (THIS.arequire$ModelLoadsInProgress) {
            if (THIS.arequire$ModelLoadsInProgress[modelName])return THIS.arequire$ModelLoadsInProgress[modelName]
        } else THIS.set("arequire$ModelLoadsInProgress", {})
        var future = afuture()
        return THIS.arequire$ModelLoadsInProgress[modelName] = future.get, THIS.ModelDAO.find(modelName, {
            put: function (m) {
                m.X = THIS
                var next_ = function (m) {
                    THIS.arequire$ModelLoadsInProgress[modelName] = !1, THIS.GLOBAL.X.registerModel(m), THIS.lookupCache_[m.id] || (THIS.lookupCache_[m.id] = m), future.set(m)
                }
                m.arequire ? m.arequire()(next_) : next_(m)
            }, error: function () {
                var args = argsToArray(arguments)
                "DocumentationProperty" !== modelName && console.warn.apply(console, ["Could not load model: ", modelName].concat(args)), THIS.arequire$ModelLoadsInProgress[modelName] = !1, future.set(void 0)
            }
        }), future.get
    }
    return model.arequire ? model.arequire() : aconstant(model)
}, FOAM_POWERED = '<a style="text-decoration:none;" href="https://github.com/foam-framework/foam/" target="_blank"><font size=+1 face="catull" style="text-shadow:rgba(64,64,64,0.3) 3px 3px 4px;"><font color="#3333FF">F</font><font color="#FF0000">O</font><font color="#FFCC00">A</font><font color="#33CC00">M</font><font color="#555555" > POWERED</font></font></a>', CLASS = function (m) {
    function registerModelLatch(path, m) {
        var id = m.package ? m.package + "." + m.name : m.name
        if (EAGER[id]) {
            USED_MODELS[id] = !0
            var work = [], model = JSONUtil.mapToObj(X, m, Model, work)
            return work.length > 0 && (model.extra__ = aseq.apply(null, work)), X.registerModel(model, void 0, !0), model
        }
        GLOBAL.lookupCache_[id] = void 0, UNUSED_MODELS[id] = !0
        var triggered = !1
        Object.defineProperty(m.package ? path : GLOBAL, m.name, {
            get: function triggerModelLatch() {
                if (triggered)return null
                triggered = !0, USED_MODELS[id] = !0, UNUSED_MODELS[id] = void 0
                var work = [], model = JSONUtil.mapToObj(X, m, Model, work)
                return work.length > 0 && (model.extra__ = aseq.apply(null, work)), X.registerModel(model), model
            }, configurable: !0
        })
    }

    var EAGER = {
        Method: !0,
        BooleanProperty: !0,
        Action: !0,
        FunctionProperty: !0,
        Constant: !0,
        Message: !0,
        ArrayProperty: !0,
        StringArrayProperty: !0,
        Template: !0,
        Arg: !0,
        Relationship: !0,
        ViewFactoryProperty: !0,
        FactoryProperty: !0,
        "foam.ui.Window": !0,
        StringProperty: !0,
        "foam.html.Element": !0,
        Expr: !0,
        AbstractDAO: !0
    }
    document && document.currentScript && (m.sourcePath = document.currentScript.src), registerModelLatch(packagePath(X, m.package), m)
}, MODEL = CLASS
X.$ = $, X.$$ = $$, X.registerModel = registerModel, X.arequire = arequire, X.onRegisterModel = onRegisterModel
var FObject = {
    __proto__: PropertyChangeSupport, name_: "FObject", get Y() {
        return Object.prototype.hasOwnProperty.call(this, "Y_") ? this.Y_ : this.Y_ = DEBUG ? this.X.sub({}, (this.X.NAME ? this.X.NAME : "") + "_" + this.name_) : this.X.sub()
    }, replaceModel_: function (feature, dataModel, X) {
        replacementName = (dataModel.package ? dataModel.package + "." : "") + (dataModel.name ? dataModel.name : dataModel) + feature.name
        var replacementModel = X.lookup(replacementName)
        if (replacementModel)return replacementModel
    }, create_: function () {
        return Object.create(this)
    }, create: function (args, opt_X) {
        var dataModel = args ? args.model ? args.model : args.data ? args.data.model_ : void 0 : void 0
        if (dataModel && (opt_X || X).Model.isInstance(dataModel)) {
            var ret = this.replaceModel_(this.model_, dataModel, opt_X || X)
            if (ret)return ret.create(args, opt_X)
        }
        var o = this.create_(this)
        for (o.instance_ = {}; !o.instance_;)o.instance_ = {}
        if (o.X = opt_X || X, this.model_.instance_.imports_ && this.model_.instance_.imports_.length) {
            Object.prototype.hasOwnProperty.call(this, "imports__") || (this.imports__ = this.model_.instance_.imports_.map(function (e) {
                var s = e.split(" as ")
                return [s[0], s[1] || s[0]]
            }))
            for (var i = 0; i < this.imports__.length; i++) {
                var im = this.imports__[i]
                args && args.hasOwnProperty(im[1]) || "undefined" == typeof o.X[im[0]] || (o[im[1]] = o.X[im[0]])
            }
        }
        if (o.model_)for (var agents = this.initAgents(), i = 0; i < agents.length; i++)agents[i][1](o, o.X, args)
        return o.init(args), o
    }, init: nop, xbind: function (map) {
        var newModel = {
            __proto__: this, create: function (args, X) {
                var createArgs = {}, key
                args = args ? args.instance_ || args : {}
                for (key in args)args.hasOwnProperty(key) && (createArgs[key] = args[key])
                for (key in map)createArgs.hasOwnProperty(key) || (createArgs[key] = map[key])
                return this.__proto__.create(createArgs, X)
            }, xbind: function (m2) {
                for (var key in map)m2.hasOwnProperty(key) || (m2[key] = map[key])
                return this.__proto__.xbind(m2)
            }
        }
        return this.required__ && (newModel.required__ = aseq(this.required__, aconstant(newModel))), newModel
    }, X: X, addInitAgent: function (priority, desc, agent) {
        agent.toString = function () {
            return desc
        }, this.initAgents_.push([priority, agent])
    }, initAgents: function () {
        if (this.model_) {
            if (!Object.hasOwnProperty.call(this, "initAgents_")) {
                var agents = this.initAgents_ = [], self = this
                Object_forEach(this.model_.instance_.exports_, function (e) {
                    var exp = e.split("as ")
                    if (0 != exp.length) {
                        var key = exp[0].trim(), alias = exp[1] || exp[0]
                        if (key) {
                            var asValue = "$" !== key && "$$" != key && "$" == key.charAt(key.length - 1)
                            asValue && console.warn("Deprecated use of value$ export. Just remove the $. ", self.model_.id, this.name, key, alias), asValue && (key = key.slice(0, key.length - 1))
                            var prop = self.model_.getProperty(key)
                            prop ? asValue ? self.addInitAgent(1, "export property value " + key, function (o, X) {
                                o.Y.set(alias, o[prop.name$_])
                            }) : self.addInitAgent(1, "export property " + key, function (o, X) {
                                o.Y.setValue(alias, o[prop.name$_])
                            }) : self.addInitAgent(0, "export other " + key, function (o, X) {
                                var out = "function" == typeof o[key] ? o[key].bind(o) : o[key]
                                o.Y.set(alias, out)
                            })
                        } else self.addInitAgent(0, "export this", function (o, X) {
                            o.Y.set(alias, o)
                        })
                    }
                })
                var fastInit = {Property: !0, Method: !0}[this.name_]
                if (fastInit) {
                    for (var keys = {}, ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
                        var prop = ps[i]
                        keys[prop.name] = keys[prop.name$_] = !0
                    }
                    this.addInitAgent(0, "fast copy args", function fastCopyArgs(o, X, m) {
                        if (m)if (m.instance_) {
                            m = m.instance_
                            for (var key in m)o[key] = m[key]
                        } else for (var key in m)keys[key] && (o[key] = m[key])
                    })
                }
                for (var ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
                    var prop = ps[i]
                    prop.initPropertyAgents ? prop.initPropertyAgents(self, fastInit) : !function (name) {
                        self.addInitAgent(0, "set proto-property " + name, function setProtoProperty(o, X, m) {
                            m && m.hasOwnProperty(name) && (o[name] = m[name])
                        })
                    }(prop.name)
                }
                self.addInitAgent(0, "Add create() to Model", function (o, X) {
                    Model.isInstance(o) && "Model" != o.name && (o.create = BootstrapModel.create)
                })
                for (var i = 0; i < agents.length; i++)agents[i][2] = i
                agents.sort(CompoundComparator(function (o1, o2) {
                    return o1[0] - o2[0]
                }, function (o1, o2) {
                    return o1[2] - o2[2]
                }))
            }
            return this.initAgents_
        }
    }, fromElement: function (e) {
        var RESERVED_ATTRS = {id: !0, model: !0, view: !0, showactions: !0, oninit: !0}, elements = this.elementMap_
        if (!elements) {
            elements = {}
            for (var properties = this.model_.getRuntimeProperties(), i = 0; i < properties.length; i++) {
                var p = properties[i]
                RESERVED_ATTRS[p.name] || (elements[p.name] = p, elements[p.name.toUpperCase()] = p), elements["p:" + p.name] = p, elements["P:" + p.name.toUpperCase()] = p
            }
            this.elementMap_ = elements
        }
        for (var i = 0; i < e.attributes.length; i++) {
            var attr = e.attributes[i], p = elements[attr.name] || elements[attr.name.toUpperCase()], val = attr.value
            if (p)if (val.startsWith("#")) {
                val = val.substring(1)
                var $val = this.X.$(val)
                $val ? this[attr.name] = this.X.$(val) : this[p.name] = p.fromString(val)
            } else this[p.name] = p.fromString(val)
            else RESERVED_ATTRS[attr.name] || console.warn('Unknown attribute name: "' + attr.name + '"')
        }
        for (var i = 0; i < e.children.length; i++) {
            var c = e.children[i], p = elements[c.nodeName]
            p ? p.fromElement.call(this, c, p) : console.warn('Unknown element name: "' + c.nodeName + '"')
        }
        return this
    }, createFOAMGetter: function (name, getter) {
        var stack = Events.onGet.stack
        return function FOAMGetter() {
            var value = getter.call(this, name), f = stack[0]
            return f && f(this, name, value), value
        }
    }, createFOAMSetter: function (name, setter) {
        var stack = Events.onSet.stack
        return function FOAMSetter(newValue) {
            var f = stack[0]
            f && !f(this, name, newValue) || setter.call(this, newValue, name)
        }
    }, toString: function () {
        return this.model_.name + "Prototype"
    }, hasOwnProperty: function (name) {
        return "undefined" != typeof this.instance_[name]
    }, writeActions: function (other, out) {
        for (var properties = this.model_.getRuntimeProperties(), i = 0, property; property = properties[i]; i++)if (property.actionFactory)for (var actions = property.actionFactory(this, property.f(this), property.f(other)), j = 0; j < actions.length; j++)out(actions[j])
    }, validateObject: function () {
        for (var ret = null, ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
            var p = ps[i]
            if (p.validate) {
                var e = p.validate.call(this)
                e && (ret || (ret = [])).push([p, e])
            }
        }
        return ret
    }, isValid: function () {
        return !this.validateObject()
    }, equals: function (other) {
        return 0 == this.compareTo(other)
    }, compareTo: function (other) {
        if (other === this)return 0
        if (this.model_ !== other.model_)return this.model_.id.compareTo(other.model_ && other.model_.id) || 1
        for (var ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
            var r = ps[i].compare(this, other)
            if (r)return r
        }
        return 0
    }, diff: function (other) {
        for (var diff = {}, properties = this.model_.getRuntimeProperties(), i = 0, property; property = properties[i]; i++)if (Array.isArray(property.f(this))) {
            var subdiff = property.f(this).diff(property.f(other))
            0 === subdiff.added.length && 0 === subdiff.removed.length || (diff[property.name] = subdiff)
        } else 0 !== property.compare(this, other) && (diff[property.name] = property.f(other))
        return diff
    }, clearProperty: function (name) {
        delete this.instance_[name]
    }, defineProperty: function (prop) {
        var name = prop.name
        prop.name$_ = name + "$", this[constantize(prop.name)] = prop
        var obj = DEBUG ? this : __ROOT__
        obj.__lookupGetter__(prop.name$_) || Object.defineProperty(obj, prop.name$_, {
            get: function getValue() {
                return this.propertyValue(name)
            }, set: function setValue(value) {
                Events.link(value, this.propertyValue(name))
            }, configurable: !0
        })
        var pgetter, psetter
        if (prop.getter)pgetter = this.createFOAMGetter(name, prop.getter)
        else {
            if (prop.lazyFactory || prop.factory) {
                var f = prop.lazyFactory || prop.factory
                getter = function factory() {
                    if ("undefined" == typeof this.instance_[name]) {
                        this.instance_[name] = null
                        var val = f.call(this, prop)
                        "undefined" == typeof val && (val = null), this[name] = val
                    }
                    return this.instance_[name]
                }
            } else if (prop.defaultValueFn) {
                var f = prop.defaultValueFn
                getter = function defaultValueFn() {
                    return "undefined" != typeof this.instance_[name] ? this.instance_[name] : f.call(this, prop)
                }
            } else {
                var defaultValue = prop.defaultValue
                getter = function getInstanceVar() {
                    return "undefined" != typeof this.instance_[name] ? this.instance_[name] : defaultValue
                }
            }
            pgetter = this.createFOAMGetter(name, getter)
        }
        if (prop.setter)psetter = this.createFOAMSetter(name, prop.setter)
        else {
            var setter = function setInstanceValue(oldValue, newValue) {
                this.instance_[name] = newValue
            }
            "int" !== prop.type && "float" !== prop.type || (setter = function (setter) {
                return function numberSetter(oldValue, newValue) {
                    setter.call(this, oldValue, "number" != typeof newValue ? Number(newValue) : newValue)
                }
            }(setter)), prop.onDAOUpdate && (setter = "string" == typeof prop.onDAOUpdate ? function (setter, onDAOUpdate, listenerName) {
                return function onDAOUpdateSetter(oldValue, newValue) {
                    setter.call(this, oldValue, newValue)
                    var listener = this[listenerName] || (this[listenerName] = this[onDAOUpdate].bind(this))
                    oldValue && oldValue.unlisten(listener), newValue && (newValue.listen(listener), listener())
                }
            }(setter, prop.onDAOUpdate, prop.name + "_onDAOUpdate") : function (setter, onDAOUpdate, listenerName) {
                return function onDAOUpdateSetter2(oldValue, newValue) {
                    setter.call(this, oldValue, newValue)
                    var listener = this[listenerName] || (this[listenerName] = onDAOUpdate.bind(this))
                    oldValue && oldValue.unlisten(listener), newValue && (newValue.listen(listener), listener())
                }
            }(setter, prop.onDAOUpdate, prop.name + "_onDAOUpdate")), prop.postSet && (setter = function (setter, postSet) {
                return function postSetSetter(oldValue, newValue) {
                    setter.call(this, oldValue, newValue), postSet.call(this, oldValue, newValue, prop)
                }
            }(setter, prop.postSet))
            var propertyTopic = PropertyChangeSupport.propertyTopic(name)
            setter = function (setter) {
                return function propertyChangeSetter(oldValue, newValue) {
                    setter.call(this, oldValue, newValue), this.propertyChange_(propertyTopic, oldValue, newValue)
                }
            }(setter), prop.preSet && (setter = function (setter, preSet) {
                return function preSetSetter(oldValue, newValue) {
                    setter.call(this, oldValue, preSet.call(this, oldValue, newValue, prop))
                }
            }(setter, prop.preSet)), prop.adapt && (setter = function (setter, adapt) {
                return function adaptSetter(oldValue, newValue) {
                    setter.call(this, oldValue, adapt.call(this, oldValue, newValue, prop))
                }
            }(setter, prop.adapt)), prop.regex && (setter = function (setter, name, regex) {
                return function regexValidator(oldValue, newValue) {
                    if (!newValue || "string" != typeof newValue || !newValue.match(regex))throw'Invalid Property value for "' + name + '", "' + newValue + '" violates regex: ' + regex
                    setter.call(this, oldValue, newValue)
                }
            }(setter, prop.name, prop.regex)), setter = function (setter, defaultValue) {
                return function setInstanceVar(newValue) {
                    setter.call(this, "undefined" == typeof this.instance_[name] ? defaultValue : this.instance_[name], newValue)
                }
            }(setter, prop.defaultValue), psetter = this.createFOAMSetter(name, setter)
        }
        Object.defineProperty(this, name, {
            get: pgetter,
            set: psetter,
            configurable: !0
        }), prop.install && prop.install.call(this, prop)
    }, addMethod: function (name, method) {
        this.__proto__[name] ? override(this, name, method) : this[name] = method
    }, hashCode: function () {
        for (var hash = 17, properties = this.model_.getRuntimeProperties(), i = 0; i < properties.length; i++) {
            var prop = this[properties[i].name], code = prop ? prop.hashCode ? prop.hashCode() : prop.toString().hashCode() : 0
            hash = (hash << 5) - hash + code, hash &= hash
        }
        return hash
    }, toProtobuf: function () {
        var out = ProtoWriter.create()
        return this.outProtobuf(out), out.value
    }, outProtobuf: function (out) {
        for (var proprties = this.model_getRuntimeProperties(), i = 0; i < properties.length; i++) {
            var prop = properties[i]
            Number.isFinite(prop.prototag) && prop.outProtobuf(this, out)
        }
    }, clone: function () {
        var m = {}
        for (var key in this.instance_) {
            var value = this[key]
            if (void 0 !== value) {
                var prop = this.model_.getProperty(key)
                prop && prop.cloneProperty ? prop.cloneProperty.call(prop, value, m) : prop.model_ || (m[key] = value)
            }
        }
        return this.model_.create(m, this.X)
    }, deepClone: function () {
        var m = {}
        for (var key in this.instance_) {
            var value = this[key]
            if (void 0 !== value) {
                var prop = this.model_.getProperty(key)
                prop && prop.deepCloneProperty && prop.deepCloneProperty.call(prop, value, m)
            }
        }
        return this.model_.create(m, this.X)
    }, copyFrom: function (src) {
        if (src && this.model_)for (var ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
            var prop = ps[i]
            src.hasOwnProperty(prop.name) && (this[prop.name] = src[prop.name]), src.hasOwnProperty(prop.name$_) && (this[prop.name$_] = src[prop.name$_])
        }
        return this
    }, output: function (out) {
        return JSONUtil.output(out, this)
    }, toJSON: function () {
        return JSONUtil.stringify(this)
    }, toXML: function () {
        return XMLUtil.stringify(this)
    }, write: function (opt_X, opt_view) {
        (opt_X || this.X).writeView(this.defaultView(opt_view))
    }, defaultView: function (opt_view) {
        return (opt_view || X.foam.ui.DetailView).create({model: this.model_, data: this, showActions: !0})
    }, decorate: function (name, func, that) {
        var delegate = this[name]
        return this[name] = function () {
            return func.call(this, that, delegate.bind(this), arguments)
        }, this
    }, addDecorator: function (decorator) {
        decorator.decorateObject && decorator.decorateObject(this)
        for (var i = 0; i < decorator.model_.methods.length; i++) {
            var method = decorator.model_.methods[i]
            "decorateObject" !== method.name && this.decorate(method.name, method.code, decorator)
        }
        return this
    }
}
this.Constant = null, this.Method = null, this.Action = null, this.Relationship = null
var CCC = 0, BootstrapModel = {
    __proto__: PropertyChangeSupport,
    name_: "BootstrapModel <startup only, error if you see this>",
    addTraitToModel_: function (traitModel, parentModel) {
        var parentName = parentModel && parentModel.id ? parentModel.id.replace(/\./g, "__") : "", traitName = traitModel.id ? traitModel.id.replace(/\./g, "__") : "", name = parentName + "_ExtendedWith_" + traitName
        if (!lookup(name)) {
            var models = traitModel.models
            traitModel = traitModel.clone(), traitModel.package = "", traitModel.name = name, traitModel.extends = parentModel && parentModel.id, traitModel.models = models, traitModel.X.registerModel(traitModel)
        }
        var ret = traitModel.X.lookup(name)
        return console.assert(ret, "Error adding Trait to Model, unknown name: ", name), ret
    },
    createMethod_: function (X, name, fn) {
        var method = Method.create({name: name, code: fn})
        if (FEATURE_ENABLED(["debug"]) && Arg) {
            var str = fn.toString(), match = str.match(/^function[ _$\w]*\(([ ,\w]+)/)
            match && (method.args = match[1].split(",").map(function (name) {
                return Arg.create({name: name.trim()})
            }))
        }
        return method
    },
    buildProtoImports_: function (props) {
        Object_forEach(this.instance_.imports_, function (i) {
            var imp = i.split(" as "), key = imp[0], alias = imp[1] || imp[0]
            if (alias.length && "$" == alias.charAt(alias.length - 1) && (alias = alias.slice(0, alias.length - 1)), !this.getProperty(alias)) {
                var prop = ImportedProperty.create({name: alias})
                props.push(prop)
            }
        }.bind(this))
    },
    buildProtoProperties_: function (cls, extendsModel, props) {
        for (var i = 0; i < props.length; i++) {
            var p = props[i]
            if (extendsModel) {
                var superProp = extendsModel.getProperty(p.name)
                if (superProp) {
                    var p0 = p
                    p = superProp.clone().copyFrom(p), p0.adapt && superProp.adapt && (p.adapt = function (a1, a2) {
                        return function (oldValue, newValue, prop) {
                            return a2.call(this, oldValue, a1.call(this, oldValue, newValue, prop), prop)
                        }
                    }(p0.adapt, superProp.adapt)), p0.preSet && superProp.preSet && (p.preSet = function (a1, a2) {
                        return function (oldValue, newValue, prop) {
                            return a2.call(this, oldValue, a1.call(this, oldValue, newValue, prop), prop)
                        }
                    }(p0.preSet, superProp.preSet)), p0.postSet && superProp.postSet && (p.postSet = function (a1, a2) {
                        return function (oldValue, newValue, prop) {
                            a2.call(this, oldValue, newValue, prop), a1.call(this, oldValue, newValue, prop)
                        }
                    }(p0.postSet, superProp.postSet)), props[i] = p, this[constantize(p.name)] = p
                }
            }
            cls.defineProperty(p)
        }
        this.propertyMap_ = null
    },
    buildProtoMethods_: function (cls) {
        if (Array.isArray(this.methods))for (var i = 0; i < this.methods.length; i++) {
            var m = this.methods[i]
            "function" == typeof m ? cls.addMethod(m.name, m) : cls.addMethod(m.name, m.code)
        } else for (key in this.methods) {
            var m = this.methods[key]
            Method && Method.isInstance(m) ? cls.addMethod(m.name, m.generateFunction()) : cls.addMethod(key, m)
        }
    },
    buildPrototype: function () {
        if (_DOC_ && BootstrapModel.saveDefinition(this), this.extends && !this.X.lookup(this.extends))throw new Error("Unknown Model in extends: " + this.extends)
        var extendsModel = this.extends && this.X.lookup(this.extends)
        if (this.traits)for (var i = 0; i < this.traits.length; i++) {
            var trait = this.traits[i], traitModel = this.X.lookup(trait)
            console.assert(traitModel, "Unknown trait: " + trait), traitModel ? extendsModel = this.addTraitToModel_(traitModel, extendsModel) : console.warn("Missing trait: ", trait, ", in Model: ", this.name)
        }
        var proto = extendsModel ? extendsModel.getPrototype() : FObject, cls = Object.create(proto)
        cls.model_ = this, cls.name_ = this.name, this.models && Object_forEach(this.models, function (m) {
            if (this[m.name]) {
                var model = this[m.name]
                defineLocalProperty(cls, m.name, function () {
                    var Y = this.Y
                    return {
                        __proto__: model, create: function (args, opt_X) {
                            return model.create(args, opt_X || Y)
                        }
                    }
                })
            }
        }.bind(this)), Object_forEach(this.requires, function (i) {
            var imp = i.split(" as "), m = imp[0], path = m.split("."), key = imp[1] || path[path.length - 1]
            defineLocalProperty(cls, key, function () {
                var Y = this.Y, model = this.X.lookup(m)
                return console.assert(model, "Unknown Model: " + m + " in " + this.name_), {
                    __proto__: model,
                    create: function (args, X) {
                        return model.create(args, X || Y)
                    }
                }
            })
        })
        var props = this.instance_.properties_ = this.properties ? this.properties.clone() : []
        if (this.instance_.imports_ = this.imports, extendsModel && (this.instance_.imports_ = this.instance_.imports_.concat(extendsModel.instance_.imports_)), this.buildProtoImports_(props), this.buildProtoProperties_(cls, extendsModel, props), extendsModel) {
            for (var i = 0; i < extendsModel.instance_.properties_.length; i++) {
                var p = extendsModel.instance_.properties_[i], name = constantize(p.name)
                this[name] || (this[name] = p)
            }
            for (i = 0; i < extendsModel.relationships.length; i++) {
                var r = extendsModel.relationships[i], name = constantize(r.name)
                this[name] || (this[name] = r)
            }
        }
        if (this.instance_.exports_ = this.exports ? this.exports.clone() : [], extendsModel && (this.instance_.exports_ = this.instance_.exports_.concat(extendsModel.instance_.exports_)), this.templates && Object_forEach(this.templates, function (t) {
                cls.addMethod(t.name, t.code ? t.code : TemplateUtil.lazyCompile(t))
            }), this.instance_.actions_ = this.actions ? this.actions.clone() : [], this.actions)for (var i = 0; i < this.actions.length; i++)(function (a) {
            if (extendsModel) {
                var superAction = extendsModel.getAction(a.name)
                superAction && (a = superAction.clone().copyFrom(a))
            }
            this.instance_.actions_[i] = a, Object.prototype.hasOwnProperty.call(cls, constantize(a.name)) || (cls[constantize(a.name)] = a), this[constantize(a.name)] = a, cls.addMethod(a.name, function (opt_x) {
                a.maybeCall(opt_x || this.X, this)
            })
        }).bind(this)(this.actions[i])
        var key
        if (this.constants)for (var i = 0; i < this.constants.length; i++) {
            var c = this.constants[i]
            cls[c.name] = this[c.name] = c.value
        }
        this.messages && this.messages.length > 0 && GLOBAL.Message && Object_forEach(this.messages, function (m, key) {
            Message.isInstance(m) || (m = this.messages[key] = Message.create(m))
            var clsProps = {}, mdlProps = {}, constName = constantize(m.name)
            clsProps[m.name] = {
                get: function () {
                    return m.value
                }
            }, clsProps[constName] = {value: m}, mdlProps[constName] = {value: m}, Object.defineProperties(cls, clsProps), Object.defineProperties(this, mdlProps)
        }.bind(this)), this.buildProtoMethods_(cls)
        var self = this
        this.instance_.relationships_ = this.relationships, extendsModel && (this.instance_.relationships_ = this.instance_.relationships_.concat(extendsModel.instance_.relationships_)), this.relationships && this.relationships.forEach(function (r) {
            var name = constantize(r.name)
            self[name] || (self[name] = r), defineLazyProperty(cls, r.name, function () {
                var m = this.X.lookup(r.relatedModel), name = daoize(m.name), dao = this.X[name]
                return dao || console.error("Relationship " + r.name + " needs " + name + " in the context, and it was not found."), dao = RelationshipDAO.create({
                    delegate: dao,
                    relatedProperty: m.getProperty(r.relatedProperty),
                    relativeID: this.id
                }), {
                    get: function () {
                        return dao
                    }, configurable: !0
                }
            })
        })
        var createListenerTrampoline = function (cls, name, fn, isMerged, isFramed, whenIdle) {
            console.assert(fn, "createListenerTrampoline: fn not defined"), fn.name = name, Object.defineProperty(cls, name, {
                get: function () {
                    var l = fn.bind(this)
                    return whenIdle && (l = Movement.whenIdle(l)), isFramed ? l = EventService.framed(l, this.X) : isMerged && (l = EventService.merged(l, isMerged === !0 ? void 0 : isMerged, this.X)), Object.defineProperty(this, name, {
                        configurable: !0,
                        value: l
                    }), l
                }, configurable: !0
            })
        }
        if (Array.isArray(this.listeners))for (var i = 0; i < this.listeners.length; i++) {
            var l = this.listeners[i]
            createListenerTrampoline(cls, l.name, l.code, l.isMerged, l.isFramed, l.whenIdle)
        } else this.listeners && Object_forEach(this.listeners, function (l, key) {
            createListenerTrampoline(cls, key, l)
        })
        if (this.topics && Object_forEach(this.topics, function (t) {
            }), extendsModel) {
            this.getProperty("")
            for (var ips = [], ps = extendsModel.instance_.properties_, i = 0; i < ps.length; i++) {
                var p = ps[i]
                this.getProperty(p.name) || (ips.push(p), this.propertyMap_[p.name] = p)
            }
            ips.length && (this.instance_.properties_ = ips.concat(this.instance_.properties_))
            for (var ias = [], as = extendsModel.instance_.actions_, i = 0; i < as.length; i++) {
                var a = as[i]
                this.getAction && this.getAction(a.name) || ias.push(a)
            }
            ias.length && (this.instance_.actions_ = ias.concat(this.instance_.actions_))
        }
        if (this.instance_.properties_.length > 0 && !cls.__lookupGetter__("id")) {
            var primaryKey = this.ids
            1 == primaryKey.length ? (cls.__defineGetter__("id", function () {
                return this[primaryKey[0]]
            }), cls.__defineSetter__("id", function (val) {
                this[primaryKey[0]] = val
            })) : primaryKey.length > 1 && (cls.__defineGetter__("id", function () {
                return primaryKey.map(function (key) {
                    return this[key]
                }.bind(this))
            }), cls.__defineSetter__("id", function (val) {
                primaryKey.map(function (key, i) {
                    this[key] = val[i]
                }.bind(this))
            }))
        }
        return cls
    },
    getAllRequires: function () {
        function setModel(o) {
            o && o.model_ && (requires[o.model_.id] = !0)
        }

        var requires = {}
        return this.requires.forEach(function (r) {
            requires[r.split(" ")[0]] = !0
        }), this.traits.forEach(function (t) {
            requires[t] = !0
        }), this.extends && (requires[this.extends] = !0), this.properties.forEach(setModel), this.actions.forEach(setModel), this.templates.forEach(setModel), this.listeners.forEach(setModel), Object.keys(requires)
    },
    getPrototype: function () {
        return this.instance_.prototype_ || (this.instance_.prototype_ = this.buildPrototype(), this.onLoad && this.onLoad()), this.instance_.prototype_
    },
    saveDefinition: function (self) {
        self.definition_ = {}, Array.isArray(self.methods) && (self.definition_.methods = [].concat(self.methods)), Array.isArray(self.templates) && (self.definition_.templates = [].concat(self.templates)), Array.isArray(self.relationships) && (self.definition_.relationships = [].concat(self.relationships)), Array.isArray(self.properties) && (self.definition_.properties = [].concat(self.properties)), Array.isArray(self.actions) && (self.definition_.actions = [].concat(self.actions)), Array.isArray(self.listeners) && (self.definition_.listeners = [].concat(self.listeners)), Array.isArray(self.models) && (self.definition_.models = [].concat(self.models)), Array.isArray(self.tests) && (self.definition_.tests = [].concat(self.tests)), Array.isArray(self.issues) && (self.definition_.issues = [].concat(self.issues)), self.definition_.__proto__ = FObject
    },
    create: function (args, opt_X) {
        return "Model" === this.name ? FObject.create.call(this.getPrototype(), args, opt_X) : this.getPrototype().create(args, opt_X)
    },
    isSubModel: function (model) {
        if (!model || !model.getPrototype)return !1
        var subModels_ = this.subModels_ || (this.subModels_ = {})
        return subModels_.hasOwnProperty(model.id) || (subModels_[model.id] = model.getPrototype() === this.getPrototype() || this.isSubModel(model.getPrototype().__proto__.model_)), subModels_[model.id]
    },
    getRuntimeProperties: function () {
        return this.instance_.properties_ || this.getPrototype(), this.instance_.properties_
    },
    getRuntimeActions: function () {
        return this.instance_.actions_ || this.getPrototype(), this.instance_.actions_
    },
    getRuntimeRelationships: function () {
        return this.instance_.relationships_ || this.getPrototype(), this.instance_.relationships_
    },
    getProperty: function (name) {
        if (!this.propertyMap_) {
            for (var m = this.propertyMap_ = {}, properties = this.getRuntimeProperties(), i = 0; i < properties.length; i++) {
                var prop = properties[i]
                m[prop.name] = prop
            }
            this.propertyMap_ = m
        }
        return this.propertyMap_[name]
    },
    getAction: function (name) {
        for (var i = 0; i < this.instance_.actions_.length; i++)if (this.instance_.actions_[i].name === name)return this.instance_.actions_[i]
    },
    hashCode: function () {
        var string = "", properties = this.getRuntimeProperties()
        for (var key in properties)string += properties[key].toString()
        return string.hashCode()
    },
    isInstance: function (obj) {
        return obj && obj.model_ && this.isSubModel(obj.model_)
    },
    toString: function () {
        return "BootstrapModel(" + this.name + ")"
    },
    arequire: function () {
        if (this.required__)return this.required__
        var future = afuture()
        this.required__ = future.get
        var go = function () {
            var args = [], model = this, i
            if (this.extends && args.push(this.X.arequire(this.extends)), this.models)for (i = 0; i < this.models.length; i++)args.push(this.models[i].arequire())
            if (this.traits)for (i = 0; i < this.traits.length; i++)args.push(this.X.arequire(this.traits[i]))
            if (this.templates)for (i = 0; i < this.templates.length; i++) {
                var t = this.templates[i]
                args.push(aif(!t.code, aseq(aevalTemplate(this.templates[i], this), function (t) {
                    return function (ret, m) {
                        t.code = m, ret()
                    }
                }(t))))
            }
            if (args.length && (args = [aseq.apply(null, args)]), this.requires)for (var i = 0; i < this.requires.length; i++) {
                var r = this.requires[i], m = r.split(" as ")
                m[0] == this.id ? console.warn("Model requires itself: " + this.id) : args.push(this.X.arequire(m[0]))
            }
            args.push(function (ret) {
                this.X.i18nModel ? this.X.i18nModel(ret, this, this.X) : ret()
            }.bind(this)), aseq.apply(null, args)(function () {
                this.finished__ = !0, future.set(this)
            }.bind(this))
        }.bind(this)
        return this.extra__ ? this.extra__(go) : go(), this.required__
    },
    getMyFeature: function (featureName) {
        function add(a) {
            if (a)for (var i = 0; i < a.length; i++) {
                var f = a[i]
                map[f.name.toUpperCase()] = f
            }
        }

        if (!Object.prototype.hasOwnProperty.call(this, "featureMap_")) {
            var map = this.featureMap_ = {}
            add(this.getRuntimeProperties()), add(this.instance_.actions_), add(this.methods), add(this.listeners), add(this.templates), add(this.models), add(this.tests), add(this.relationships), add(this.issues)
        }
        return this.featureMap_[featureName.toUpperCase()]
    },
    getRawFeature: function (featureName) {
        function add(a) {
            if (a)for (var i = 0; i < a.length; i++) {
                var f = a[i]
                map[f.name.toUpperCase()] = f
            }
        }

        if (!Object.prototype.hasOwnProperty.call(this, "rawFeatureMap_")) {
            var map = this.featureMap_ = {}
            add(this.properties), add(this.actions), add(this.methods), add(this.listeners), add(this.templates), add(this.models), add(this.tests), add(this.relationships), add(this.issues)
        }
        return this.featureMap_[featureName.toUpperCase()]
    },
    getAllMyRawFeatures: function () {
        var featureList = [], arrayOrEmpty = function (arr) {
            return arr && Array.isArray(arr) ? arr : []
        }
        return [arrayOrEmpty(this.properties), arrayOrEmpty(this.actions), arrayOrEmpty(this.methods), arrayOrEmpty(this.listeners), arrayOrEmpty(this.templates), arrayOrEmpty(this.models), arrayOrEmpty(this.tests), arrayOrEmpty(this.relationships), arrayOrEmpty(this.issues)].map(function (list) {
            featureList = featureList.concat(list)
        }), featureList
    },
    getFeature: function (featureName) {
        var feature = this.getMyFeature(featureName)
        if (feature || !this.extends)return feature
        var ext = this.X.lookup(this.extends)
        return ext ? ext.getFeature(featureName) : void 0
    },
    getAllRawFeatures: function () {
        var featureList = this.getAllMyRawFeatures()
        if (this.extends) {
            var ext = this.X.lookup(this.extends)
            ext && ext.getAllFeatures().map(function (subFeat) {
                var subName = subFeat.name.toUpperCase()
                featureList.mapFind(function (myFeat) {
                    return myFeat && myFeat.name && myFeat.name.toUpperCase() === subName
                }) || featureList.push(subFeat)
            })
        }
        return featureList
    },
    atest: function () {
        for (var seq = [], allPassed = !0, i = 0; i < this.tests.length; i++)seq.push(function (test, model) {
            return function (ret) {
                test.atest(model)(function (passed) {
                    passed || (allPassed = !1), ret()
                })
            }
        }(this.tests[i], this))
        return seq.push(function (ret) {
            ret(allPassed)
        }), aseq.apply(null, seq)
    }
}, BinaryProtoGrammar, DocumentationBootstrap = {
    name: "documentation",
    type: "Documentation",
    labels: ["javascript"],
    help: "Documentation associated with this entity.",
    documentation: "The developer documentation for this $$DOC{ref:'.'}. Use a $$DOC{ref:'DocModelView'} to view documentation.",
    setter: function (nu) {
        _DOC_ && (this.instance_.documentation = nu)
    },
    getter: function () {
        if (!_DOC_)return ""
        var doc = this.instance_.documentation
        return !doc || "undefined" == typeof Documentation || !Documentation || doc.model_ && doc.model_.getPrototype && Documentation.isInstance(doc) || (doc.body ? this.instance_.documentation = Documentation.create(doc) : this.instance_.documentation = Documentation.create({body: doc})), this.instance_.documentation
    }
}, Model = {
    __proto__: BootstrapModel,
    instance_: {},
    name: "Model",
    plural: "Models",
    help: "Describes the attributes and properties of an entity.",
    documentation: {
        body: function () {
        }
    },
    tableProperties: ["package", "name", "label", "plural"],
    properties: [{name: "id", hidden: !0, transient: !0}, {
        name: "sourcePath",
        help: "Source location of this Model.",
        defaultValue: "",
        mode: "read-only",
        transient: !0
    }, {
        name: "abstract", defaultValue: !1, help: "If the java class is abstract.", documentation: function () {
        }
    }, {
        name: "package",
        help: "Package that this Model belongs to.",
        defaultValue: "",
        javaType: "String",
        postSet: function (_, p) {
            return this.id = p ? p + "." + this.name : this.name
        },
        documentation: function () {
        }
    }, {
        name: "name",
        type: "String",
        javaType: "String",
        postSet: function (_, n) {
            return this.id = this.package ? this.package + "." + n : n
        },
        required: !0,
        displayWidth: 30,
        displayHeight: 1,
        defaultValue: "",
        help: "The coding identifier for the entity.",
        documentation: function () {
        }
    }, {
        name: "label", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return labelize(this.name)
        }, help: "The display label for the entity.", documentation: function () {
        }
    }, {
        name: "javaClassName", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return (this.abstract ? "Abstract" : "") + this.name
        }, help: "The Java classname of this Model.", documentation: function () {
        }
    }, {
        name: "javaClassImports", type: "Array[String]", labels: ["java"], defaultValueFn: function () {
            return []
        }, help: "Imports to add at the top of the generated java class."
    }, {
        name: "swiftClassName", type: "String", labels: ["swift"], defaultValueFn: function () {
            return (this.abstract ? "Abstract" : "") + this.name
        }, help: "The Swift classname of this model."
    }, {
        name: "extends",
        label: "Extends",
        type: "String",
        displayWidth: 70,
        displayHeight: 1,
        defaultValue: "",
        help: "The parent model of this model.",
        documentation: function () {
        }
    }, {
        name: "extendsModel", hidden: !0, compareProperty: constantFn(0), getter: function () {
            return null
        }, setter: function (e) {
            console.warn("Deprecated use of 'extendsModel'. Use 'extends' instead."), e && (this.extends = e)
        }
    }, {
        name: "traits", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Traits to mix-into this Model.", documentation: function () {
        }
    }, {
        name: "plural", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return this.name + "s"
        }, help: "The plural form of this model's name.", documentation: function () {
        }
    }, {
        name: "version", defaultValue: 1, help: "Version number of model.", documentation: function () {
        }
    }, {
        name: "ids",
        label: "Key Properties",
        type: "Array[String]",
        view: "foam.ui.StringArrayView",
        defaultValueFn: function () {
            var id = this.getProperty("id")
            if (id)return ["id"]
            var props = this.getRuntimeProperties()
            return props.length ? [props[0].name] : []
        },
        help: "Properties which make up unique id.",
        documentation: function () {
        }
    }, {
        name: "requires", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Model imports.", documentation: function () {
        }
    }, {
        name: "imports", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Context imports.", documentation: function () {
        }
    }, {
        name: "exports", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Context exports.", documentation: function () {
        }
    }, {
        name: "implements", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Interfaces implemented by this Model.", documentation: function () {
        }
    }, {
        name: "swiftImplements", type: "Array[String]", labels: ["compiletime", "swift"], defaultValueFn: function () {
            return this.implements
        }, help: "Swift interfaces implemented by this Model."
    }, {
        name: "javaImplements", type: "Array[String]", labels: ["compiletime", "java"], defaultValueFn: function () {
            return this.implements
        }, help: "Java interfaces implemented by this Model."
    }, {
        name: "swiftClassImports",
        type: "Array[String]",
        labels: ["compiletime", "swift"],
        defaultValueFn: function () {
            return []
        },
        help: "Imports to add at the top of the generated swift class."
    }, {
        name: "swiftCode",
        type: "String",
        labels: ["compiletime", "swift"],
        defaultValue: "",
        help: "Swift code to drop in when generating the swift class for this model."
    }, {
        name: "javaCode",
        type: "String",
        labels: ["compiletime", "java"],
        defaultValue: "",
        help: "Java code to drop in when generating the java class for this model."
    }, {
        name: "onLoad",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A function which is called when a Model's prototype is built.",
        documentation: function () {
        }
    }, {
        name: "tableProperties",
        type: "Array[String]",
        view: "foam.ui.StringArrayView",
        displayWidth: 70,
        lazyFactory: function () {
            return (this.properties || this.properties_).filter(function (o) {
                return !o.hidden
            }).map(function (o) {
                return o.name
            })
        },
        help: "Properties to be displayed in table view. Defaults to all properties.",
        documentation: function () {
        }
    }, {
        name: "searchProperties",
        type: "Array[String]",
        view: "foam.ui.StringArrayView",
        displayWidth: 70,
        defaultValueFn: function () {
            return this.tableProperties
        },
        help: "Properties display in a search view. Defaults to table properties.",
        documentation: function () {
        }
    }, {
        name: "properties",
        type: "Array[Property]",
        subType: "Property",
        javaType: "java.util.List<foam.core.Property>",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        help: "Properties associated with the entity.",
        preSet: function (oldValue, newValue) {
            for (var i = 0; i < newValue.length; i++) {
                var p = newValue[i]
                "string" == typeof p ? newValue[i] = p = {name: p} : Array.isArray(p) && (newValue[i] = p = {
                    name: p[0],
                    defaultValue: p[1]
                }), !p.labels || FEATURE_ENABLED(p.labels) ? (p.model_ ? "string" == typeof p.model_ && (p = newValue[i] = JSONUtil.mapToObj(this.X, p)) : p.type && this.X.lookup(p.type + "Property") ? (p.model_ = p.type + "Property", p.type = void 0, p = newValue[i] = JSONUtil.mapToObj(this.X, p)) : p = newValue[i] = Property.create(p), this[constantize(p.name)] = newValue[i]) : (newValue.splice(i, 1), i--)
            }
            return this.propertyMap_ = null, newValue
        },
        postSet: function (_, newValue) {
            for (var i = 0; i < newValue.length; i++)newValue[i].modelId = this.id
        },
        documentation: function () {
        }
    }, {
        name: "actions", type: "Array[Action]", subType: "Action", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, help: "Actions associated with the entity.", adapt: function (_, a) {
            if (!Action)return a
            for (var i = 0; i < a.length; i++) {
                var p = a[i]
                "function" == typeof p ? a[i] = Action.create({
                    name: p.name,
                    code: p
                }) : p.model_ ? "string" == typeof p.model_ && (a[i] = FOAM(p)) : a[i] = Action.create(p), p.name && !this[constantize(p.name)] && (this[constantize(p.name)] = a[i])
            }
            return a
        }, documentation: function () {
        }
    }, {
        name: "constants",
        type: "Array[Constant]",
        subType: "Constant",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        help: "Constants associated with the entity.",
        preSet: function (_, newValue) {
            if (!Constant)return newValue
            if (Array.isArray(newValue))return JSONUtil.arrayToObjArray(this.X, newValue, Constant)
            var constants = []
            for (var key in newValue) {
                var oldValue = newValue[key], constant = Constant.create({name: key, value: oldValue})
                constants.push(constant)
            }
            return constants
        }
    }, {
        name: "messages", type: "Array[Message]", subType: "Constant", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, help: "Messages associated with the entity.", preSet: function (_, ms) {
            if (!GLOBAL.Message)return ms
            if (Array.isArray(ms))return JSONUtil.arrayToObjArray(this.X, ms, Message)
            var messages = []
            for (var key in ms) {
                var oldValue = ms[key], message = Message.create({name: key, value: oldValue})
                messages.push(message)
            }
            return messages
        }
    }, {
        name: "methods", subType: "Method", factory: function () {
            return []
        }, help: "Methods associated with the entity.", adapt: function (_, a) {
            if (!Method)return a
            if (Array.isArray(a)) {
                for (var i = 0; i < a.length; i++)a[i] = "function" == typeof a[i] ? this.createMethod_(this.X, a[i].name, a[i]) : JSONUtil.mapToObj(this.X, a[i], Method, seq)
                return a
            }
            var methods = []
            for (var key in a)methods.push(this.createMethod_(this.X, key, a[key]))
            return methods
        }, documentation: function () {
        }
    }, {
        name: "listeners", type: "Array[Method]", subType: "Method", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, adapt: function (_, a) {
            if (!Method)return a
            if (Array.isArray(a)) {
                for (var i = 0; i < a.length; i++)a[i] = "function" == typeof a[i] ? this.createMethod_(this.X, a[i].name, a[i]) : JSONUtil.mapToObj(this.X, a[i], Method, seq)
                return a
            }
            console.error("Expecting array of listeners.")
        }, help: "Event listeners associated with the entity.", documentation: function () {
        }
    }, {
        name: "templates",
        type: "Array[Template]",
        subType: "Template",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        preSet: function (_, templates) {
            for (var i = 0; i < templates.length; i++)!templates[i].labels || FEATURE_ENABLED(templates[i].labels) || (templates.splice(i, 1), i--)
            return templates
        },
        postSet: function (_, templates) {
            TemplateUtil.expandModelTemplates(this)
        },
        help: "Templates associated with this entity.",
        documentation: function () {
        }
    }, {
        name: "models", type: "Array[Model]", subType: "Model", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, adapt: function (_, newValue) {
            if (!Model)return newValue
            if (!Array.isArray(newValue))return newValue
            var id = this.id
            return JSONUtil.arrayToObjArray(this.X, newValue, Model).map(function (m) {
                return m.package = id, m
            })
        }, postSet: function (_, models) {
            for (var i = 0; i < models.length; i++)this[models[i].name] = models[i]
        }, help: "Sub-models embedded within this model.", documentation: function () {
        }
    }, {
        name: "tests",
        label: "Unit Tests",
        type: "Array[Unit Test]",
        subType: "UnitTest",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        adapt: function (_, a) {
            if (!a)return a
            for (var i = 0; i < a.length; i++)"function" == typeof a[i] && (a[i] = UnitTest.create({
                name: a[i].name,
                code: a[i]
            }))
            return a
        },
        help: "Unit tests associated with this model.",
        documentation: function () {
        }
    }, {
        name: "relationships", subType: "Relationship", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, help: "Relationships of this model to other models.", preSet: function (_, newValue) {
            if (!Relationship)return newValue
            for (var i = 0; i < newValue.length; i++) {
                var p = newValue[i]
                p.model_ ? "string" == typeof p.model_ && (p = newValue[i] = FOAM(p)) : p = newValue[i] = Relationship.create(p), this[constantize(p.name)] = newValue[i]
            }
            return newValue
        }, documentation: function () {
        }
    }, {
        name: "issues",
        type: "Array[Issue]",
        subType: "Issue",
        labels: ["debug"],
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        help: "Issues associated with this model.",
        documentation: function () {
        }
    }, {
        name: "help",
        label: "Help Text",
        type: "String",
        displayWidth: 70,
        displayHeight: 6,
        view: "foam.ui.TextAreaView",
        defaultValue: "",
        help: "Help text associated with the entity.",
        documentation: function () {
        }
    }, {name: "i18nComplete_", defaultValue: !1, hidden: !0, transient: !0}, {
        name: "translationHint",
        label: "Description for Translation",
        type: "String",
        defaultValueFn: function () {
            return this.name
        }
    }, DocumentationBootstrap, {
        name: "notes",
        type: "String",
        displayWidth: 70,
        displayHeight: 6,
        view: "foam.ui.TextAreaView",
        defaultValue: "",
        help: "Internal documentation associated with this entity.",
        documentation: function () {
        }
    }],
    templates: [],
    toString: function () {
        return "Model"
    }
}
GLOBAL.Property = {
    __proto__: BootstrapModel,
    instance_: {},
    name: "Property",
    swiftImplements: ["ExprProtocol"],
    javaImplements: ["foam.core2.ExprInterface"],
    plural: "Properties",
    help: "Describes a properties of a modelled entity.",
    ids: ["name"],
    tableProperties: ["name", "label", "type", "required", "defaultValue"],
    documentation: function () {
    },
    properties: [{
        name: "name",
        swiftType: "String",
        javaType: "String",
        required: !0,
        displayWidth: 30,
        displayHeight: 1,
        defaultValue: "",
        mode: "read-only",
        help: "The coding identifier for the property.",
        documentation: function () {
        }
    }, {name: "labels", type: "Array", subType: "String", labels: ["debug", "javascript"]}, {
        name: "label",
        swiftType: "String",
        javaType: "String",
        required: !1,
        displayWidth: 70,
        displayHeight: 1,
        defaultValueFn: function () {
            return labelize(this.name)
        },
        help: "The display label for the property.",
        documentation: function () {
        }
    }, {
        name: "translationHint",
        type: "String",
        required: !1,
        documentation: "Used to describe the property for translators."
    }, {
        name: "speechLabel",
        type: "String",
        swiftType: "String",
        required: !1,
        displayWidth: 70,
        displayHeight: 1,
        defaultValueFn: function () {
            return this.label
        },
        help: "The speech label for the property.",
        documentation: function () {
        }
    }, {
        name: "speechLabelTranslationHint",
        type: "String",
        required: !1,
        documentation: "Used to describe the speech label for translators.",
        defaultValueFn: function () {
            return this.translationHint
        }
    }, {
        name: "tableLabel", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return this.label
        }, help: "The table display label for the entity.", documentation: function () {
        }
    }, {
        name: "type",
        type: "String",
        required: !0,
        view: {
            factory_: "foam.ui.ChoiceView",
            choices: ["Array", "Boolean", "Color", "Date", "DateTime", "Email", "Enum", "Float", "Function", "Image", "Int", "Object", "Password", "String", "String[]", "URL"]
        },
        defaultValue: "String",
        help: "The type of the property.",
        documentation: function () {
        }
    }, {
        name: "swiftDefaultValue", labels: ["swift", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "swiftDefaultValueFn", labels: ["swift", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "javaDefaultValue", labels: ["java", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "javaDefaultValueFn", labels: ["java", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "protobufType",
        type: "String",
        required: !1,
        help: "The protobuf type that represents the type of this property.",
        defaultValueFn: function () {
            return this.type.toLowerCase()
        },
        documentation: function () {
        }
    }, {
        name: "javaType",
        type: "String",
        labels: ["compiletime", "java"],
        required: !1,
        defaultValue: "Object",
        help: "The java type that represents the type of this property.",
        documentation: function () {
        }
    }, {
        name: "javascriptType",
        type: "String",
        labels: ["compiletime", "javascript"],
        required: !1,
        defaultValueFn: function () {
            return this.type
        },
        help: "The javascript type that represents the type of this property.",
        documentation: function () {
        }
    }, {
        name: "swiftType",
        type: "String",
        required: !1,
        labels: ["compiletime", "swift"],
        defaultValue: "AnyObject?",
        help: "The Swift type that represents this type of property."
    }, {
        name: "swiftNSCoderEncode",
        type: "String",
        required: !1,
        labels: ["compiletime", "swift"],
        defaultValue: "// <%= this.name %> is unsupported for coding."
    }, {
        name: "swiftNSCoderDecode",
        type: "String",
        required: !1,
        labels: ["compiletime", "swift"],
        defaultValue: "// <%= this.name %> is unsupported for coding."
    }, {
        name: "shortName",
        type: "String",
        required: !0,
        displayWidth: 10,
        displayHeight: 1,
        defaultValue: "",
        help: "A short alternate name to be used for compact encoding.",
        documentation: "A short alternate $$DOC{ref:'.name'} to be used for compact encoding."
    }, {name: "singular", type: "String", required: !1, displayWidth: 70}, {
        name: "aliases",
        labels: ["javascript"],
        view: "foam.ui.StringArrayView",
        factory: function () {
            return []
        },
        help: "Alternate names for this property.",
        documentation: function () {
        }
    }, {
        name: "mode",
        type: "String",
        defaultValue: "read-write",
        view: {factory_: "foam.ui.ChoiceView", choices: ["read-only", "read-write", "final"]},
        documentation: function () {
        }
    }, {
        name: "subType",
        label: "Sub-Type",
        type: "String",
        displayWidth: 30,
        help: "The type of the property.",
        documentation: function () {
        }
    }, {
        name: "subKey",
        labels: ["javascript"],
        displayWidth: 20,
        defaultValue: "ID",
        help: "The foreign key that this property references.",
        documentation: function () {
        }
    }, {
        name: "units",
        type: "String",
        required: !0,
        displayWidth: 70,
        displayHeight: 1,
        defaultValue: "",
        help: "The units of the property.",
        documentation: function () {
        }
    }, {
        name: "required",
        type: "Boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !0,
        help: "Indicates if the property is a required field.",
        documentation: function () {
        }
    }, {
        name: "visibility", choices: ["rw", "final", "ro", "hidden"], postSet: function (_, v) {
            "hidden" === v && (this.hidden = !0)
        }
    }, {
        name: "hidden",
        type: "Boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !1,
        postSet: function (old, hidden) {
            !old && hidden && (this.visibility = "hidden")
        },
        help: "Indicates if the property is hidden.",
        documentation: function () {
        }
    }, {
        name: "transient",
        type: "Boolean",
        swiftType: "Bool",
        javaType: "boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !1,
        help: "Indicates if the property is transient.",
        documentation: function () {
        }
    }, {
        name: "modelId",
        type: "String",
        view: "foam.ui.TextFieldView",
        help: "Id of the model that this is a property of",
        transient: !0
    }, {
        name: "displayWidth",
        type: "Int",
        displayWidth: 8,
        displayHeight: 1,
        defaultValue: 30,
        help: "The display width of the property.",
        documentation: function () {
        }
    }, {
        name: "displayHeight",
        type: "Int",
        displayWidth: 8,
        displayHeight: 1,
        defaultValue: 1,
        help: "The display height of the property.",
        documentation: function () {
        }
    }, {
        name: "view",
        labels: ["javascript"],
        defaultValue: "foam.ui.TextFieldView",
        help: "View component for the property.",
        documentation: function () {
        }
    }, {
        name: "toPropertyE", labels: ["javascript"], defaultValue: function toPropertyE(X) {
            var e = this.displayHeight > 1 ? X.lookup("foam.u2.MultiLineTextField").create(null, X) : X.lookup("foam.u2.TextField").create(null, X)
            return e.attrs({size: this.displayWidth}), e
        }, adapt: function (_, nu) {
            if ("string" == typeof nu) {
                var f = function (X) {
                    return X.lookup(nu).create(null, X)
                }
                return f.toString = function () {
                    return "'" + nu + "'"
                }, f
            }
            return nu
        }
    }, {
        name: "detailView", labels: ["javascript"], defaultValueFn: function () {
            return this.view
        }, help: "View component for the property when rendering within a DetailView.", documentation: function () {
        }
    }, {
        name: "citationView", labels: ["javascript"], defaultValueFn: function () {
            return this.view
        }, help: "View component for the property when rendering within a CitationView.", documentation: function () {
        }
    }, {
        name: "swiftView",
        type: "String",
        labels: ["compiletime", "swift"],
        help: "The default view name for this property in swift."
    }, {
        name: "detailViewPreRow", labels: ["javascript"], defaultValue: function () {
            return ""
        }, help: "Inject HTML before row in DetailView.", documentation: function () {
        }
    }, {
        name: "detailViewPostRow", labels: ["javascript"], defaultValue: function () {
            return ""
        }, help: "Inject HTML before row in DetailView.", documentation: function () {
        }
    }, {
        name: "defaultValue",
        type: "String",
        required: !1,
        labels: ["javascript"],
        displayWidth: 70,
        displayHeight: 1,
        defaultValue: "",
        postSet: function (old, nu) {
            nu && this.defaultValueFn && (this.defaultValueFn = void 0)
        },
        help: "The property's default value.",
        documentation: function () {
        }
    }, {
        name: "defaultValueFn",
        label: "Default Value Function",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        postSet: function (old, nu) {
            nu && this.defaultValue && (this.defaultValue = void 0)
        },
        help: "The property's default value function.",
        documentation: function () {
        }
    }, {
        name: "dynamicValue",
        label: "Value's Dynamic Function",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A dynamic function which computes the property's value.",
        documentation: function () {
        }
    }, {
        name: "factory",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Factory for creating initial value when new object instantiated.",
        documentation: function () {
        }
    }, {
        name: "lazyFactory",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        view: "foam.ui.FunctionView",
        help: "Factory for creating the initial value. Only called when the property is accessed for the first time.",
        documentation: function () {
        }
    }, {name: "regex", labels: ["javascript"]}, {
        name: "validate",
        type: "Function",
        swiftType: "FoamFunction?",
        javaType: "FoamFunction<String>",
        required: !1,
        view: "foam.ui.FunctionView",
        help: "Function for validating property value.",
        preSet: function (_, f) {
            if (!f.dependencies) {
                var str = f.toString(), deps = str.match(/^function[ _$\w]*\(([ ,\w]*)/)[1]
                deps = deps ? deps.split(",").map(function (name) {
                    return name.trim()
                }) : []
                var f2 = function () {
                    for (var args = [], i = 0; i < deps.length; i++)args.push(this[deps[i]])
                    return f.apply(this, args)
                }
                return f2.dependencies = deps, f2.toString = function () {
                    return f.toString()
                }, f2
            }
            return f
        },
        compareProperty: function (o1, o2) {
            return o1.toString() !== o2.toString()
        },
        documentation: function () {
        }
    }, {name: "swiftValidate", labels: ["swift", "compiletime"]}, {
        name: "javaValidate",
        labels: ["java", "compiletime"]
    }, {
        name: "javaAdapt", type: "String", labels: ["compiletime", "java"], defaultValue: function () {
        }
    }, {
        name: "javaPreSet", type: "String", labels: ["compiletime", "java"], defaultValue: function () {
        }
    }, {
        name: "javaPostSet",
        type: "String",
        labels: ["compiletime", "java"],
        defaultValue: "//javaPostSet goes here."
    }, {name: "javaGetter", type: "String", labels: ["compiletime", "java"]}, {
        name: "javaFactory",
        type: "String",
        labels: ["compiletime", "java"],
        adapt: function (_, n) {
            return "function" == typeof n ? multiline(n) : n
        }
    }, {
        name: "javaLazyFactory", type: "String", labels: ["compiletime", "java"], adapt: function (_, n) {
            return "function" == typeof n ? multiline(n) : n
        }
    }, {
        name: "swiftAdapt", type: "String", labels: ["compiletime", "swift"], defaultValue: function () {
        }
    }, {
        name: "swiftPreSet",
        type: "String",
        labels: ["compiletime", "swift"],
        defaultValue: "return newValue"
    }, {
        name: "swiftPostSet",
        type: "String",
        labels: ["compiletime", "swift"],
        defaultValue: "//swiftPostSet goes here."
    }, {name: "swiftGetter", type: "String", labels: ["compiletime", "swift"]}, {
        name: "swiftFactory",
        type: "String",
        labels: ["compiletime", "swift"]
    }, {name: "swiftLazyFactory", type: "String", labels: ["compiletime", "swift"]}, {
        name: "getter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "The property's default value function.",
        documentation: function () {
        }
    }, {
        name: "adapt",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "An adapter function called before preSet.",
        documentation: function () {
        }
    }, {
        name: "preSet",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "An adapter function called before normal setter logic.",
        documentation: function () {
        }
    }, {
        name: "postSet",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A function called after normal setter logic, but before property change event fired.",
        documentation: function () {
        }
    }, {
        name: "setter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "The property's default value function.",
        documentation: function () {
        }
    }, {
        name: "tableFormatter",
        label: "Table Cell Formatter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Function to format value for display in TableView.",
        documentation: "A function to format the value for display in a $$DOC{ref:'foam.ui.TableView'}."
    }, {
        name: "summaryFormatter",
        label: "Summary Formatter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Function to format value for display in SummaryView.",
        documentation: "A function to format the value for display in a $$DOC{ref:'SummaryView'}."
    }, {
        name: "tableWidth",
        type: "String",
        required: !1,
        defaultValue: "",
        help: "Table View Column Width.",
        documentation: "A Suggestion for $$DOC{ref:'foam.ui.TableView'} column width."
    }, {
        name: "help",
        label: "Help Text",
        type: "String",
        swiftType: "String",
        swiftDefaultValue: '""',
        required: !1,
        displayWidth: 70,
        displayHeight: 6,
        view: "foam.ui.TextAreaView",
        defaultValue: "",
        help: "Help text associated with the property.",
        documentation: function () {
        }
    }, {
        name: "helpTranslationHint",
        type: "String",
        help: "The translation hint for the help property."
    }, DocumentationBootstrap, {
        name: "prototag",
        label: "Protobuf tag",
        type: "Int",
        defaultValue: 0,
        required: !1,
        help: "The protobuf tag number for this field.",
        documentation: "The protobuf tag number for this field."
    }, {
        name: "actionFactory",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Factory to create the action objects for taking this property from value A to value B",
        documentation: "Factory to create the $$DOC{ref:'Action'} objects for taking this $$DOC{ref:'Property'} from value A to value B"
    }, {
        name: "compareProperty",
        type: "Function",
        swiftType: "FoamFunction",
        javaType: "FoamFunction<Integer>",
        view: "foam.ui.FunctionView",
        displayWidth: 70,
        displayHeight: 5,
        defaultValue: function (o1, o2) {
            return o1 === o2 ? 0 : o1 || o2 ? o1 ? o2 ? o1.localeCompare ? o1.localeCompare(o2) : o1.compareTo ? o1.compareTo(o2) : o1.$UID.compareTo(o2.$UID) : 1 : -1 : 0
        },
        swiftDefaultValue: function () {
        },
        javaDefaultValue: function () {
        },
        help: "Comparator function.",
        documentation: "A comparator function two compare two instances of this $$DOC{ref:'Property'}."
    }, {
        name: "fromString", labels: ["javascript"], defaultValue: function (s) {
            return s
        }, help: "Function to extract value from a String."
    }, {
        name: "fromElement",
        labels: ["javascript"],
        defaultValue: function propertyFromElement(e, p) {
            if (!p.subType || !this.X.lookup || "String" === p.subType)return this[p.name] = p.fromString(e.innerHTML), void 0
            var model = this.X.lookup(p.subType)
            if (!model)return this[p.name] = p.fromString(e.innerHTML), void 0
            var o = model.create()
            return o.fromElement ? (this[p.name] = o.fromElement(e), void 0) : (this[p.name] = p.fromString(e.innerHTML), void 0)
        },
        help: "Function to extract from a DOM Element.",
        documentation: "Function to extract a value from a DOM Element."
    }, {
        name: "propertyToJSON",
        labels: ["javascript"],
        defaultValue: function (visitor, output, o) {
            this.transient || (output[this.name] = visitor.visit(o[this.name]))
        },
        help: "Function to extract from a DOM Element.",
        documentation: "Function to extract a value from a DOM Element."
    }, {
        name: "autocompleter",
        subType: "Autocompleter",
        labels: ["javascript"],
        help: "Name or model for the autocompleter for this property.",
        documentation: function () {
        }
    }, {
        name: "install",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A function which installs additional features into the Model's prototype.",
        documentation: function () {
        }
    }, {
        name: "exclusive",
        type: "Boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !0,
        help: "Indicates if the property can only have a single value.",
        documentation: function () {
        }
    }, {
        name: "memorable",
        type: "Boolean",
        help: "True if this value should be included in a memento for this object.",
        defaultValue: !1
    }, {
        name: "attribute",
        type: "Boolean",
        help: "True if this property is settable as an element attribute.",
        defaultValue: !1
    }, {
        name: "javaJsonParser", labels: ["java"], javaType: "foam.lib.parse.Parser", javaFactory: function () {
        }
    }, {
        name: "javaOutputJson", javaType: "FoamFunction<Void>", labels: ["java"], javaFactory: function () {
        }
    }],
    methods: [function partialEval() {
        return this
    }, {
        name: "f",
        code: function (obj) {
            return obj[this.name]
        },
        args: [{name: "obj", swiftType: "AnyObject?", javaType: "Object"}],
        swiftReturnType: "AnyObject?",
        javaReturnType: "Object",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "compare",
        code: function (o1, o2) {
            return this.compareProperty(this.f(o1), this.f(o2))
        },
        args: [{name: "o1", swiftType: "AnyObject?", javaType: "Object"}, {
            name: "o2",
            swiftType: "AnyObject?",
            javaType: "Object"
        }],
        returnType: "Int",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, function readResolve() {
        return this.modelId ? this.X.lookup(this.modelId)[constantize(this.name)] : this
    }, function toSQL() {
        return this.name
    }, function toMQL() {
        return this.name
    }, function toBQL() {
        return this.name
    }, function cloneProperty(value, cloneArgs) {
        cloneArgs[this.name] = value && value.clone ? value.clone() : value
    }, function deepCloneProperty(value, cloneArgs) {
        cloneArgs[this.name] = value && value.deepClone ? value.deepClone() : value
    }, function exprClone() {
        return this
    }, function dot(nextProp) {
        var PropertySequence = this.X.lookup("foam.mlang.PropertySequence")
        return PropertySequence ? PropertySequence.isInstance(this) ? (this.next_ ? this.next_ = this.next_.dot(nextProp) : this.next_ = nextProp, this) : PropertySequence.xbind({next_: nextProp}).create(this, this.Y) : (console.warn("Missing foam.mlang.PropertySequence for Property.dot()"), this)
    }, function initPropertyAgents(proto, fastInit) {
        var prop = this, name = prop.name, name$_ = prop.name$_
        if (fastInit || proto.addInitAgent(this.postSet || this.setter ? 9 : 0, name + ": " + (this.postSet || this.setter ? "copy arg (postSet)" : "copy arg"), function (o, X, m) {
                m && (m.hasOwnProperty(name) && (o[name] = m[name]), m.hasOwnProperty(name$_) && (o[name$_] = m[name$_]))
            }), this.dynamicValue) {
            var dynamicValue = prop.dynamicValue
            Array.isArray(dynamicValue) ? proto.addInitAgent(10, name + ": dynamicValue", function (o, X) {
                Events.dynamicFn(dynamicValue[0].bind(o), function () {
                    o[name] = dynamicValue[1].call(o)
                }, X || this.X)
            }) : proto.addInitAgent(10, name + ": dynamicValue", function (o, X) {
                Events.dynamicFn(dynamicValue.bind(o), function (value) {
                    o[name] = value
                }, X || this.X)
            })
        }
        this.factory && proto.addInitAgent(11, name + ": factory", function (o, X) {
            o.hasOwnProperty(name) || o[name]
        })
    }, function toE(opt_X) {
        var X = opt_X || this.X
        return X.lookup("foam.u2.PropertyView").create({prop: this, view: this.toPropertyE(X)}, X)
    }],
    toString: function () {
        return "Property"
    }
}, Model.methods = {}, "createMethod_ getProperty getAction hashCode buildPrototype addTraitToModel_ buildProtoImports_ buildProtoProperties_ buildProtoMethods_ getPrototype isSubModel isInstance getAllRequires arequire getMyFeature getRawFeature getAllMyRawFeatures getFeature getAllRawFeatures atest getRuntimeProperties getRuntimeActions create".split(" ").forEach(function (k) {
    Model.methods[k] = BootstrapModel[k]
}), Model = Model.create(Model), Model.model_ = Model, Model.create = BootstrapModel.create, Property = Model.create(Property)
for (var ps = Property.getRuntimeProperties(), i = 0; i < ps.length; i++)Property[constantize(ps[i].name)] = ps[i] = Property.create(ps[i])
if (USED_MODELS.Property = !0, USED_MODELS.Model = !0, CLASS({
        name: "Message",
        plural: "messages",
        tableProperties: ["name", "value", "translationHint"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the message.",
            documentation: function () {
            }
        }, {name: "value", help: "The message itself."}, {
            name: "labels",
            type: "StringArray",
            labels: ["debug", "javascript"]
        }, {
            name: "meaning", help: "Linguistic clarification to resolve ambiguity.", documentation: function () {
            }
        }, {
            name: "placeholders", help: "Placeholders to inject into the message.", documentation: function () {
            }, factory: function () {
                return []
            }
        }, {
            name: "replaceValues", documentation: function () {
            }, defaultValue: function (unused_selectors, args) {
                for (var phs = this.placeholders || [], value = this.value, i = 0; i < phs.length; ++i) {
                    var name = phs[i].name, replacement = args.hasOwnProperty(name) ? args[name] : phs[i].example
                    value = value.replace(new RegExp("[$]" + name + "[$]", "g"), replacement)
                }
                return value
            }
        }, {
            name: "translationHint",
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this message and the context in which it used.",
            documentation: function () {
            }
        }]
    }), CLASS({
        name: "StringProperty",
        extends: "Property",
        help: "Describes a properties of type String.",
        label: "Text",
        messages: [{
            name: "errorPatternMismatch",
            value: "The text does not match the pattern."
        }, {
            name: "errorBelowMinLength",
            value: "The text is too short. Minimum: $min$",
            placeholders: [{name: "min"}]
        }, {name: "errorAboveMaxLength", value: "The text is too long. Maximum: $max$", placeholders: [{name: "max"}]}],
        properties: [{
            name: "displayHeight",
            displayWidth: 8,
            defaultValue: 1,
            help: "The display height of the property."
        }, {
            name: "adapt", labels: ["javascript"], defaultValue: function (_, v) {
                return void 0 === v || null === v ? "" : "function" == typeof v ? multiline(v) : v.toString()
            }
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaType",
            displayWidth: 70,
            defaultValue: "String",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "String"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                var defaultValue = this.defaultValue || ""
                return '"' + defaultValue + '"'
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                var defaultValue = this.defaultValue || ""
                return '"' + defaultValue + '"'
            }
        }, {name: "view", labels: ["javascript"], defaultValue: "foam.ui.TextFieldView"}, {
            name: "swiftView",
            defaultValue: "FoamUITextField"
        }, {name: "pattern", help: "Regex pattern for property."}, {
            name: "minChars",
            label: "Minimum characters",
            help: "The minimum number of characters required.",
            adapt: function (old, nu) {
                return "" === nu ? "" : parseInt(nu)
            }
        }, {
            name: "maxChars",
            label: "Maximum characters",
            help: "The maximum number of characters allowed.",
            adapt: function (old, nu) {
                return "" === nu ? "" : parseInt(nu)
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}, {
            name: "validate", lazyFactory: function () {
                var prop = this, ret = constantFn(""), min = prop.minChars
                "" !== min && (ret = function (result) {
                    return result || (this[prop.name].length < min ? prop.ERROR_BELOW_MIN_LENGTH.replaceValues(null, {min: min}) : "")
                }.o(ret), ret.dependencies = [prop.name])
                var max = prop.maxChars
                "" !== max && (ret = function (result) {
                    return result || (this[prop.name].length > max ? prop.ERROR_ABOVE_MAX_LENGTH.replaceValues(null, {max: max}) : "")
                }.o(ret), ret.dependencies = [prop.name])
                var pattern = prop.pattern
                if (pattern) {
                    var testable = pattern.test ? pattern : new RegExp(pattern.toString(), "i"), errMsg = pattern.errorMessage ? pattern.errorMessage() : prop.errorPatternMismatch
                    ret = function (result) {
                        return result || (testable.test(this[prop.name]) ? "" : errMsg)
                    }.o(ret), ret.dependencies = [prop.name]
                }
                return ret
            }
        }]
    }), CLASS({
        name: "BooleanProperty",
        extends: "Property",
        help: "Describes a properties of type Boolean.",
        label: "True or false",
        properties: [{
            name: "swiftType",
            type: "String",
            displayWidth: 70,
            defaultValue: "Bool"
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeBool(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {
            name: "javaType",
            type: "String",
            displayWidth: 70,
            defaultValue: "boolean",
            help: "The Java type of this property."
        }, {name: "view", labels: ["javascript"], defaultValue: "foam.ui.BooleanView"}, {
            name: "swiftView",
            defaultValue: "FoamUISwitch"
        }, {
            name: "toPropertyE", labels: ["javascript"], defaultValue: function (X) {
                return X.lookup("foam.u2.tag.Checkbox").create(null, X)
            }
        }, ["defaultValue", !1], {
            name: "adapt", defaultValue: function (_, v) {
                return !!v
            }, labels: ["javascript"]
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}, {
            name: "fromString", labels: ["javascript"], defaultValue: function (s) {
                var txt = s.trim()
                return txt.equalsIC("y") || txt.equalsIC("yes") || txt.equalsIC("true") || txt.equalsIC("t")
            }, help: "Function to extract value from a String."
        }, {
            name: "fromMemento", labels: ["javascript"], defaultValue: function (mem) {
                return (!mem || "false" !== mem.toLowerCase() && "0" !== mem) && !!mem
            }
        }]
    }), CLASS({
        name: "DateProperty",
        extends: "Property",
        help: "Describes a properties of type Date.",
        label: "Date",
        properties: [["displayWidth", 50], {name: "swiftType", defaultValue: "Date?"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "javaType",
            defaultValue: "java.util.Date",
            help: "The Java type of this property."
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, ["view", "foam.ui.DateFieldView"], {
            name: "toPropertyE", labels: ["javascript"], defaultValue: function (X) {
                return X.lookup("foam.u2.DateView").create(null, X)
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}, {
            name: "adapt", defaultValue: function (_, d) {
                if ("number" == typeof d)return new Date(d)
                if ("string" == typeof d) {
                    var ret = new Date(d)
                    return "Invalid Date" === ret.toUTCString() ? new Date(+d) : ret
                }
                return d
            }
        }, ["tableFormatter", function (d) {
            return d ? d.toRelativeDateString() : ""
        }], ["compareProperty", function (o1, o2) {
            return o1 ? o2 ? o1.compareTo(o2) : 1 : o2 ? -1 : 0
        }]]
    }), CLASS({
        name: "DateTimeProperty",
        extends: "DateProperty",
        help: "Describes a properties of type DateTime.",
        label: "Date and time",
        properties: [["view", "foam.ui.DateTimeFieldView"], {
            name: "toPropertyE",
            labels: ["javascript"],
            defaultValue: function (X) {
                return X.lookup("foam.u2.md.DateTimeField").create(null, X)
            }
        }]
    }), CLASS({
        name: "NumericProperty_",
        extends: "Property",
        help: "Base model for a property of any numeric type.",
        messages: [{
            name: "errorBelowMinimum",
            value: "The value must be at least $min$.",
            placeholders: [{name: "min"}]
        }, {name: "errorAboveMaximum", value: "The value can be at most $max$.", placeholders: [{name: "max"}]}],
        properties: [{
            name: "minValue",
            label: "Minimum Value",
            required: !1,
            help: "The minimum value this property accepts.",
            defaultValue: "",
            adapt: function (old, nu) {
                return "" === nu ? "" : this.adapt(null, nu)
            }
        }, {
            name: "maxValue",
            label: "Maximum Value",
            required: !1,
            help: "The maximum value this property accepts.",
            defaultValue: "",
            adapt: function (old, nu) {
                return "" === nu ? "" : this.adapt(null, nu)
            }
        }, {
            name: "compareProperty", defaultValue: function (o1, o2) {
                return o1 === o2 ? 0 : o1 > o2 ? 1 : -1
            }, swiftDefaultValue: function () {
            }
        }, {
            name: "validate", lazyFactory: function () {
                var prop = this, ret = constantFn(""), min = prop.minValue
                "" !== min && (ret = function (result) {
                    return result || (this[prop.name] < min ? prop.ERROR_BELOW_MINIMUM.replaceValues(null, {min: min}) : "")
                }.o(ret), ret.dependencies = [prop.name])
                var max = prop.maxValue
                return "" !== max && (ret = function (result) {
                    return result || (this[prop.name] > max ? prop.ERROR_ABOVE_MAXIMUM.replaceValues(null, {max: max}) : "")
                }.o(ret), ret.dependencies = [prop.name]), ret
            }
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return "" + this.defaultValue
            }
        }]
    }), CLASS({
        name: "IntProperty",
        extends: "NumericProperty_",
        help: "Describes a properties of type Int.",
        label: "Round numbers",
        properties: [["displayWidth", 10], {
            name: "javaType",
            displayWidth: 10,
            defaultValue: "int",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "Int"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeInteger(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {name: "view", labels: ["javascript"], defaultValue: "foam.ui.IntFieldView"}, {
            name: "swiftView",
            defaultValue: "FoamIntUITextField"
        }, {
            name: "adapt", labels: ["javascript"], defaultValue: function (_, v) {
                return "number" == typeof v ? Math.round(v) : v ? parseInt(v) : 0
            }
        }, ["defaultValue", 0], {
            name: "prototag",
            label: "Protobuf tag",
            required: !1,
            help: "The protobuf tag number for this field."
        }]
    }), CLASS({
        name: "LongProperty",
        extends: "IntProperty",
        help: "Describes a properties of type Long.",
        label: "Round long numbers",
        properties: [{name: "displayWidth", labels: ["javascript"], defaultValue: 12}, {
            name: "javaType",
            labels: ["javascript"],
            defaultValue: "long"
        }, {name: "swiftType", labels: ["compiletime", "swift"], defaultValue: "NSNumber"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }]
    }), CLASS({
        name: "FloatProperty",
        extends: "NumericProperty_",
        help: "Describes a properties of type Float.",
        label: "Decimal numbers",
        properties: [{name: "defaultValue", defaultValue: 0}, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return "" + this.defaultValue
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                return "" + this.defaultValue
            }
        }, {
            name: "javaType",
            displayWidth: 10,
            defaultValue: "double",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "Float"}, {
            name: "swiftView",
            defaultValue: "FoamFloatUITextField"
        }, {name: "displayWidth", defaultValue: 15}, {
            name: "view",
            defaultValue: "foam.ui.FloatFieldView"
        }, {
            name: "adapt", defaultValue: function (_, v) {
                return "number" == typeof v ? v : v ? parseFloat(v) : 0
            }
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}]
    }), CLASS({
        name: "FunctionProperty",
        extends: "Property",
        help: "Describes a properties of type Function.",
        label: "Code that can be run",
        properties: [{
            name: "javaType",
            displayWidth: 10,
            defaultValue: "FoamFunction",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "FoamFunction"}, {
            name: "swiftDefaultValue",
            defaultValue: "FoamFunction(fn: { (_) -> AnyObject? in return nil })"
        }, {name: "displayWidth", defaultValue: 15}, {
            name: "view",
            defaultValue: "foam.ui.FunctionView"
        }, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.FunctionView").create(void 0, X)
            }
        }, {
            name: "defaultValue", defaultValue: function () {
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                var txt = e.innerHTML.trim()
                this[p.name] = txt
            }
        }, {
            name: "adapt", defaultValue: function (_, value) {
                if ("string" == typeof value) {
                    var parse = JSONParser.parseString(value, JSONParser["function prototype"])
                    if (parse) {
                        var body = value.substring(value.indexOf("{") + 1, value.lastIndexOf("}"))
                        return new Function(parse[3], body)
                    }
                    return new Function(value)
                }
                return value
            }
        }]
    }), CLASS({
        name: "TemplateProperty",
        extends: "FunctionProperty",
        properties: [{
            name: "adapt", defaultValue: function (_, value) {
                return TemplateUtil.expandTemplate(this, value)
            }
        }, {
            name: "defaultValue", adapt: function (_, value) {
                return TemplateProperty.ADAPT.defaultValue.call(this, _, value)
            }
        }, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.MultiLineTextField").create(void 0, X)
            }
        }, {
            name: "install", defaultValue: function (prop) {
                defineLazyProperty(this, prop.name + "$f", function () {
                    var f = TemplateUtil.lazyCompile(this[prop.name])
                    return {
                        get: function () {
                            return f
                        }, configurable: !0
                    }
                })
            }
        }]
    }), CLASS({
        name: "ArrayProperty",
        extends: "Property",
        javaClassImports: ["java.util.List"],
        help: "Describes a property of type Array.",
        label: "List of items",
        properties: [{
            name: "swiftType", defaultValueFn: function () {
                return "[" + this.swiftSubType + "]"
            }
        }, {
            name: "swiftSubType", labels: ["compiletime", "swift"], defaultValueFn: function () {
                var type = this.subType || "FObject"
                return type.split(".").pop()
            }
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {name: "swiftFactory", defaultValue: "return [] as AnyObject?"}, {
            name: "singular",
            displayWidth: 70,
            defaultValueFn: function () {
                return this.name.replace(/s$/, "")
            },
            help: "The plural form of this model's name.",
            documentation: function () {
            }
        }, {
            name: "subType",
            displayWidth: 20,
            defaultValue: "",
            help: "The FOAM sub-type of this property."
        }, {
            name: "protobufType", defaultValueFn: function () {
                return this.subType
            }
        }, {
            name: "adapt", defaultValue: function (_, a, prop) {
                var m = prop.subType_ || (prop.subType_ = this.X.lookup(prop.subType) || GLOBAL.lookup(prop.subType))
                if (m)for (var i = 0; i < a.length; i++)m.isInstance(a[i]) || (a[i] = a[i].model_ ? FOAM(a[i]) : m.create(a[i]))
                return a
            }
        }, {
            name: "postSet", defaultValue: function (oldA, a, prop) {
                var name = prop.nameArrayRelay_ || (prop.nameArrayRelay_ = prop.name + "ArrayRelay_"), l = this[name] || (this[name] = function () {
                        this.propertyChange(prop.name, null, this[prop.name])
                    }.bind(this))
                oldA && oldA.unlisten && oldA.unlisten(l), a && a.listen && a.listen(l)
            }
        }, {
            name: "javaSubType", labels: ["compiletime", "java"], defaultValueFn: function () {
                return this.subType || "FObject"
            }
        }, {
            name: "javaType", displayWidth: 10, defaultValueFn: function (p) {
                return "java.util.List<" + this.javaSubType + ">"
            }, help: "The Java type of this property."
        }, {
            name: "javaLazyFactory", defaultValueFn: function (p) {
                return "return new java.util.ArrayList<" + this.javaSubType + ">();"
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, {name: "view", defaultValue: "foam.ui.ArrayView"}, {
            name: "factory", defaultValue: function () {
                return []
            }
        }, {
            name: "propertyToJSON", defaultValue: function (visitor, output, o) {
                !this.transient && o[this.name].length && (output[this.name] = visitor.visitArray(o[this.name]))
            }
        }, {
            name: "install", defaultValue: function (prop) {
                defineLazyProperty(this, prop.name + "$Proxy", function () {
                    var proxy = this.X.lookup("foam.dao.ProxyDAO").create({delegate: this[prop.name].dao})
                    return this.addPropertyListener(prop.name, function (_, __, ___, a) {
                        proxy.delegate = a.dao
                    }), {
                        get: function () {
                            return proxy
                        }, configurable: !0
                    }
                }), this.addMethod("get" + capitalize(prop.singular), function (id) {
                    for (var i = 0; i < this[prop.name].length; i++)if (this[prop.name][i].id === id)return this[prop.name][i]
                })
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                for (var model = this.X.lookup(e.getAttribute("model") || p.subType), children = e.children, a = [], i = 0; i < children.length; i++) {
                    var o = model.create(null, this.Y)
                    o.fromElement(children[i], p), a.push(o)
                }
                this[p.name] = a
            }
        }, {
            name: "prototag",
            label: "Protobuf tag",
            required: !1,
            help: "The protobuf tag number for this field."
        }, {
            name: "compareProperty", swiftDefaultValue: function () {
            }, javaDefaultValue: function () {
            }
        }, {
            name: "javaJsonParser", javaFactory: function () {
            }
        }]
    }), CLASS({
        name: "BlobProperty",
        extends: "Property",
        help: "A chunk of binary data.",
        label: "Binary data",
        properties: [{
            name: "type",
            type: "String",
            defaultValue: "Blob",
            help: "The FOAM type of this property."
        }, {name: "javaType", type: "String", defaultValue: "byte[]", help: "The Java type for this property."}]
    }), CLASS({
        name: "ReferenceProperty",
        extends: "Property",
        help: "A foreign key reference to another Entity.",
        label: "Reference to another object",
        properties: [{
            name: "subType",
            displayWidth: 20,
            defaultValue: "",
            help: "The FOAM sub-type of this property."
        }, {
            name: "subKey",
            displayWidth: 20,
            defaultValue: "ID",
            help: "The foreign key that this property references."
        }, {
            name: "javaType", displayWidth: 10, defaultValueFn: function () {
                return this.X.lookup(this.subType)[this.subKey].javaType
            }, help: "The Java type of this property."
        }, {name: "view", defaultValue: "foam.ui.TextFieldView"}, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.ReferenceView").create(null, X)
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}]
    }), CLASS({
        name: "StringArrayProperty",
        extends: "Property",
        javaClassImports: ["java.util.List"],
        help: "An array of String values.",
        label: "List of text strings",
        properties: [{name: "swiftType", defaultValue: "[String]"}, {
            name: "swiftFactory",
            defaultValue: "return [] as AnyObject"
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {name: "javaLazyFactory", defaultValue: "return new java.util.ArrayList<String>();"}, {
            name: "javaAdapt",
            defaultValue: function () {
            }
        }, {
            name: "singular", displayWidth: 70, defaultValueFn: function () {
                return this.name.replace(/s$/, "")
            }, help: "The plural form of this model's name.", documentation: function () {
            }
        }, {
            name: "subType",
            displayWidth: 20,
            defaultValue: "String",
            help: "The FOAM sub-type of this property."
        }, {name: "displayWidth", defaultValue: 50}, {
            name: "adapt", defaultValue: function (_, v) {
                return Array.isArray(v) ? v : v || 0 === v ? [v] : []
            }
        }, {
            name: "factory", defaultValue: function () {
                return []
            }
        }, {
            name: "javaType",
            displayWidth: 10,
            defaultValue: "java.util.List<String>",
            help: "The Java type of this property."
        }, {name: "view", defaultValue: "foam.ui.StringArrayView"}, {
            name: "prototag",
            label: "Protobuf tag",
            required: !1,
            help: "The protobuf tag number for this field."
        }, {name: "exclusive", defaultValue: !1}, {
            name: "fromString", defaultValue: function (s) {
                return s.split(",")
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                for (var val = [], name = p.singular || "item", i = 0; i < e.children.length; i++)e.children[i].nodeName === name && val.push(e.children[i].innerHTML)
                this[p.name] = val
            }
        }, {
            name: "toMemento", defaultValue: function (o, p) {
                return o.map(function (x) {
                    return x.replace(/,/g, "&#44;")
                }).join(",")
            }
        }, {
            name: "fromMemento", defaultValue: function (s, p) {
                return s ? s.split(",").map(function (x) {
                    return x.replace(/&#44;/g, ",")
                }) : void 0
            }
        }, {
            name: "compareProperty", swiftDefaultValue: function () {
            }, javaDefaultValue: function () {
            }
        }, {
            name: "javaJsonParser", javaFactory: function () {
            }
        }]
    }), CLASS({
        name: "ModelProperty",
        extends: "Property",
        help: "Describes a Model property.",
        label: "Data Model definition",
        properties: [{
            name: "getter", labels: ["javascript"], defaultValue: function (name) {
                var value = this.instance_[name]
                if ("undefined" == typeof value) {
                    var prop = this.model_.getProperty(name)
                    value = prop ? prop.lazyFactory ? this.instance_[prop.name] = prop.lazyFactory.call(this, prop) : prop.factory ? this.instance_[prop.name] = prop.factory.call(this, prop) : prop.defaultValueFn ? prop.defaultValueFn.call(this, prop) : void 0 !== typeof prop.defaultValue ? prop.defaultValue : "" : ""
                }
                if ("string" == typeof value) {
                    if (!value)return ""
                    var ret = this.X.lookup(value)
                    return ret
                }
                return Model.isInstance(value) ? value : ""
            }
        }, {
            name: "propertyToJSON", labels: ["javascript"], defaultValue: function (visitor, output, o) {
                this.transient || (output[this.name] = o[this.name].id)
            }
        }]
    }), CLASS({
        name: "ViewProperty",
        extends: "Property",
        help: "Describes a View-Factory property.",
        properties: [{
            name: "adapt",
            doc: "Can be specified as either a function, a Model, a Model path, or a JSON object.",
            defaultValue: function (_, f) {
                return "function" == typeof f ? f : "string" == typeof f ? function (d, opt_X) {
                    return (opt_X || this.X).lookup(f).create(d, opt_X || this.Y)
                }.bind(this) : "function" == typeof f.create ? f.create.bind(f) : "string" == typeof f.model_ ? function (d, opt_X) {
                    return FOAM(f, opt_X || this.Y).copyFrom(d)
                } : (console.error("******* Unknown view factory: ", f), f)
            }
        }, {
            name: "defaultValue", adapt: function (_, f) {
                return ViewProperty.ADAPT.defaultValue.call(this, null, f)
            }
        }]
    }), CLASS({
        name: "FactoryProperty", extends: "Property", help: "Describes a Factory property.", properties: [{
            name: "preSet",
            doc: "Can be specified as either a function, a Model, a Model path, or a JSON object.",
            defaultValue: function (_, f) {
                return f ? "function" == typeof f ? f : "string" == typeof f ? function (map, opt_X) {
                    return (opt_X || this.X).lookup(f).create(map, opt_X || this.Y)
                }.bind(this) : Model.isInstance(f) ? f.create.bind(f) : f.factory_ ? function (map, opt_X) {
                    var X = opt_X || this.X, m = X.lookup(f.factory_)
                    return console.assert(m, "Unknown Factory Model: " + f.factory_), m.create(f, opt_X || this.Y)
                }.bind(this) : (console.error("******* Invalid Factory: ", f), f) : f
            }
        }]
    }), CLASS({
        name: "ViewFactoryProperty",
        extends: "FactoryProperty",
        help: "Describes a View Factory property.",
        properties: [{
            name: "defaultValue", preSet: function (_, f) {
                return ViewFactoryProperty.ADAPT.defaultValue.call(this, null, f)
            }
        }, {
            name: "defaultValueFn", preSet: function (_, f) {
                var fp = function (prop) {
                    return ViewFactoryProperty.ADAPT.defaultValue.call(this, null, f.call(this, prop))
                }
                return fp.toString = function () {
                    return f.toString()
                }, fp
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                this[p.name] = e.innerHTML_ || (e.innerHTML_ = e.innerHTML)
            }
        }, {
            name: "adapt",
            doc: "Can be specified as either a function, String markup, a Model, a Model path, or a JSON object.",
            defaultValue: function (_, f) {
                if (!f)return f
                if ("function" == typeof f)return f
                var ret
                if ("string" == typeof f) {
                    if (/[^0-9a-zA-Z$_.]/.exec(f)) {
                        var VIEW_CACHE = ViewFactoryProperty.VIEW_CACHE || (ViewFactoryProperty.VIEW_CACHE = {}), viewModel = VIEW_CACHE[f]
                        viewModel || (viewModel = VIEW_CACHE[f] = Model.create({
                            name: "InnerDetailView" + this.$UID,
                            extends: "foam.ui.DetailView",
                            templates: [{name: "toHTML", template: f}]
                        }), viewModel.arequire()), ret = function (args, X) {
                            return viewModel.create(args, X || this.Y)
                        }
                    } else ret = function (map, opt_X) {
                        var model = (opt_X || this.X).lookup(f)
                        return console.assert(!!model, "Unknown model: " + f + " in " + this.name + " property"), model.create(map, opt_X || this.Y)
                    }.bind(this)
                    return ret.toString = function () {
                        return '"' + f + '"'
                    }, ret
                }
                return Model.isInstance(f) ? function (args, opt_X) {
                    return f.create(args, opt_X || this.Y)
                }.bind(this) : f.factory_ ? (ret = function (map, opt_X) {
                    var m = (opt_X || this.X).lookup(f.factory_)
                    return console.assert(m, "Unknown ViewFactory Model: " + f.factory_), m.create(f, opt_X || this.Y).copyFrom(map)
                }, ret.toString = function () {
                    return JSONUtil.compact.stringify(f)
                }, ret) : this.X.lookup("foam.ui.BaseView").isInstance(f) ? constantFn(f) : (console.error("******* Invalid Factory: ", f), f)
            }
        }]
    }), CLASS({
        name: "ReferenceArrayProperty",
        extends: "ReferenceProperty",
        properties: [{
            name: "factory", defaultValue: function () {
                return []
            }
        }, {
            name: "javaType", defaultValueFn: function () {
                return this.X.lookup(this.subType).ID.javaType + "[]"
            }
        }, {name: "view", defaultValue: "foam.ui.StringArrayView"}]
    }), CLASS({
        name: "EMailProperty",
        extends: "StringProperty",
        label: "Email address",
        properties: [["pattern", "^.+@.+$"]]
    }), CLASS({
        name: "ImageProperty",
        extends: "StringProperty",
        label: "Image data or link",
        properties: [{name: "view", labels: ["javascript"], defaultValue: "foam.ui.md.ImagePickerView"}]
    }), CLASS({
        name: "URLProperty",
        extends: "StringProperty",
        label: "Web link (URL or internet address)"
    }), CLASS({
        name: "ColorProperty",
        extends: "StringProperty",
        label: "Color",
        properties: [["view", "foam.ui.md.ColorFieldView"]]
    }), CLASS({
        name: "PasswordProperty",
        extends: "StringProperty",
        label: "Password that displays protected or hidden text",
        properties: [{name: "swiftView", defaultValue: "FoamPasswordUITextField"}]
    }), CLASS({
        name: "PhoneNumberProperty",
        extends: "StringProperty",
        label: "Phone number",
        properties: [["pattern", "^[0-9-+()* ]*$"]]
    }), DEBUG && CLASS({
        name: "DocumentationProperty",
        extends: "Property",
        help: "Describes the documentation properties found on Models, Properties, Actions, Methods, etc.",
        documentation: "The developer documentation for this $$DOC{ref:'.'}. Use a $$DOC{ref:'DocModelView'} to view documentation.",
        properties: [{
            name: "getter", labels: ["debug"], defaultValue: function (name) {
                var doc = this.instance_[name]
                return !doc || "undefined" == typeof Documentation || !Documentation || doc.model_ && doc.model_.getPrototype && Documentation.isInstance(doc) || (doc.body ? this.instance_[name] = Documentation.create(doc) : this.instance_[name] = Documentation.create({body: doc})), this.instance_[name]
            }
        }, {name: "view", defaultValue: "foam.ui.DetailView", labels: ["debug"]}, {
            name: "help",
            defaultValue: "Documentation for this entity.",
            labels: ["debug"]
        }, {
            name: "documentation", factory: function () {
                return "The developer documentation for this $$DOC{ref:'.'}. Use a $$DOC{ref:'DocModelView'} to view documentation."
            }, labels: ["debug"]
        }]
    }), CLASS({
        name: "ImportedProperty",
        extends: "Property",
        label: "A pseudo-property that does not clone its value.",
        properties: [["transient", !0], ["hidden", !0]],
        methods: [function deepCloneProperty(value, cloneArgs) {
            this.cloneProperty(value, cloneArgs)
        }, function cloneProperty(value, cloneArgs) {
            cloneArgs[this.name] = value
        }]
    }), CLASS({
        name: "EnumProperty",
        extends: "Property",
        properties: [{name: "enum", swiftType: "FoamEnum.Type"}, {
            name: "view",
            labels: ["javascript"],
            defaultValue: "foam.ui.EnumFieldView"
        }, {
            name: "swiftType", defaultValueFn: function () {
                return this.enum.split(".").pop()
            }
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`.value, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, {
            name: "defaultValue", adapt: function (_, v) {
                if ("string" == typeof v && X.lookup(this.enum)) {
                    var e = X.lookup(this.enum)
                    return e[e[v]]
                }
                return v
            }
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                if ("string" == typeof this.defaultValue && (this.defaultValue = this.defaultValue), this.defaultValue && this.defaultValue.name)return this.enum.split(".").pop() + "." + this.defaultValue.name
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                if ("string" == typeof this.defaultValue && (this.defaultValue = this.defaultValue), this.defaultValue && this.defaultValue.name)return this.enum + "." + this.defaultValue.name
            }
        }, {
            name: "javaType", defaultValueFn: function () {
                return this.enum
            }
        }, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.EnumView").create(null, X)
            }
        }, {name: "swiftView", defaultValue: "FoamEnumUILabel"}]
    }), CLASS({
        name: "FObjectProperty",
        extends: "Property",
        help: "Describes a properties of type FObject.",
        label: "FObject",
        properties: [{
            name: "javaType", defaultValueFn: function () {
                return this.subType || "FObject"
            }
        }, {
            name: "swiftType", defaultValueFn: function () {
                return this.subType ? this.subType.split(".").pop() : "FObject"
            }
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "compareProperty", swiftDefaultValue: function () {
            }
        }]
    }), CLASS({
        name: "Template",
        tableProperties: ["name", "description"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The template's unique name.",
            documentation: function () {
            }
        }, {
            name: "description",
            type: "String",
            labels: ["javascript"],
            required: !0,
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "The template's description.",
            documentation: "A human readable description of the $$DOC{ref:'.'}."
        }, {
            type: "Array",
            name: "args",
            type: "Array[Arg]",
            subType: "Arg",
            view: "foam.ui.ArrayView",
            factory: function () {
                return []
            },
            help: "Method arguments.",
            documentation: function () {
            }
        }, {
            name: "template",
            type: "String",
            displayWidth: 180,
            displayHeight: 30,
            defaultValue: "",
            view: "foam.ui.TextAreaView",
            help: "Template text. <%= expr %> or <% out(...); %>",
            documentation: "The string content of the uncompiled $$DOC{ref:'Template'} body."
        }, {name: "path"}, {name: "futureTemplate", transient: !0}, {
            name: "code",
            transient: !0
        }, {type: "Documentation", name: "documentation", labels: ["debug"]}, {
            name: "language",
            type: "String",
            lazyFactory: function () {
                return "CSS" === this.name ? "css" : "html"
            }
        }, {name: "labels"}],
        methods: [function toE(X) {
            return X.data[this.name]()
        }]
    }), CLASS({
        name: "Action",
        plural: "Actions",
        tableProperties: ["name", "label"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the action.",
            documentation: function () {
            }
        }, {
            name: "label", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
                return labelize(this.name)
            }, help: "The display label for the action.", documentation: function () {
            }
        }, {
            name: "speechLabel",
            type: "String",
            displayWidth: 70,
            displayHeight: 1,
            defaultValueFn: function () {
                return this.label
            },
            help: "The speech label for the action.",
            documentation: "A speakable label for the $$DOC{ref:'.'}. Used for accessibility."
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            help: "Help text associated with the action.",
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["documentation"]
        }, {
            name: "default",
            type: "Boolean",
            view: "foam.ui.BooleanView",
            defaultValue: !1,
            help: "Indicates if this is the default action.",
            documentation: function () {
            }
        }, {
            type: "Function",
            name: "isAvailable",
            label: "Available",
            displayWidth: 70,
            displayHeight: 3,
            defaultValue: function () {
                return !0
            },
            help: "Function to determine if action is available.",
            documentation: function () {
            }
        }, {
            type: "Function",
            name: "isEnabled",
            label: "Enabled",
            displayWidth: 70,
            displayHeight: 3,
            defaultValue: function () {
                return !0
            },
            help: "Function to determine if action is enabled.",
            documentation: function () {
            }
        }, {
            type: "Function", name: "labelFn", label: "Label Function", defaultValue: function (action) {
                return action.label
            }, help: "Function to determine label. Defaults to 'this.label'.", documentation: function () {
            }
        }, {
            name: "iconUrl",
            type: "String",
            defaultValue: void 0,
            help: "Provides a url for an icon to render for this action",
            documentation: function () {
            }
        }, {
            type: "Function", name: "iconUrlFn", label: "Label Function", defaultValue: function (action) {
                return action.iconUrl
            }, help: "Function to determine iconUrl. Defaults to 'this.iconUrl'.", documentation: function () {
            }
        }, {
            name: "ligature",
            type: "String",
            defaultValue: void 0,
            help: "Provides a ligature for font-based icons for this action",
            documentation: function () {
            }
        }, {
            name: "showLabel",
            type: "String",
            defaultValue: !0,
            help: "Property indicating whether the label should be rendered alongside the icon",
            documentation: function () {
            }
        }, {
            name: "children",
            type: "Array",
            factory: function () {
                return []
            },
            subType: "Action",
            view: "foam.ui.ArrayView",
            help: "Child actions of this action.",
            documentation: function () {
            }
        }, {
            name: "parent", type: "String", help: "The parent action of this action", documentation: function () {
            }
        }, {
            type: "Function",
            name: "code",
            displayWidth: 80,
            displayHeight: 20,
            defaultValue: "",
            help: "Function to implement action.",
            documentation: function () {
            }
        }, {
            type: "Function",
            name: "action",
            displayWidth: 80,
            displayHeight: 20,
            defaultValue: "",
            getter: function () {
                return console.log("deprecated use of Action.action"), this.code
            },
            setter: function (code) {
                return console.log("deprecated use of Action.action"), this.code = code
            }
        }, {
            type: "StringArray", name: "keyboardShortcuts", documentation: function () {
            }
        }, {
            name: "translationHint",
            label: "Description for Translation",
            type: "String",
            defaultValue: ""
        }, {
            name: "priority",
            type: "Int",
            defaultValue: 5,
            help: "Measure of importance of showing this action to the user when it is rendered in a list.",
            documentation: function () {
            }
        }, {
            name: "order",
            type: "Float",
            defaultValue: 5,
            help: "Indication of where this action should appear in an ordered list of actions.",
            documentation: function () {
            }
        }, {type: "String", name: "swiftCode", labels: ["swift"]}, {
            model_: "TemplateProperty",
            name: "swiftSource",
            labels: ["swift"],
            defaultValue: function () {
            }
        }],
        methods: [function toE(X) {
            return console.assert(X, "X required for Action.toE()."), X.lookup("foam.u2.ActionButton").create({
                data: X.data,
                action: this
            }, X)
        }, function maybeCall(X, that) {
            return !(!this.isAvailable.call(that, this) || !this.isEnabled.call(that, this)) && (this.code.call(that, X, this), that.publish(["action", this.name], this), !0)
        }]
    }), CLASS({
        name: "Arg",
        tableProperties: ["type", "name", "description"],
        documentation: function () {
        },
        properties: [{
            name: "type",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "Object",
            labels: ["debug"],
            help: "The type of this argument.",
            documentation: function () {
            }
        }, {
            name: "javaType",
            type: "String",
            required: !1,
            defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().javaType
            },
            help: "The java type that represents the type of this property.",
            labels: ["java", "compiletime"],
            documentation: function () {
            }
        }, {
            name: "javaDefaultValue",
            type: "String",
            required: !1,
            labels: ["java", "compiletime"]
        }, {
            name: "javascriptType",
            type: "String",
            required: !1,
            defaultValueFn: function () {
                return this.type
            },
            help: "The javascript type that represents the type of this property.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            name: "swiftType", type: "String", labels: ["swift", "compiletime"], defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().swiftType
            }
        }, {
            type: "String", name: "swiftName", labels: ["swift", "compiletime"], defaultValueFn: function () {
                return this.name
            }
        }, {
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the entity.",
            documentation: function () {
            }
        }, {
            type: "Boolean", name: "required", defaultValue: !0, labels: ["debug"], documentation: function () {
            }
        }, {
            name: "defaultValue",
            help: "Default Value if not required and not provided.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            name: "description",
            type: "String",
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this argument.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            help: "Help text associated with the entity.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["debug"]
        }],
        methods: {
            decorateFunction: function (f, i) {
                if ("Object" === this.type)return f
                var type = this.type
                return this.required ? function () {
                    return console.assert(void 0 !== arguments[i], "Missing required argument# " + i), console.assert(typeof arguments[i] === type, "argument# " + i + " type expected to be " + type + ", but was " + typeof arguments[i] + ": " + arguments[i]), f.apply(this, arguments)
                } : function () {
                    return console.assert(void 0 === arguments[i] || typeof arguments[i] === type, "argument# " + i + " type expected to be " + type + ", but was " + typeof arguments[i] + ": " + arguments[i]), f.apply(this, arguments)
                }
            }
        },
        templates: [{
            model_: "Template",
            name: "javaSource",
            description: "Java Source",
            template: "<%= this.javaType %> <%= this.name %>",
            labels: ["debug"]
        }, {
            model_: "Template",
            name: "closureSource",
            description: "Closure JavaScript Source",
            template: "@param {<%= this.javascriptType %>} <%= this.name %> .",
            labels: ["debug"]
        }, {
            model_: "Template",
            name: "webIdl",
            description: "Web IDL Source",
            template: "<%= this.type %> <%= this.name %>",
            labels: ["debug"]
        }]
    }), CLASS({
        name: "Constant",
        plural: "constants",
        tableProperties: ["name", "value", "description"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the entity.",
            documentation: function () {
            }
        }, {type: "String", name: "units"}, {
            type: "String", labels: ["swift"], name: "swiftType", defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().swiftType
            }
        }, {
            type: "String", labels: ["swift"], name: "swiftValue", defaultValueFn: function () {
                if (this.type) {
                    var type = X.lookup(this.type + "Property")
                    if (type)return type = type.create(), type.defaultValue = this.value, type.swiftDefaultValue
                }
            }
        }, {
            type: "String", labels: ["java"], name: "javaType", defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().javaType
            }
        }, {
            type: "String", labels: ["java"], name: "javaValue", defaultValueFn: function () {
                if (this.type) {
                    var type = X.lookup(this.type + "Property")
                    if (type)return type = type.create(), type.defaultValue = this.value, type.javaDefaultValue
                }
            }
        }, {
            name: "description",
            type: "String",
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this method.",
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["debug"]
        }, {name: "value", help: "The value of the constant."}, {
            name: "type",
            defaultValue: "",
            help: "Type of the constant."
        }, {name: "translationHint", label: "Description for Translation", type: "String", defaultValue: ""}]
    }), CLASS({
        name: "Method",
        plural: "Methods",
        tableProperties: ["name", "description"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the entity.",
            documentation: function () {
            }
        }, {
            name: "description",
            type: "String",
            labels: ["javascript"],
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this method.",
            documentation: function () {
            }
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            labels: ["debug"],
            help: "Help text associated with the entity.",
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["debug"]
        }, {
            name: "code",
            type: "Function",
            displayWidth: 80,
            displayHeight: 30,
            view: "foam.ui.FunctionView",
            help: "Javascript code to implement this method.",
            postSet: function () {
                if (_DOC_) {
                    var multilineComment = /^\s*function\s*\([\$\s\w\,]*?\)\s*{\s*\/\*([\s\S]*?)\*\/[\s\S]*$|^\s*\/\*([\s\S]*?)\*\/([\s\S]*)/.exec(this.code.toString())
                    if (multilineComment) {
                        var bodyFn = multilineComment[1]
                        this.documentation = this.Y.Documentation.create({name: this.name, body: bodyFn})
                    }
                }
            },
            documentation: function () {
            }
        }, {
            name: "returnType", defaultValue: "", help: "Return type.", documentation: function () {
            }, labels: ["debug"]
        }, {
            name: "javaReturnType", labels: ["java"], defaultValueFn: function () {
                if (!this.returnType)return "void"
                var type = X.lookup(this.returnType + "Property")
                if (type)return type.create().javaType
            }
        }, {
            name: "swiftReturnType", labels: ["swift"], defaultValueFn: function () {
                if (!this.returnType)return "Void"
                var type = X.lookup(this.returnType + "Property")
                if (type)return type.create().swiftType
            }
        }, {
            type: "Boolean", name: "returnTypeRequired", defaultValue: !0, documentation: function () {
            }, labels: ["debug"]
        }, {
            type: "Array",
            name: "args",
            type: "Array[Arg]",
            subType: "Arg",
            view: "foam.ui.ArrayView",
            factory: function () {
                return []
            },
            help: "Method arguments.",
            documentation: function () {
            },
            labels: ["debug"],
            adapt: function (_, n) {
                return n.forEach(function (arg, i) {
                    n[i] = Arg.create(arg)
                }.bind(this)), n
            }
        }, {
            name: "whenIdle",
            help: "Should this listener be deferred until the system is idle (ie. not running any animations).",
            documentation: function () {
            }
        }, {
            name: "isMerged", help: "As a listener, should this be merged?", documentation: function () {
            }
        }, {
            type: "Boolean",
            name: "isFramed",
            help: "As a listener, should this be animated?",
            defaultValue: !1,
            documentation: function () {
            }
        }, {type: "Boolean", name: "isStatic", labels: ["java", "swift"]}, {name: "labels"}, {
            type: "String",
            name: "swiftCode",
            labels: ["swift"]
        }, {type: "String", name: "javaCode", labels: ["java"]}, {
            model_: "TemplateProperty",
            name: "swiftSource",
            labels: ["swift"],
            defaultValue: function () {
            }
        }, {
            model_: "TemplateProperty", name: "javaSource", labels: ["java"], defaultValue: function () {
            }
        }],
        methods: [function toE(X) {
            return X.data[this.name]()
        }],
        templates: [{
            model_: "Template",
            name: "closureSource",
            description: "Closure JavaScript Source",
            template: "/**\n<% for ( var i = 0; i < this.args.length ; i++ ) { var arg = this.args[i]; %> * <%= arg.closureSource() %>\n<% } %><% if (this.returnType) { %> * @return {<%= this.returnType %>} .\n<% } %> */\n<%= arguments[1] %>.prototype.<%= this.name %> = goog.abstractMethod;"
        }, {
            model_: "Template",
            name: "webIdl",
            description: "Web IDL Source",
            template: "<%= this.returnType || 'void' %> <%= this.name %>(<% for ( var i = 0 ; i < this.args.length ; i++ ) { var arg = this.args[i]; %><%= arg.webIdl() %><% if ( i < this.args.length-1 ) out(\", \"); %><% } %>)"
        }]
    }), Method.getPrototype().decorateFunction = function (f) {
        for (var i = 0; i < this.args.length; i++) {
            var arg = this.args[i]
            f = arg.decorateFunction(f, i)
        }
        var returnType = this.returnType
        return returnType ? function () {
            var ret = f.apply(this, arguments)
            return console.assert(typeof ret === returnType, "return type expected to be " + returnType + ", but was " + typeof ret + ": " + ret), ret
        } : f
    }, Method.getPrototype().generateFunction = function () {
        var f = this.code
        return DEBUG ? this.decorateFunction(f) : f
    }, Method.methods = {
        decorateFunction: Method.getPrototype().decorateFunction,
        generateFunction: Method.getPrototype().generateFunction
    }, CLASS({
        name: "Documentation",
        tableProperties: ["name"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "documentation",
            help: "The Document's unique name.",
            documentation: "An optional name for the document. Documentation is normally referenced by the name of the containing Model."
        }, {
            name: "label",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The Document's title or descriptive label.",
            documentation: "A human readable title to display. Used for books of documentation and chapters."
        }, {
            name: "body",
            type: "Template",
            defaultValue: "",
            help: "The main content of the document.",
            documentation: "The main body text of the document. Any valid template can be used, including the $$DOC{ref:'foam.documentation.DocView'} specific $$DOC{ref:'foam.documentation.DocView',text:'$$DOC{\"ref\"}'} tag.",
            preSet: function (_, template) {
                return TemplateUtil.expandTemplate(this, template)
            }
        }, {
            type: "Array",
            name: "chapters",
            type: "Array[Document]",
            subtype: "Documentation",
            view: "foam.ui.ArrayView",
            factory: function () {
                return []
            },
            help: "Sub-documents comprising the full body of this document.",
            documentation: "Optional sub-documents to be included in this document. A viewer may choose to provide an index or a table of contents.",
            labels: ["debug"],
            preSet: function (old, nu) {
                if (!_DOC_)return []
                var self = this, foamalized = []
                return nu.forEach(function (chapter) {
                    !chapter || "undefined" == typeof self.Y.Documentation || !self.Y.Documentation || chapter.model_ && chapter.model_.getPrototype && self.Y.Documentation.isInstance(chapter) ? foamalized.push(chapter) : chapter.body ? foamalized.push(self.Y.Documentation.create(chapter)) : foamalized.push(self.Y.Documentation.create({body: chapter}))
                }), foamalized
            }
        }]
    }), CLASS({
        name: "Relationship",
        tableProperties: ["name", "label", "relatedModel", "relatedProperty"],
        documentation: function () {
        },
        properties: [{
            name: "name", type: "String", displayWidth: 30, displayHeight: 1, defaultValueFn: function () {
                return GLOBAL[this.relatedModel] ? GLOBAL[this.relatedModel].plural : ""
            }, documentation: function () {
            }, help: "The coding identifier for the relationship."
        }, {
            name: "label", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
                return this.name.labelize()
            }, documentation: function () {
            }, help: "The display label for the relationship."
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            documentation: function () {
            },
            help: "Help text associated with the relationship."
        }, {
            type: "Documentation", name: "documentation", documentation: function () {
            }
        }, {
            name: "relatedModel",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            documentation: function () {
            },
            help: "The name of the related Model."
        }, {
            name: "destinationModel",
            type: "String",
            required: !1,
            displayWidth: 30,
            displayHeight: 1
        }, {
            name: "destinationProperty",
            type: "String",
            required: !1,
            displayWidth: 30,
            displayHeight: 1
        }, {
            name: "relatedProperty",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            documentation: function () {
            },
            help: "The join property of the related Model."
        }, {
            name: "toRelationshipE", labels: ["javascript"], defaultValue: function toRelationshipE(X) {
                return X.lookup("foam.u2.DAOController").create(null, X)
            }, adapt: function (_, nu) {
                return "string" == typeof nu ? function (X) {
                    return X.lookup(nu).create(null, X)
                } : nu
            }
        }],
        methods: [function toE(X) {
            return X.lookup("foam.u2.RelationshipView").create({relationship: this, view: this.toRelationshipE(X)}, X)
        }]
    }), function () {
        for (var i = 0; i < Model.templates.length; i++)Model.templates[i] = JSONUtil.mapToObj(X, Model.templates[i])
        Model.properties = Model.properties, delete Model.instance_.prototype_, Model = Model.create(Model)
    }(), recopyModelFeatures(Property), recopyModelFeatures(Model), recopyModelFeatures(Method), recopyModelFeatures(Action), recopyModelFeatures(Template), DEBUG)for (var id in UNUSED_MODELS)USED_MODELS[id] && recopyModelFeatures(GLOBAL.lookup(id))
USED_MODELS.Model = !0, CLASS({
    package: "foam.ui",
    name: "Window",
    exports: ["performance", "$$", "$", "addStyle", "animate", "cancelAnimationFrame", "clearInterval", "clearTimeout", "console", "document", "framed", "dynamic", "dynamicFn", "dynamic2", "dynamic3", "error", "info", "installedModels", "log", "requestAnimationFrame", "setInterval", "setTimeout", "warn", "window", "writeView", "as FOAMWindow"],
    properties: [{
        name: "registeredModels", factory: function () {
            return {}
        }
    }, {type: "String", name: "name", defaultValue: "window"}, {
        name: "window", postSet: function (_, w) {
            this.X.subDocument && this.X.subDocument(w.document), w.X = this.Y, this.document = w.document, this.performance = w.performance
        }
    }, {name: "document"}, {name: "performance"}, {
        name: "installedModels",
        documentation: "Each new Window context introduces a new document and resets installedModels so models will install again in the new document.",
        factory: function () {
            return {}
        }
    }, {
        name: "installedStyles", factory: function () {
            return {}
        }
    }, {type: "Boolean", name: "isBackground", defaultValue: !1}, {
        name: "console", lazyFactory: function () {
            return this.window.console
        }
    }],
    methods: {
        addStyle: function (obj) {
            var id = obj.model_.id
            if (!this.installedStyles[id]) {
                this.installedStyles[id] = !0
                var css = obj.CSS() + "\n\n/*# sourceURL=" + id.replace(/\./g, "/") + ".CSS */\n"
                if (this.document && this.document.createElement) {
                    var s = this.document.createElement("style")
                    s.innerHTML = css, this.document.head.insertBefore(s, this.document.head.firstElementChild)
                }
            }
        }, log: function () {
            this.console.log.apply(this.console, arguments)
        }, warn: function () {
            this.console.warn.apply(this.console, arguments)
        }, info: function () {
            this.console.info.apply(this.console, arguments)
        }, error: function () {
            this.console.error.apply(this.console, arguments)
        }, $: function (id) {
            return this.document.FOAM_OBJECTS && this.document.FOAM_OBJECTS[id] ? this.document.FOAM_OBJECTS[id] : this.document.getElementById(id)
        }, $$: function (cls) {
            return this.document.getElementsByClassName(cls)
        }, framed: function (listener) {
            return EventService.framed(listener, this)
        }, dynamic: function (fn) {
            return 1 == arguments.length ? FunctionValue.create({valueFactory: fn}, this) : OrValue.create({
                valueFactory: fn,
                values: Array.prototype.splice.call(arguments, 1)
            }, this)
        }, dynamicFn: function (fn, opt_fn) {
            return Events.dynamicFn(fn, opt_fn, this.Y)
        }, dynamic2: function (fn) {
            var listener = this.framed(fn), propertyValues = []
            fn(), Events.onGet.push(function (obj, name, value) {
                if (arguments.callee.caller.caller !== fn)return console.log("false alarm ", fn.toString()), void 0
                var value = obj.propertyValue(name)
                value.addListener(listener), propertyValues.push(value)
            })
            var ret = fn()
            Events.onGet.pop()
            var f = function () {
                propertyValues.forEach(function (p) {
                    p.removeListener(listener)
                })
            }
            return f.destroy = f, f
        }, dynamic3: function (obj, fn, opt_ret) {
            for (var values = fn.dependencies.map(function (name) {
                return obj.propertyValue(name)
            }), listener = this.framed(function () {
                var ret = fn.call(obj)
                opt_ret && opt_ret(ret)
            }), i = 0; i < values.length; i++)values[i].addListener(listener)
            var f = function () {
                for (var i = 0; i < values.length; i++)values[i].removeListener(listener)
            }
            return f.destroy = f, f
        }, animate: function (duration, fn, opt_interp, opt_onEnd) {
            return Movement.animate(duration, fn, opt_interp, opt_onEnd, this.Y)
        }, setTimeout: function (f, t) {
            return this.window.setTimeout.apply(this.window, arguments)
        }, clearTimeout: function (id) {
            this.window.clearTimeout(id)
        }, setInterval: function (f, t) {
            return this.window.setInterval.apply(this.window, arguments)
        }, clearInterval: function (id) {
            this.window.clearInterval(id)
        }, requestAnimationFrame: function (f) {
            return this.isBackground ? this.setTimeout(f, 16) : (console.assert(this.window.requestAnimationFrame, "requestAnimationFrame not defined"), this.window.requestAnimationFrame(f))
        }, cancelAnimationFrame: function (id) {
            return this.isBackground ? (this.clearTimeout(id), void 0) : (this.window.cancelAnimationFrame && this.window.cancelAnimationFrame(id), void 0)
        }, writeView: function (view, opt_X) {
            var document = (opt_X || this).document, html = view.toHTML()
            document.body.insertAdjacentHTML("beforeend", html), view.initHTML()
        }
    }
}), function () {
    var w = foam.ui.Window.create({window: window, name: "DEFAULT WINDOW", isBackground: "object" == typeof process}, X)
    FObject.X = X = w.Y
}(), CLASS({
    name: "SimpleValue",
    properties: [{name: "value"}],
    constants: {__isValue__: !0},
    methods: [function init(value) {
        this.value = value || ""
    }, function get() {
        return this.value
    }, function set(val) {
        this.value = val
    }, function toString() {
        return "SimpleValue(" + this.value + ")"
    }, function follow(srcValue) {
        Events.follow(srcValue, this)
    }]
}), CLASS({
    name: "FunctionValue", extends: "SimpleValue", properties: [{
        name: "values", factory: function () {
            return []
        }
    }, {name: "valueFactory"}], methods: [function init() {
        this.SUPER(), this.valueFactory()
        var f = this.valueFactory
        this.startRecordingDependencies(), this.value = f(), this.endRecordingDependencies()
        for (var i = 0; i < this.values.length; i++)this.values[i].addListener(this.onSubValueChange)
    }, function destroy() {
        for (var i = 0; i < this.values.length; i++)this.values[i].removeListener(this.onSubValueChange)
    }, function startRecordingDependencies() {
        var values = this.values, onSubValueChange = this.onSubValueChange
        Events.onGet.push(function (obj, name, value) {
            var l = obj.propertyValue(name)
            values.indexOf(l) == -1 && (values.push(l), l.addListener(onSubValueChange))
        })
    }, function endRecordingDependencies() {
        Events.onGet.pop()
    }, function get() {
        return this.value
    }, function set(val) {
    }, function toString() {
        return "FunctionValue(" + this.value + ")"
    }], listeners: [function onSubValueChange_() {
        this.value = this.valueFactory()
    }, {
        name: "onSubValueChange", isFramed: !0, code: function () {
            this.onSubValueChange_()
        }
    }]
}), CLASS({
    name: "OrValue",
    extends: "SimpleValue",
    properties: [{name: "values"}, {
        name: "valueFactory", defaultValue: function () {
            return arguments
        }
    }],
    methods: [function init() {
        this.SUPER()
        for (var i = 0; i < this.values.length; i++)this.values[i].addListener(this.onSubValueChange)
        this.onSubValueChange_()
    }, function destroy() {
        for (var i = 0; i < this.values.length; i++)this.values[i].removeListener(this.onSubValueChange)
    }, function get() {
        return this.value
    }, function set(val) {
    }, function toString() {
        return "OrValue(" + this.value + ")"
    }],
    listeners: [function onSubValueChange_() {
        for (var args = new Array(this.values.length), i = 0; i < this.values.length; i++)args[i] = this.values[i].get()
        this.value = this.valueFactory.apply(this, args)
    }, {
        name: "onSubValueChange", isFramed: !0, code: function () {
            this.onSubValueChange_()
        }
    }]
}), CLASS({
    name: "SimpleReadOnlyValue",
    extends: "SimpleValue",
    documentation: "A simple value that can only be set during initialization.",
    properties: [{
        name: "value", preSet: function (old, nu) {
            return "undefined" == typeof this.instance_.value ? nu : old
        }
    }],
    methods: {
        set: function (val) {
            "undefined" == typeof this.instance_.value && this.SUPER(val)
        }, toString: function () {
            return "SimpleReadOnlyValue(" + this.value + ")"
        }
    }
})
var DOM = {
    init: function (X) {
        X.document.FOAM_OBJECTS || (X.document.FOAM_OBJECTS = {})
        for (var fs = X.document.querySelectorAll("foam"), models = [], i = 0; i < fs.length; i++) {
            var e = fs[i]
            X.lookup(e.getAttribute("view")), X.lookup(e.getAttribute("model")), e.getAttribute("view") && models.push(X.arequire(e.getAttribute("view"))), e.getAttribute("model") && models.push(X.arequire(e.getAttribute("model")))
        }
        for (var key in USED_MODELS)models.push(X.arequire(key))
        atime("DOMInit", aseq(apar.apply(null, models), function (ret) {
            for (var i = 0; i < fs.length; i++) {
                for (var e = fs[i], node = e, body = X.document.body; node && node !== body;)node = node.parentNode
                node && (this.initElement(e, X, X.document), e.innerHTML = ""), ret()
            }
        }.bind(this)))()
    }, initElementChildren: function (e, X) {
        for (var a = [], i = 0; i < e.children.length; i++) {
            var c = e.children[i]
            "FOAM" === c.tagName && a.push(DOM.initElement(c, X))
        }
        return a
    }, initElement: function (e, X, opt_document) {
        X.arequire("foam.ui.FoamTagView")(function (t) {
            foam.ui.FoamTagView.create({element: e}, X)
        })
    }, setClass: function (e, className, opt_enabled) {
        var oldClassName = e.className || "", enabled = void 0 === opt_enabled || opt_enabled
        e.className = oldClassName.replace(" " + className, "").replace(className, ""), enabled && (e.className = e.className + " " + className)
    }
}
window && window.addEventListener && window.addEventListener("load", function () {
    DOM.init(X)
}, !1)
var DomValue = {
    DEFAULT_EVENT: "change",
    DEFAULT_PROPERTY: "value",
    __isValue__: !0,
    create: function (element, opt_event, opt_property) {
        if (!element)throw"Missing Element in DomValue"
        return {
            __proto__: this,
            element: element,
            event: opt_event || this.DEFAULT_EVENT,
            property: opt_property || this.DEFAULT_PROPERTY
        }
    },
    setElement: function (element) {
        this.element = element
    },
    get: function () {
        return this.element[this.property]
    },
    set: function (value) {
        this.element[this.property] !== value && (this.element[this.property] = value)
    },
    addListener: function (listener) {
        if (this.event)try {
            this.element.addEventListener(this.event, listener, !1)
        } catch (x) {
        }
    },
    removeListener: function (listener) {
        if (this.event)try {
            this.element.removeEventListener(this.event, listener, !1)
        } catch (x) {
        }
    },
    toString: function () {
        return "DomValue(" + this.event + ", " + this.property + ")"
    }
}
CLASS({
    name: "DOMValue",
    constants: {__isValue__: !0},
    properties: [{name: "element", required: !0}, {name: "property", defaultValue: "value"}, {
        name: "event",
        defaultValue: "change"
    }, {
        name: "value", postSet: function (_, value) {
            this.element[this.property] = value
        }
    }, {name: "firstListener_", defaultValue: !0}],
    methods: {
        init: function () {
            this.SUPER(), this.value = this.element[this.property]
        }, get: function () {
            return this.value
        }, set: function (value) {
            this.value = value
        }, addListener: function (listener) {
            this.firstListener_ && (this.event && this.element.addEventListener(this.event, function () {
            }, !1), this.firstListener_ = !1), this.value$.addListener(listener)
        }, removeListener: function (listener) {
            this.value$.removeListener(listener)
        }, toString: function () {
            return "DOMValue(" + this.event + ", " + this.property + ")"
        }
    }
})
var __element_map__ = {INPUT: "foam.u2.tag.Input", TEXTAREA: "foam.u2.tag.TextArea", SELECT: "foam.u2.tag.Select"}
X.__element_map__ = __element_map__, X.elementForName = elementForName, X.elementForFeature = elementForFeature, X.registerE = registerE, X.E = E, X.start = start, CLASS({
    package: "foam.ui",
    name: "FoamTagView",
    extends: "foam.ui.View",
    requires: ["foam.html.Element", "foam.ui.View", "foam.ui.DetailView"],
    imports: ["document"],
    properties: [{name: "element"}, {name: "className", defaultValue: "foam-tag"}],
    methods: {
        init: function () {
            this.SUPER(), this.Element.isInstance(this.element) || this.install()
        }, install: function () {
            var e = this.element, models = [], style = e.getAttribute("style"), modelName = e.getAttribute("model"), viewName = e.getAttribute("view"), onInit = e.getAttribute("oninit")
            modelName && models.push(this.X.arequire(modelName)), viewName && models.push(this.X.arequire(viewName)), aseq(apar.apply(null, models), function (ret) {
                if (this.holder()) {
                    var model = this.X.lookup(modelName)
                    if (!model)return this.error("Unknown Model: ", modelName), void 0
                    model.getPrototype()
                    var obj = model.create(null, this.X)
                    obj.fromElement(e), obj.model_.DATA && this.hasOwnProperty("data") && (obj.data = this.data)
                    var view
                    if (viewName) {
                        var viewModel = this.X.lookup(viewName)
                        view = viewModel.create({model: model, data: obj}, obj.Y)
                    } else if (obj.toHTML)view = obj
                    else if (obj.toView_)view = obj.toView_()
                    else if (obj.toE)view = obj.toE(obj.Y)
                    else {
                        var a = this.element.getAttribute("showActions"), showActions = !a || a.equalsIC("y") || a.equalsIC("yes") || a.equalsIC("true") || a.equalsIC("t")
                        view = this.X.lookup("foam.ui.DetailView").create({
                            model: model,
                            data: obj,
                            showActions: showActions
                        }, obj.Y)
                    }
                    e.id && (this.document.FOAM_OBJECTS[e.id] = obj), obj.view_ = view, this.holder().outerHTML = view.toHTML(), style && view.$.setAttribute("style", style), view.initHTML(), onInit && aeval("function() { " + onInit + " }")(function (f) {
                        f.call(obj)
                    })
                }
            }.bind(this))()
        }, holder: function () {
            return this.Element.isInstance(this.element) ? this.$ : this.element
        }, error: function (msg) {
            console.error(msg), this.holder.innerHTML = msg
        }, initHTML: function () {
            this.install()
        }
    }
}), CLASS({
    package: "foam.grammars",
    name: "CSSDecl",
    imports: ["assert"],
    documentation: function () {
    },
    constants: {
        PREFIXES: ["-webkit-"],
        PREFIXED_KEYS: {
            "align-content": !0,
            "align-items": !0,
            "align-self": !0,
            animation: !0,
            "box-shadow": !0,
            "column-count": !0,
            "column-gap": !0,
            "column-rule": !0,
            display: "flex",
            filter: !0,
            flex: !0,
            "flex-basis": !0,
            "flex-direction": !0,
            "flex-flow": !0,
            "flex-grow": !0,
            "flex-shrink": !0,
            "flex-wrap": !0,
            "font-feature-settings": !0,
            hyphens: !0,
            "justify-content": !0,
            keyframes: !0,
            order: !0,
            transform: !0,
            "transform-origin": !0,
            "user-select": !0
        }
    },
    properties: [{
        name: "parser", lazyFactory: function () {
            return SkipGrammar.create(this.parser_, seq("/*", repeat(not("*/", anyChar)), "*/"))
        }
    }, {
        name: "parser_", lazyFactory: function () {
            var css = this
            return {
                __proto__: grammar, START: sym("stylesheet"), ws: alt(" ", "\t", "\n", "\r", "\f"),
                wsc: alt(sym("ws"), ","), ws_: repeat0(sym("ws")), wsp_: plus0(sym("ws")),
                alphaNum: alt("-", range("a", "z"), range("A", "Z"), range("0", "9")),
                punct: alt(range("!", "'"), range("*", "+"), range("-", "/"), range("<", "@"), range("[", "`"), "|", "~"),
                anp: alt(sym("alphaNum"), sym("punct")),
                stylesheet: str(seq(sym("ws_"), str(repeat(alt(sym("stmtRule"), sym("blockRule")), sym("ws_"))))),
                rulePrefix: plus(str(plus(alt(sym("anp"), ",", "(", ")", ":"))), sym("wsp_")),
                stmtRule: str(seq(sym("rulePrefix"), ";")), blockRule: str(seq(sym("rulePrefix"), sym("block"))),
                blockList: str(plus(sym("blockRule"), sym("ws_"))),
                fnArgs: seq("(", sym("ws_"), str(repeat(sym("fnArg"))), ")"),
                fnArg: seq(str(plus(alt(sym("fnArgs"), sym("fnArgIdent")))), repeat(sym("wsc"))),
                fnArgIdent: str(plus(alt(sym("anp"), "{", "}", ";", ":"))),
                declLHS: str(plus(alt(sym("anp"), ",", "(", ")", ";"))),
                declRHS: plus(str(plus(alt(sym("fnArgs"), sym("declRHSIdent")))), sym("wsp_")),
                declRHSIdent: str(plus(alt(sym("anp"), ",", ":"))),
                decl: seq(sym("declLHS"), sym("ws_"), ":", sym("ws_"), sym("declRHS")),
                declList: plus(sym("decl"), seq(";", sym("ws_"))),
                block: seq("{", sym("ws_"), optional(alt(sym("blockList"), sym("declList"))), "}")
            }.addActions({
                rulePrefix: function (parts) {
                    return parts = parts.map(function (p) {
                        return p.indexOf("^") >= 0 ? p.replace(/\^/g, css.modelName_ + "-") : p
                    }), parts.join(" ")
                }, block: function (parts) {
                    return "{" + (parts[2] ? parts[2] : "") + "}"
                }, declList: function (parts) {
                    return parts.join(";")
                }, declRHS: function (parts) {
                    return parts.join(" ")
                }, decl: function (parts) {
                    var key = parts[0], value = parts[4], data = css.PREFIXED_KEYS[key]
                    if (!data || 0 === css.PREFIXES.length)return key + ":" + value
                    var rtn = ""
                    if (data === !0 || data === value)for (var i = 0; i < css.PREFIXES.length; ++i) {
                        var prefix = css.PREFIXES[i]
                        rtn += data === !0 ? prefix + key + ":" + value + ";" : key + ":" + prefix + value + ";"
                    }
                    return rtn += key + ":" + value, rtn
                }, fnArg: function (parts) {
                    return parts[0] + (parts[1].indexOf(",") >= 0 ? ", " : " ")
                }, fnArgs: function (parts) {
                    return "(" + parts[2].trim() + ")"
                }
            })
        }
    }, {
        name: "model",
        documentation: "Optional model which contains this CSS template. Used to expand ^ signs in CSS selectors to the model name.",
        postSet: function (old, nu) {
            nu && (nu.buildPrototype(), this.modelName_ = nu.CSS_CLASS || cssClassize(nu.id))
        }
    }, {
        name: "modelName_", documentation: "The converted model name itself.", adapt: function (old, nu) {
            return "." + nu.split(/ +/).join(".")
        }
    }]
}), CLASS({
    package: "foam.html",
    name: "Element",
    constants: {
        OPTIONAL_CLOSE_TAGS: {
            HTML: !0,
            HEAD: !0,
            BODY: !0,
            P: !0,
            DT: !0,
            DD: !0,
            LI: !0,
            OPTION: !0,
            THEAD: !0,
            TH: !0,
            TBODY: !0,
            TR: !0,
            TD: !0,
            TFOOT: !0,
            COLGROUP: !0
        },
        ILLEGAL_CLOSE_TAGS: {
            IMG: !0,
            INPUT: !0,
            BR: !0,
            HR: !0,
            FRAME: !0,
            AREA: !0,
            BASE: !0,
            BASEFONT: !0,
            COL: !0,
            ISINDEX: !0,
            LINK: !0,
            META: !0,
            PARAM: !0
        }
    },
    properties: [{name: "id"}, {name: "nodeName"}, {
        name: "attributeMap_", transient: !0, factory: function () {
            return {}
        }
    }, {
        name: "attributes", factory: function () {
            return []
        }, postSet: function (_, attrs) {
            for (var i = 0; i < attrs.length; i++)this.attributeMap_[attrs[i].name] = attrs[i]
        }
    }, {
        name: "childNodes", factory: function () {
            return []
        }
    }, {
        name: "children", transient: !0, getter: function () {
            return this.childNodes.filter(function (c) {
                return "string" != typeof c
            })
        }
    }, {
        name: "outerHTML", transient: !0, getter: function () {
            var out = "<" + this.nodeName
            this.id && (out += ' id="' + this.id + '"')
            for (key in this.attributeMap_) {
                var value = this.attributeMap_[key].value
                out += void 0 == value ? " " + key : " " + key + '="' + this.attributeMap_[key].value + '"'
            }
            return this.ILLEGAL_CLOSE_TAGS[this.nodeName] || this.OPTIONAL_CLOSE_TAGS[this.nodeName] && !this.childNodes.length || (out += ">", out += this.innerHTML, out += "</" + this.nodeName), out += ">", out
        }
    }, {
        name: "innerHTML", transient: !0, getter: function () {
            for (var out = "", i = 0; i < this.childNodes.length; i++)out += this.childNodes[i].toString()
            return out
        }
    }],
    methods: {
        setAttribute: function (name, value) {
            var attr = this.getAttributeNode(name)
            attr ? attr.value = value : (attr = {
                name: name,
                value: value
            }, this.attributes.push(attr), this.attributeMap_[name] = attr)
        }, getAttributeNode: function (name) {
            return this.attributeMap_[name]
        }, getAttribute: function (name) {
            var attr = this.getAttributeNode(name)
            return attr && attr.value
        }, appendChild: function (c) {
            this.childNodes.push(c)
        }, removeChild: function (c) {
            for (var i = 0; i < this.childNodes.length; ++i)if (this.childNodes[i] === c) {
                this.childNodes.splice(i, 1)
                break
            }
        }, toString: function () {
            return this.outerHTML
        }
    }
})
var HTMLParser = {
    __proto__: grammar, create: function () {
        return {__proto__: this, stack: [X.foam.html.Element.create({nodeName: "html"})]}
    }, peek: function () {
        return this.stack[this.stack.length - 1]
    }, START: sym("html"), html: repeat0(sym("htmlPart")),
    htmlPart: simpleAlt(sym("cdata"), sym("comment"), sym("text"), sym("endTag"), sym("startTag")),
    tag: seq(sym("startTag"), repeat(seq1(1, sym("matchingHTML"), sym("htmlPart")))), matchingHTML: function (ps) {
        return this.stack.length > 1 ? ps : null
    }, startTag: seq("<", sym("tagName"), sym("whitespace"), sym("attributes"), sym("whitespace"), optional("/"), ">"),
    endTag: function () {
        var endTag_ = sym("endTag_")
        return function (ps) {
            return this.stack.length > 1 ? this.parse(endTag_, ps) : void 0
        }
    }(), endTag_: seq1(1, "</", sym("tagName"), ">"),
    cdata: seq1(1, "<![CDATA[", str(repeat(not("]]>", anyChar))), "]]>"),
    comment: seq("<!--", repeat0(not("-->", anyChar)), "-->"), attributes: repeat(sym("attribute"), sym("whitespace")),
    label: str(plus(notChars(" %=/\t\r\n<>'\""))), tagName: sym("label"), text: str(plus(alt("<%", notChar("<")))),
    attribute: seq(sym("label"), optional(seq1(1, "=", sym("value")))),
    value: str(alt(plus(alt(range("a", "z"), range("A", "Z"), range("0", "9"))), seq1(1, '"', repeat(notChar('"')), '"'))),
    whitespace: repeat0(alt(" ", "\t", "\r", "\n"))
}.addActions({
    START: function (xs) {
        var ret = this.stack[0]
        return this.stack = [X.foam.html.Element.create({nodeName: "html"})], ret
    }, tag: function (xs) {
        var ret = this.stack[0]
        return this.stack = [X.foam.html.Element.create({nodeName: "html"})], ret.childNodes[0]
    }, attribute: function (xs) {
        return {name: xs[0], value: xs[1]}
    }, cdata: function (xs) {
        this.peek() && this.peek().appendChild(xs)
    }, text: function (xs) {
        this.peek() && this.peek().appendChild(xs)
    }, startTag: function (xs) {
        var tag = xs[1], obj = X.foam.html.Element.create({nodeName: tag, attributes: xs[3]})
        return this.peek() && this.peek().appendChild(obj), "/" != xs[5] && this.stack.push(obj), obj
    }, endTag: function (tag) {
        for (var stack = this.stack; stack.length > 1;) {
            if (this.peek().nodeName === tag)return stack.pop(), void 0
            var top = stack.pop()
            this.peek().childNodes = this.peek().childNodes.concat(top.childNodes), top.childNodes = []
        }
    }
})
!function () {
    var registry = {}
    X.registerElement = function (name, model) {
        registry[name] = model, TemplateParser.foamTag_ = function () {
            var start = seq("<", simpleAlt.apply(null, Object.keys(registry).sort(function (o1, o2) {
                return o2.compareTo(o1)
            }).map(function (k) {
                return literal_ic(k)
            })), alt("/", " ", ">")), html = HTMLParser.create().export("tag")
            return function (ps) {
                var res = this.parse(start, ps) && this.parse(html, ps)
                if (!res)return null
                var elem = res.value, model = registry[elem.nodeName]
                return model && elem.setAttribute("model", model), res.setValue(elem)
            }
        }(), invalidateParsers()
    }, X.elementModel = function (name) {
        return registry[name]
    }
}(), X.registerElement("foam", null), CLASS({
    name: "Expr",
    swiftImplements: ["ExprProtocol"],
    javaImplements: ["foam.core2.ExprInterface"],
    documentation: "Parent model for all mLang expressions. Contains default implementations for many methods.",
    methods: [{
        name: "f",
        args: [{name: "obj", swiftType: "AnyObject?", javaType: "Object"}],
        swiftReturnType: "AnyObject?",
        javaReturnType: "Object",
        swiftCode: 'fatalError("You must extend and implement this.")',
        javaCode: "return null;"
    }, function toMQL() {
        return this.label_
    }, function toSQL() {
        return this.label_
    }, function toBQL() {
        return this.label_
    }, function toString() {
        return this.toMQL()
    }, function exprClone() {
        var c = Object.create(this.__proto__)
        c.instance_ = {}, c.X = this.X
        for (var key in this.instance_) {
            var value = this[key]
            void 0 !== value && ("function" == typeof value.exprClone ? c.instance_[key] = value.exprClone() : c.instance_[key] = value)
        }
        return c
    }, function collectInputs(terms) {
        terms.push(this)
    }, function partialEval() {
        return this
    }, function minterm(index, term) {
        return !!(term >>> index[0]-- & 1)
    }, function normalize() {
        return this
        var inputs = []
        this.collectInputs(inputs)
        for (var minterms = new Array(Math.pow(2, inputs.length)), i = 0; i < minterms.length; i++)minterms[i] = this.minterm([inputs.length - 1], i)
        var terms = []
        for (i = 0; i < minterms.length; i++)if (minterms[i]) {
            for (var subterms = [], j = 0; j < inputs.length; j++)i & 1 << inputs.length - j - 1 && subterms.push(inputs[j])
            terms.push(AndExpr.create({args: subterms}))
        }
        return OrExpr.create({args: terms}).partialEval()
    }, function pipe(sink) {
        var expr = this
        return {
            __proto__: sink, put: function (obj) {
                expr.f(obj) && sink.put(obj)
            }, remove: function (obj) {
                expr.f(obj) && sink.remove(obj)
            }
        }
    }]
}), CLASS({
    name: "TrueExpr",
    extends: "Expr",
    documentation: "Model for the primitive true value.",
    methods: [function clone() {
        return this
    }, function deepClone() {
        return this
    }, function exprClone() {
        return this
    }, function toString() {
        return "<true>"
    }, function toSQL() {
        return "( 1 = 1 )"
    }, function toMQL() {
        return ""
    }, function toBQL() {
        return ""
    }, function readResolve() {
        return TRUE
    }, {
        name: "f", code: function () {
            return !0
        }, swiftCode: "return true as AnyObject?", javaCode: "return true;"
    }]
}), CLASS({
    name: "FalseExpr",
    extends: "Expr",
    documentation: "Model for the primitive false value.",
    methods: [function clone() {
        return this
    }, function deepClone() {
        return this
    }, function exprClone() {
        return this
    }, function toSQL(out) {
        return "( 1 <> 1 )"
    }, function toMQL(out) {
        return "<false>"
    }, function toBQL(out) {
        return "<false>"
    }, function readResolve() {
        return FALSE
    }, {
        name: "f", code: function () {
            return !1
        }, swiftCode: "return false as AnyObject?", javaCode: "return false;"
    }]
}), CLASS({
    name: "IdentityExpr",
    extends: "Expr",
    documentation: "The identity expression, which passes through its input unchanged.",
    methods: {
        clone: function () {
            return this
        }, deepClone: function () {
            return this
        }, exprClone: function () {
            return this
        }, f: function (obj) {
            return obj
        }, toString: function () {
            return "IDENTITY"
        }, readResolve: function () {
            return IDENTITY
        }
    }
})
var TRUE = TrueExpr.create(), FALSE = FalseExpr.create(), IDENTITY = IdentityExpr.create()
CLASS({
    name: "NARY",
    extends: "Expr",
    abstract: !0,
    documentation: "Parent model for expressions which take an arbitrary number of arguments.",
    properties: [{
        name: "args",
        label: "Arguments",
        swiftType: "NSArray",
        javaType: "java.util.List<ExprInterface>",
        swiftFactory: "return [] as AnyObject?",
        javaFactory: "return new java.util.ArrayList<ExprInterface>();",
        help: "Sub-expressions",
        documentation: "An array of subexpressions which are the arguments to this n-ary expression.",
        factory: function () {
            return []
        }
    }],
    methods: {
        toString: function () {
            for (var s = this.name_ + "(", i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toString(), i < this.args.length - 1 && (s += ", ")
            }
            return s + ")"
        }, toSQL: function () {
            var s
            s = this.model_.label, s += "("
            for (var i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toSQL(), i < this.args.length - 1 && out.push(",")
            }
            return s += ")", s
        }, toMQL: function () {
            var s
            s = this.model_.label, s += "("
            for (var i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toMQL(), i < this.args.length - 1 && out.push(",")
            }
            return s += ")", str
        }, toBQL: function () {
            var s
            s = this.model_.label, s += "("
            for (var i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toBQL(), i < this.args.length - 1 && out.push(",")
            }
            return s += ")", str
        }
    }
}), CLASS({
    name: "UNARY",
    extends: "Expr",
    abstract: !0,
    documentation: "Parent model for one-argument expressions.",
    properties: [{
        name: "arg1",
        label: "Argument",
        swiftType: "AnyObject?",
        javaType: "Object",
        help: "Sub-expression",
        documentation: "The first argument to the expression.",
        defaultValue: TRUE,
        swiftDefaultValue: "TRUE",
        javaDefaultValue: "MLang.TRUE()"
    }],
    methods: {
        toSQL: function () {
            return this.label_ + "(" + this.arg1.toSQL() + ")"
        }, toMQL: function () {
            return this.label_ + "(" + this.arg1.toMQL() + ")"
        }, toBQL: function () {
            return this.label_ + "(" + this.arg1.toBQL() + ")"
        }
    }
}), CLASS({
    name: "BINARY",
    extends: "UNARY",
    abstract: !0,
    documentation: 'Parent model for two-argument expressions. Extends $$DOC{ref: "UNARY"} to include $$DOC{ref: ".arg2"}.',
    properties: [{
        name: "arg2",
        label: "Argument",
        swiftType: "AnyObject?",
        javaType: "Object",
        swiftDefaultValue: "TRUE",
        javaDefaultValue: "MLang.TRUE()",
        help: "Sub-expression",
        documentation: "Second argument to the expression.",
        defaultValue: TRUE
    }],
    methods: {
        toSQL: function () {
            return this.arg1.toSQL() + " " + this.label_ + " " + this.arg2.toSQL()
        }, toMQL: function () {
            return this.arg1.toMQL() + " " + this.label_ + " " + this.arg2.toMQL()
        }, toBQL: function () {
            return this.arg1.toBQL() + " " + this.label_ + " " + this.arg2.toBQL()
        }
    }
}), CLASS({
    name: "CountExpr",
    extends: "Expr",
    properties: [{type: "Int", name: "count", defaultValue: 0}, {
        name: "value", getter: function () {
            return this.count
        }
    }],
    methods: {
        reduce: function (other) {
            return CountExpr.create({count: this.count + other.count})
        }, reduceI: function (other) {
            this.count = this.count + other.count
        }, pipe: function (sink) {
            sink.put(this)
        }, put: function (obj) {
            this.count++
        }, remove: function (obj) {
            this.count--
        }, toString: function () {
            return this.count
        }
    }
}), CLASS({
    name: "EqExpr", extends: "BINARY", javaClassImports: ["foam.core2.ExprInterface"], documentation: function () {
    }, methods: [function toSQL() {
        return this.arg1.toSQL() + "=" + this.arg2.toSQL()
    }, function toMQL() {
        return this.arg1.toMQL && this.arg2.toMQL ? this.arg2 === TRUE ? "is:" + this.arg1.toMQL() : "" == this.arg2.f() ? "-has:" + this.arg1.toMQL() : this.arg1.toMQL() + "=" + this.arg2.toMQL() : ""
    }, function toBQL() {
        return this.arg1.toBQL && this.arg2.toBQL ? this.arg2 === TRUE ? this.arg1.toBQL() + ":true" : this.arg1.toBQL() + ":" + this.arg2.toBQL() : ""
    }, function partialEval() {
        var newArg1 = this.arg1.partialEval(), newArg2 = this.arg2.partialEval()
        return ConstantExpr.isInstance(newArg1) && ConstantExpr.isInstance(newArg2) ? compile_(this.f()) : this.arg1 !== newArg1 || this.arg2 !== newArg2 ? EqExpr.create({
            arg1: newArg1,
            arg2: newArg2
        }) : this
    }, {
        name: "f", code: function (obj) {
            var arg1 = this.arg1.f(obj), arg2 = this.arg2.f(obj)
            if (Array.isArray(arg1)) {
                if (!Array.isArray(arg2))return arg1.some(function (arg) {
                    return arg == arg2
                })
                if (arg1.length !== arg2.length)return !1
                for (var i = 0; i < arg1.length; i++)if (arg1[i] != arg2[i])return !1
                return !0
            }
            return arg2 === TRUE ? !!arg1 : arg2 === FALSE ? !arg1 : equals(arg1, arg2)
        }, swiftCode: "return equals(arg1?.f(obj), b: arg2?.f(obj)) as AnyObject?", javaCode: function () {
        }
    }]
}), CLASS({
    name: "ConstantExpr", extends: "UNARY", methods: [function escapeSQLString(str) {
        return "'" + str.replace(/\\/g, "\\\\").replace(/'/g, "\\'") + "'"
    }, function escapeMQLString(str) {
        return str.length > 0 && str.indexOf(" ") == -1 && str.indexOf('"') == -1 && str.indexOf(",") == -1 ? str : '"' + str.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"'
    }, function toSQL() {
        return "string" == typeof this.arg1 ? this.escapeSQLString(this.arg1) : this.arg1.toString()
    }, function toMQL() {
        return "string" == typeof this.arg1 ? this.escapeMQLString(this.arg1) : this.arg1.toMQL ? this.arg1.toMQL() : this.arg1.toString()
    }, function toBQL() {
        return "string" == typeof this.arg1 ? this.escapeMQLString(this.arg1) : this.arg1.toBQL ? this.arg1.toBQL() : this.arg1.toString()
    }, {
        name: "f", code: function (obj) {
            return this.arg1
        }, swiftCode: "return arg1 as AnyObject?", javaCode: "return getArg1();"
    }]
}), CLASS({
    name: "AndExpr",
    extends: "NARY",
    documentation: "N-ary expression which is true only if each of its 0 or more arguments is true. AND() === TRUE",
    methods: [function toSQL() {
        for (var s = "", i = 0; i < this.args.length; i++) {
            var a = this.args[i]
            s += a.toSQL(), i < this.args.length - 1 && (s += " AND ")
        }
        return s
    }, function toMQL() {
        for (var s = "", i = 0; i < this.args.length; i++) {
            var a = this.args[i], sub = a.toMQL()
            OrExpr.isInstance(a) && (sub = "(" + sub + ")"), s += sub, i < this.args.length - 1 && (s += " ")
        }
        return s
    }, function toBQL() {
        for (var s = "", i = 0; i < this.args.length; i++) {
            var a = this.args[i], sub = a.toBQL()
            OrExpr.isInstance(a) && (sub = "(" + sub + ")"), s += sub, i < this.args.length - 1 && (s += " ")
        }
        return s
    }, function collectInputs(terms) {
        for (var i = 0; i < this.args.length; i++)this.args[i].collectInputs(terms)
    }, function minterm(index, term) {
        for (var out = !0, i = 0; i < this.args.length; i++)out = this.args[i].minterm(index, term) && out
        return out
    }, function partialAnd(e1, e2) {
        if (OrExpr.isInstance(e2)) {
            var tmp = e1
            e1 = e2, e2 = tmp
        }
        if (OrExpr.isInstance(e1)) {
            for (var args = [], i = 0; i < e1.args.length; i++)args.push(AND(e2, e1.args[i]))
            return OrExpr.create({args: args}).partialEval()
        }
        if (!BINARY.isInstance(e1))return null
        if (!BINARY.isInstance(e2))return null
        if (e1.arg1 != e2.arg1)return null
        for (var RULES = this.PARTIAL_AND_RULES, i = 0; i < RULES.length; i++) {
            if (e1.model_.name == RULES[i][0] && e2.model_.name == RULES[i][1])return RULES[i][2](e1, e2)
            if (e2.model_.name == RULES[i][0] && e1.model_.name == RULES[i][1])return RULES[i][2](e2, e1)
        }
        return DEBUG && console.log("Unknown partialAnd combination: ", e1.name_, e2.name_), null
    }, function partialEval() {
        for (var newArgs = [], updated = !1, i = 0; i < this.args.length; i++) {
            var a = this.args[i], newA = this.args[i].partialEval()
            if (newA === FALSE)return FALSE
            if (AndExpr.isInstance(newA)) {
                for (var j = 0; j < newA.args.length; j++)newArgs.push(newA.args[j])
                updated = !0
            } else newA === TRUE ? updated = !0 : (newArgs.push(newA), a !== newA && (updated = !0))
        }
        for (var i = 0; i < newArgs.length - 1; i++)for (var j = i + 1; j < newArgs.length; j++) {
            var a = this.partialAnd(newArgs[i], newArgs[j])
            if (a) {
                if (a === FALSE)return FALSE
                newArgs[i] = a, newArgs.splice(j, 1)
            }
        }
        return 0 == newArgs.length ? TRUE : 1 == newArgs.length ? newArgs[0] : updated ? AndExpr.create({args: newArgs}) : this
    }, {
        name: "f", code: function (obj) {
            return this.args.every(function (arg) {
                return arg.f(obj)
            })
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }],
    constants: {
        PARTIAL_AND_RULES: [["EqExpr", "EqExpr", function (e1, e2) {
            return e1.arg1.exclusive ? e1.arg2.f() == e2.arg2.f() ? e1 : FALSE : e1.arg2.f() == e2.arg2.f() ? e1 : null
        }], ["InExpr", "InExpr", function (e1, e2) {
            var i = e1.arg1.exclusive ? e1.arg2.intersection(e2.arg2) : e1.arg2.union(e2.arg2)
            return i.length ? IN(e1.arg1, i) : FALSE
        }], ["InExpr", "ContainedInICExpr", function (e1, e2) {
            if (!e1.arg1.exclusive)return null
            var i = e1.arg2.filter(function (o) {
                return o = o.toUpperCase(), e2.arg2.some(function (o2) {
                    return o.indexOf(o2) != -1
                })
            })
            return i.length ? IN(e1.arg1, i) : FALSE
        }], ["ContainedInICExpr", "ContainedInICExpr", function (e1, e2) {
            console.assert(!1, "AND.partialEval: ContainedInICExpr has no partialEval rule")
        }], ["InExpr", "ContainsICExpr", function (e1, e2) {
            if (e1.arg1.exclusive)var i = e1.arg2.filter(function (o) {
                return o.indexOfIC(e2.arg2.f()) !== -1
            })
        }], ["InExpr", "ContainsExpr", function (e1, e2) {
            if (e1.arg1.exclusive) {
                var i = e1.arg2.filter(function (o) {
                    return o.indexOf(e2.arg2.f()) !== -1
                })
                return i.length ? IN(e1.arg1, i) : FALSE
            }
        }], ["EqExpr", "InExpr", function (e1, e2) {
            if (e1.arg1.exclusive)return e2.arg2.indexOf(e1.arg2.f()) === -1 ? FALSE : e1
        }]]
    }
}), CLASS({
    name: "NeqExpr", extends: "BINARY", abstract: !0, methods: {
        toSQL: function () {
            return this.arg1.toSQL() + "<>" + this.arg2.toSQL()
        }, toMQL: function () {
            return "-" + this.arg1.toMQL() + "=" + this.arg2.toMQL()
        }, toBQL: function () {
            return "-" + this.arg1.toBQL() + ":" + this.arg2.toBQL()
        }, partialEval: function () {
            var newArg1 = this.arg1.partialEval(), newArg2 = this.arg2.partialEval()
            return ConstantExpr.isInstance(newArg1) && ConstantExpr.isInstance(newArg2) ? compile_(this.f()) : this.arg1 !== newArg1 || this.arg2 != newArg2 ? NeqExpr.create({
                arg1: newArg1,
                arg2: newArg2
            }) : this
        }, f: function (obj) {
            var arg1 = this.arg1.f(obj), arg2 = this.arg2.f(obj)
            if (Array.isArray(arg1)) {
                if (!Array.isArray(arg2))return !arg1.some(function (arg) {
                    return arg == arg2
                })
                if (arg1.length !== arg2.length)return !0
                for (var i = 0; i < arg1.length; i++)if (arg1[i] != arg2[i])return !0
                return !1
            }
            return arg2 === TRUE ? !arg1 : arg2 === FALSE ? !!arg1 : !equals(arg1, arg2)
        }
    }
}), CLASS({
    name: "UpperExpr",
    extends: "UNARY",
    properties: [{name: "label_", defaultValue: "UPPER"}],
    methods: [function partialEval() {
        var newArg1 = this.arg1.partialEval()
        if (ConstantExpr.isInstance(newArg1)) {
            var val = newArg1.f()
            if ("string" == typeof val)return compile_(val.toUpperCase())
        } else Array.isArray(newArg1)
        return this
    }, {
        name: "f", code: function (obj) {
            var a = this.arg1.f(obj)
            return Array.isArray(a) ? a.map(function (s) {
                return s.toUpperCase ? s.toUpperCase() : s
            }) : a && a.toUpperCase ? a.toUpperCase() : a
        }
    }, function toMQL() {
        return ConstantExpr.isInstance(this.arg1) && "string" == typeof this.arg1.arg1 ? this.arg1.arg1.toUpperCase() : this.arg1.toMQL()
    }]
})
var Visitor = {
    create: function () {
        return {__proto__: this, stack: []}
    }, push: function (o) {
        this.stack.push(o)
    }, pop: function () {
        return this.stack.pop()
    }, top: function () {
        return this.stack.length && this.stack[this.stack.length - 1]
    }, visit: function (o) {
        return Array.isArray(o) ? this.visitArray(o) : "string" == typeof o ? this.visitString(o) : "number" == typeof o ? this.visitNumber(o) : o instanceof Function ? this.visitFunction(o) : o instanceof Date ? this.visitDate(o) : o === !0 ? this.visitTrue() : o === !1 ? this.visitFalse() : null === o ? this.visitNull() : o instanceof Object ? o.model_ ? this.visitObject(o) : this.visitMap(o) : this.visitUndefined()
    }, visitArray: function (o) {
        for (var len = o.length, i = 0; i < len; i++)this.visitArrayElement(o, i)
        return o
    }, visitArrayElement: function (arr, i) {
        this.visit(arr[i])
    }, visitString: function (o) {
        return o
    }, visitFunction: function (o) {
        return o
    }, visitNumber: function (o) {
        return o
    }, visitDate: function (o) {
        return o
    }, visitObject: function (o) {
        var properties = o.model_.getRuntimeProperties()
        for (var key in properties) {
            var prop = properties[key]
            prop.name in o.instance_ && this.visitProperty(o, prop)
        }
        return o
    }, visitProperty: function (o, prop) {
        this.visit(o[prop.name])
    }, visitMap: function (o) {
        for (var key in o)this.visitMapElement(key, o[key])
        return o
    }, visitMapElement: function (key, value) {
    }, visitTrue: function () {
        return !0
    }, visitFalse: function () {
        return !1
    }, visitNull: function () {
        return null
    }, visitUndefined: function () {
    }
}
CLASS({
    name: "XHR",
    properties: [{type: "Int", name: "delay", defaultValue: 0}, {
        type: "Int",
        name: "retries",
        defaultValueFn: function () {
            return this.authAgent ? 2 : 0
        }
    }, {name: "authAgent"}, {name: "responseType", defaultValue: "text"}, {
        name: "contentType",
        defaultValue: "application/json"
    }],
    methods: {
        init: function (args) {
            this.SUPER(args), this.delay && this.addDecorator(DelayDecorator.create({delayMs: this.delay})), this.authAgent && this.addDecorator(OAuthXhrDecorator.create({authAgent: this.authAgent})), this.retries && this.addDecorator(RetryDecorator.create({maxAttempts: this.retries}))
        }, makeXhr: function () {
            return new XMLHttpRequest
        }, open: function (xhr, method, url) {
            xhr.open(method, url)
        }, setRequestHeader: function (xhr, header, value) {
            xhr.setRequestHeader(header, value)
        }, configure: function (xhr) {
            xhr.responseType = this.responseType, this.contentType && this.setRequestHeader(xhr, "Content-Type", this.contentType)
        }, bindListeners: function (xhr, ret) {
            var self = this
            xhr.onreadystatechange = function () {
                if (4 == xhr.readyState) {
                    if ("json" === self.responseType && "string" == typeof xhr.response)var response = JSON.parse(xhr.response)
                    else response = xhr.response
                    ret(response, xhr, xhr.status >= 200 && xhr.status < 300)
                }
            }
        }, send: function (xhr, data) {
            xhr.send(data)
        }, asend: function (ret, url, data, method) {
            var xhr = this.makeXhr()
            this.open(xhr, method || "GET", url), this.configure(xhr), this.bindListeners(xhr, ret), this.send(xhr, data && data.toJSON ? data.toJSON() : data)
        }
    }
}), CLASS({
    name: "OAuthXhrDecorator", properties: ["authAgent"], methods: {
        configure: function (decorator, delegate, args) {
            var xhr = args[0]
            return xhr.setRequestHeader("Authorization", "Bearer " + decorator.authAgent.accessToken), delegate.apply(this, args)
        }, asend: function (decorator, delegate, args) {
            var ret = args[0]
            return args[0] = function (response, xhr, status) {
                401 === xhr.status ? decorator.authAgent.refresh(function () {
                    ret(response, xhr, status)
                }) : ret(response, xhr, status)
            }, delegate.apply(null, args)
        }
    }
}), CLASS({
    name: "RetryDecorator", properties: [{type: "Int", name: "maxAttempts", defaultValue: 3}], methods: {
        asend: function (decorator, delegate, args) {
            var originalRet = args[0], attempts = 0, self = this, response
            awhile(function () {
                return !0
            }, aseq(function (ret) {
                args[0] = ret, delegate.apply(self, args)
            }, function (ret, response, xhr, status) {
                return xhr.status >= 200 && xhr.status < 300 || 404 === xhr.status || ++attempts >= decorator.maxAttempts ? (finished = !0, originalRet(response, xhr, status), void 0) : (ret(), void 0)
            }))(function () {
            })
        }
    }
}), CLASS({
    name: "DelayDecorator", properties: [{type: "Int", name: "delayMs"}], methods: {
        decorateObject: function (target) {
            var asend = adelay(target.asend.bind(target), this.delayMs)
            target.decorate("asend", function (_, __, args) {
                asend.apply(null, args)
            })
        }
    }
}), CLASS({
    name: "XhrMessenger",
    properties: [{type: "URL", name: "url"}, {type: "String", name: "method", defaultValue: "POST"}],
    methods: {
        put: function (obj, sink) {
            var xhr = this.Y.XHR.create()
            xhr.asend(function (response, xhr) {
                return xhr.status >= 200 && xhr.status < 300 ? (sink && sink.put && sink.put(response), void 0) : (sink && sink.error && sink.error([response, xhr]), void 0)
            }, this.url, obj, this.method)
        }
    }
})
var ObjectToJSON = {
    __proto__: Visitor.create(), visitFunction: function (o) {
        return o.toString()
    }, visitObject: function (o) {
        return this.push({model_: (o.model_.package ? o.model_.package + "." : "") + o.model_.name}), this.__proto__.visitObject.call(this, o), this.pop()
    }, visitProperty: function (o, prop) {
        prop.propertyToJSON(this, this.top(), o)
    }, visitMap: function (o) {
        return this.push({}), Visitor.visitMap.call(this, o), this.pop()
    }, visitMapElement: function (key, value) {
        this.top()[key] = this.visit(value)
    }, visitArray: function (o) {
        return this.push([]), this.__proto__.visitArray.call(this, o), this.pop()
    }, visitArrayElement: function (arr, i) {
        this.top().push(this.visit(arr[i]))
    }
}, JSONToObject = {
    __proto__: ObjectToJSON.create(), visitObject: function (o) {
        var model = X.lookup(o.model_)
        if (!model)throw new Error("Unknown Model: " + o.model_)
        var obj = model.create()
        return Object_forEach(o, function (value, key) {
            "model_" !== key && (obj[key] = this.visit(value))
        }.bind(this)), obj
    }, visitArray: Visitor.visitArray, visitArrayElement: function (arr, i) {
        arr[i] = this.visit(arr[i])
    }
}
CLASS({
    name: "FilteredDAO_",
    extends: "foam.dao.ProxyDAO",
    documentation: "<p>Internal use only.</p>",
    properties: [{
        name: "query",
        swiftType: "ExprProtocol?",
        swiftDefaultValue: "nil",
        javaType: "foam.core2.ExprInterface",
        required: !0
    }],
    methods: [{
        name: "select", code: function (sink, options, opt_X) {
            return this.delegate.select(sink, options ? {
                __proto__: options,
                query: options.query ? AND(this.query, options.query) : this.query
            } : {query: this.query}, opt_X)
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }, {
        name: "removeAll", code: function (sink, options, opt_X) {
            return this.delegate.removeAll(sink, options ? {
                __proto__: options,
                query: options.query ? AND(this.query, options.query) : this.query
            } : {query: this.query}, opt_X)
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }, {
        name: "listen", code: function (sink, options) {
            return this.SUPER(sink, options ? {
                __proto__: options,
                query: options.query ? AND(this.query, options.query) : this.query
            } : {query: this.query})
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }, function toString() {
        return this.delegate + ".where(" + this.query + ")"
    }]
}), CLASS({
    name: "OrderedDAO_", extends: "foam.dao.ProxyDAO", documentation: function () {
    }, properties: [{name: "comparator", required: !0}], methods: {
        select: function (sink, options, opt_X) {
            return options ? options.order || (options = {
                __proto__: options,
                order: this.comparator
            }) : options = {order: this.comparator}, this.delegate.select(sink, options, opt_X)
        }, toString: function () {
            return this.delegate + ".orderBy(" + this.comparator + ")"
        }
    }
}), CLASS({
    name: "LimitedDAO_", extends: "foam.dao.ProxyDAO", documentation: function () {
    }, properties: [{name: "count", required: !0}], methods: {
        select: function (sink, options, opt_X) {
            return options = options ? "limit" in options ? {
                __proto__: options,
                limit: Math.min(this.count, options.limit)
            } : {
                __proto__: options,
                limit: this.count
            } : {limit: this.count}, this.delegate.select(sink, options, opt_X)
        }, toString: function () {
            return this.delegate + ".limit(" + this.count + ")"
        }
    }
}), CLASS({
    name: "SkipDAO_", extends: "foam.dao.ProxyDAO", documentation: function () {
    }, properties: [{
        name: "skip", required: !0, postSet: function () {
            this.skip !== Math.floor(this.skip) && console.warn("skip() called with non-integer value: " + this.skip)
        }
    }], methods: {
        select: function (sink, options, opt_X) {
            return options = options ? {
                __proto__: options,
                skip: this.skip
            } : {skip: this.skip}, this.delegate.select(sink, options, opt_X)
        }, toString: function () {
            return this.delegate + ".skip(" + this.skip + ")"
        }
    }
}), CLASS({
    name: "RelationshipDAO",
    extends: "FilteredDAO_",
    documentation: "Adapts a DAO based on a Relationship.",
    properties: [{name: "relatedProperty", required: !0}, {name: "relativeID", required: !0}, {
        name: "query",
        lazyFactory: function () {
            return AND(NEQ(this.relatedProperty, ""), EQ(this.relatedProperty, this.relativeID))
        }
    }],
    methods: [function put(obj, sink) {
        obj[this.relatedProperty.name] = this.relativeID, this.SUPER(obj, sink)
    }]
}), CLASS({
    name: "AbstractDAO",
    javaClassImports: ["foam.dao.nativesupport.ClosureSink", "foam.dao.nativesupport.DAOQueryOptions", "foam.dao.nativesupport.PredicatedSink", "foam.dao.nativesupport.Sink", "java.util.concurrent.CompletableFuture"],
    documentation: function () {
    },
    properties: [{
        name: "daoListeners_",
        transient: !0,
        hidden: !0,
        factory: function () {
            return []
        },
        swiftType: "NSMutableArray",
        swiftFactory: "return NSMutableArray()",
        javaType: "java.util.List<foam.dao.nativesupport.Sink>",
        javaFactory: "return new java.util.ArrayList<foam.dao.nativesupport.Sink>();",
        compareProperty: function () {
            return 0
        }
    }],
    methods: [function update(expr) {
        return this.select(UPDATE(expr, this))
    }, {
        name: "select",
        code: function (sink, options) {
        },
        args: [{
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink"
        }, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftReturnType: "Future",
        swiftCode: "return Future().set(sink)",
        javaReturnType: "CompletableFuture<foam.dao.nativesupport.Sink>",
        javaCode: "return null;"
    }, {
        name: "put",
        args: [{name: "obj", swiftType: "FObject", javaType: "FObject"}, {
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink",
            javaDefaultValue: "new foam.dao.nativesupport.ArraySink()"
        }],
        swiftCode: "// Override",
        javaCode: "// Override"
    }, {
        name: "remove",
        code: function (query, sink) {
        },
        args: [{name: "obj", swiftType: "FObject", javaType: "FObject"}, {
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink",
            javaDefaultValue: "new foam.dao.nativesupport.ArraySink()"
        }],
        swiftCode: "// Override",
        javaCode: "// Override"
    }, {
        name: "find",
        code: function (id, sink) {
        },
        args: [{name: "id", type: "String"}, {
            name: "sink",
            swiftType: "Sink",
            javaType: "foam.dao.nativesupport.Sink"
        }],
        swiftCode: "// Override",
        javaCode: "// Override"
    }, {
        name: "pipe",
        code: function (sink, options) {
            sink = this.decorateSink_(sink, options, !0)
            var fc = this.createFlowControl_(), self = this
            this.select({
                put: function () {
                    sink.put && sink.put.apply(sink, arguments)
                }, remove: function () {
                    sink.remove && sink.remove.apply(sink, arguments)
                }, error: function () {
                    sink.error && sink.error.apply(sink, arguments)
                }, eof: function () {
                    fc.stopped ? sink.eof && sink.eof() : self.listen(sink, options)
                }
            }, options, fc)
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "decorateSink_",
        code: function (sink, options, isListener, disableLimit) {
            return options && (disableLimit || (options.limit && (sink = limitedSink(options.limit, sink)), options.skip && (sink = skipSink(options.skip, sink))), options.order && !isListener && (sink = orderedSink(options.order, sink)), options.query && (sink = predicatedSink(options.query.partialEval ? options.query.partialEval() : options.query, sink))), sink
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}, {
            name: "options",
            swiftType: "DAOQueryOptions",
            javaType: "foam.dao.nativesupport.DAOQueryOptions"
        }],
        swiftReturnType: "Sink",
        javaReturnType: "foam.dao.nativesupport.Sink",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, function createFlowControl_() {
        return {
            stop: function () {
                this.stopped = !0
            }, error: function (e) {
                this.errorEvt = e
            }
        }
    }, {
        name: "where",
        code: function (query) {
            return (this.Y || X).lookup("FilteredDAO_").create({query: query, delegate: this})
        },
        args: [{name: "query", swiftType: "ExprProtocol", javaType: "foam.core2.ExprInterface"}],
        swiftReturnType: "AbstractDAO",
        javaReturnType: "AbstractDAO",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, function limit(count) {
        return (this.Y || X).lookup("LimitedDAO_").create({count: count, delegate: this})
    }, function skip(skip) {
        return (this.Y || X).lookup("SkipDAO_").create({skip: skip, delegate: this})
    }, function orderBy() {
        return (this.Y || X).lookup("OrderedDAO_").create({
            comparator: 1 == arguments.length ? arguments[0] : argsToArray(arguments),
            delegate: this
        })
    }, {
        name: "listen",
        code: function (sink, options) {
            this.daoListeners_.push(this.decorateSink_(sink, options, !0))
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftCode: "self.daoListeners_.add(self.decorateSink_(sink, options: options))",
        javaCode: "getDaoListeners_().add(decorateSink_(sink, options));"
    }, {
        name: "unlisten",
        code: function unlisten(sink) {
            for (var ls = this.daoListeners_, i = 0; i < ls.length; i++)if (ls[i].$UID === sink.$UID)return ls.splice(i, 1), !0
            DEBUG && console.warn("Phantom DAO unlisten: ", this, sink)
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}],
        returnType: "Boolean",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "removeAll",
        code: function (sink, options) {
            var self = this, future = afuture()
            return this.select({
                put: function (obj) {
                    self.remove(obj, {remove: sink && sink.remove})
                }
            })(function () {
                sink && sink.eof(), future.set()
            }), future.get
        },
        args: [{
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink",
            javaDefaultValue: "new foam.dao.nativesupport.ArraySink()"
        }, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftReturnType: "Future",
        javaReturnType: "java.util.concurrent.CompletableFuture",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "notify_",
        code: function (fName, args) {
            for (var i = 0; i < this.daoListeners_.length; i++) {
                var l = this.daoListeners_[i], fn = l[fName]
                if (fn) {
                    args[2] = {
                        stop: function (fn, l) {
                            return function () {
                                fn(l)
                            }
                        }(this.unlisten.bind(this), l), error: function (e) {
                        }
                    }
                    try {
                        fn.apply(l, args)
                    } catch (err) {
                        err !== this.UNSUBSCRIBE_EXCEPTION && (console.error("Error delivering event (removing listener): ", fName, err), DEBUG && console.error(err.stack)), this.unlisten(l)
                    }
                }
            }
        },
        args: [{name: "fName", type: "String"}, {
            name: "fObj",
            swiftType: "FObject? = nil",
            javaType: "FObject",
            javaDefaultValue: "null"
        }],
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }]
}), Function.prototype.put = function () {
    this.apply(this, arguments)
}, Function.prototype.remove = function () {
    this.apply(this, arguments)
}, Function.prototype.reset = function () {
    this.call(this)
}, function () {
    var pmap = {}
    for (var key in AbstractDAO.methods)pmap[AbstractDAO.methods[key].name] = AbstractDAO.methods[key].code
    for (var key in pmap)Object.defineProperty(Array.prototype, key, {value: pmap[key], configurable: !0, writable: !0})
}(), defineLazyProperty(Array.prototype, "daoListeners_", function () {
    return {value: [], configurable: !0}
})
var ArraySink = {
    __proto__: Array.prototype, put: function (obj, sink) {
        this.push(obj), this.notify_("put", arguments), sink && sink.put && sink.put(obj)
    }, clone: function () {
        return this.slice().sink
    }, deepClone: function () {
        for (var r = new Array(this.length), i = 0; i < this.length; i++)r[i] = this[i].deepClone()
        return r.sink
    }, exprClone: function () {
        return this.deepClone()
    }
}
MODEL0({
    extendsProto: "Array", properties: [{
        name: "dao", getter: function () {
            return this.__proto__ = Array.prototype, this
        }
    }, {
        name: "sink", getter: function () {
            return this.__proto__ = ArraySink, this
        }
    }], methods: {
        listen: AbstractDAO.getPrototype().listen,
        unlisten: AbstractDAO.getPrototype().unlisten,
        notify_: AbstractDAO.getPrototype().notify_,
        put: function (obj, sink) {
            for (var idx = 0; idx < this.length; idx++)if (this[idx].id === obj.id)return this[idx] = obj, sink && sink.put && sink.put(obj), this.notify_("put", arguments), void 0
            this.push(obj), this.notify_("put", arguments), sink && sink.put && sink.put(obj)
        },
        find: function (query, sink) {
            if (query.f) {
                for (var idx = 0; idx < this.length; idx++)if (query.f(this[idx]))return sink && sink.put && sink.put(this[idx]), void 0
            } else for (var idx = 0; idx < this.length; idx++)if (this[idx].id === query)return sink && sink.put && sink.put(this[idx]), void 0
            sink && sink.error && sink.error("find", query)
        },
        remove: function (obj, sink) {
            if (!obj)return sink && sink.error && sink.error("missing key"), void 0
            for (var objId = obj.id, id = void 0 !== objId && "" !== objId ? objId : obj, idx = 0; idx < this.length; idx++)if (this[idx].id === id) {
                var rem = this.splice(idx, 1)[0]
                return this.notify_("remove", [rem]), sink && sink.remove && sink.remove(rem), void 0
            }
            sink && sink.error && sink.error("remove", obj)
        },
        removeAll: function (sink, options) {
            options || (options = {}), options.query || (options.query = {
                f: function () {
                    return !0
                }
            })
            for (var i = 0; i < this.length; i++) {
                var obj = this[i]
                if (options.query.f(obj)) {
                    var rem = this.splice(i, 1)[0]
                    this.notify_("remove", [rem]), sink && sink.remove && sink.remove(rem), i--
                }
            }
            return sink && sink.eof && sink.eof(), anop()
        },
        select: function (sink, options) {
            sink = sink || [].sink
            var hasQuery = options && (options.query || options.order), originalsink = sink
            if (sink = this.decorateSink_(sink, options, !1, !hasQuery), !hasQuery && GLOBAL.CountExpr && CountExpr.isInstance(sink))return sink.count = this.length, aconstant(originalsink)
            for (var fc = this.createFlowControl_(), start = Math.max(0, hasQuery ? 0 : options && options.skip || 0), end = hasQuery ? this.length : Math.min(this.length, start + (options && options.limit || this.length)), i = start; i < end && (sink.put(this[i], null, fc), !fc.stopped); i++)if (fc.errorEvt)return sink.error && sink.error(fc.errorEvt), aconstant(originalsink, fc.errorEvt)
            return sink.eof && sink.eof(), aconstant(originalsink)
        }
    }
})
var NOT_FOUND = {
    cost: 0, execute: function (_, sink, __) {
        return anop
    }, toString: function () {
        return "no-match(cost=0)"
    }
}, NO_PLAN = {
    cost: Number.MAX_VALUE, execute: function () {
        return anop
    }, toString: function () {
        return "no-plan"
    }
}, ValueIndex = {
    put: function (s, newValue) {
        return newValue
    }, remove: function () {
    }, plan: function () {
        var plan = {
            cost: 1, execute: function (s, sink) {
                return sink.put(s), anop
            }, toString: function () {
                return "unique"
            }
        }
        return function () {
            return plan
        }
    }(), get: function (value, key) {
        return value
    }, select: function (value, sink, options) {
        if (options) {
            if (options.query && !options.query.f(value))return
            if ("skip" in options && options.skip-- > 0)return
            if ("limit" in options && options.limit-- <= 0)return
        }
        sink.put(value)
    }, selectReverse: function (value, sink, options) {
        this.select(value, sink, options)
    }, size: function (obj) {
        return 1
    }, toString: function () {
        return "value"
    }
}, KEY = 0, VALUE = 1, SIZE = 2, LEVEL = 3, LEFT = 4, RIGHT = 5, TreeIndex = {
    create: function (prop, tail) {
        return tail = tail || ValueIndex, {__proto__: this, prop: prop, tail: tail, selectCount: 0}
    }, bulkLoad: function (a) {
        if (this.tail === ValueIndex)return a.sort(toCompare(this.prop)), this.bulkLoad_(a, 0, a.length - 1)
        for (var s = void 0, i = 0; i < a.length; i++)s = this.put(s, a[i])
        return s
    }, bulkLoad_: function (a, start, end) {
        if (!(end < start)) {
            var m = start + Math.floor((end - start + 1) / 2), tree = this.put(void 0, a[m])
            return tree[LEFT] = this.bulkLoad_(a, start, m - 1), tree[RIGHT] = this.bulkLoad_(a, m + 1, end), tree[SIZE] += this.size(tree[LEFT]) + this.size(tree[RIGHT]), tree
        }
    }, dedup: function (obj, value) {
        obj[this.prop.name] = value
    }, maybeClone: function (s) {
        return s && this.selectCount > 0 ? s.clone() : s
    }, put: function (s, newValue) {
        return this.putKeyValue(s, this.prop.f(newValue), newValue)
    }, putKeyValue: function (s, key, value) {
        if (!s)return [key, this.tail.put(null, value), 1, 1]
        s = this.maybeClone(s)
        var r = this.compare(s[KEY], key)
        if (0 === r)this.dedup(value, s[KEY]), s[SIZE] -= this.tail.size(s[VALUE]), s[VALUE] = this.tail.put(s[VALUE], value), s[SIZE] += this.tail.size(s[VALUE])
        else {
            var side = r > 0 ? LEFT : RIGHT
            s[side] && (s[SIZE] -= s[side][SIZE]), s[side] = this.putKeyValue(s[side], key, value), s[SIZE] += s[side][SIZE]
        }
        return this.split(this.skew(s))
    }, skew: function (s) {
        if (s && s[LEFT] && s[LEFT][LEVEL] === s[LEVEL]) {
            var l = this.maybeClone(s[LEFT])
            return s[LEFT] = l[RIGHT], l[RIGHT] = s, this.updateSize(s), this.updateSize(l), l
        }
        return s
    }, updateSize: function (s) {
        s[SIZE] = this.size(s[LEFT]) + this.size(s[RIGHT]) + this.tail.size(s[VALUE])
    }, split: function (s) {
        if (s && s[RIGHT] && s[RIGHT][RIGHT] && s[LEVEL] === s[RIGHT][RIGHT][LEVEL]) {
            var r = this.maybeClone(s[RIGHT])
            return s[RIGHT] = r[LEFT], r[LEFT] = s, r[LEVEL]++, this.updateSize(s), this.updateSize(r), r
        }
        return s
    }, remove: function (s, value) {
        return this.removeKeyValue(s, this.prop.f(value), value)
    }, removeKeyValue: function (s, key, value) {
        if (!s)return s
        s = this.maybeClone(s)
        var r = this.compare(s[KEY], key)
        if (0 === r) {
            if (s[SIZE] -= this.tail.size(s[VALUE]), s[VALUE] = this.tail.remove(s[VALUE], value), s[VALUE])return s[SIZE] += this.tail.size(s[VALUE]), s
            if (!s[LEFT] && !s[RIGHT])return
            var side = s[LEFT] ? LEFT : RIGHT, l = side === LEFT ? this.predecessor(s) : this.successor(s)
            s[KEY] = l[KEY], s[VALUE] = l[VALUE], s[side] = this.removeNode(s[side], l[KEY])
        } else {
            var side = r > 0 ? LEFT : RIGHT
            s[SIZE] -= this.size(s[side]), s[side] = this.removeKeyValue(s[side], key, value), s[SIZE] += this.size(s[side])
        }
        return s = this.skew(this.decreaseLevel(s)), s[RIGHT] && (s[RIGHT] = this.skew(this.maybeClone(s[RIGHT])), s[RIGHT][RIGHT] && (s[RIGHT][RIGHT] = this.skew(this.maybeClone(s[RIGHT][RIGHT])))), s = this.split(s), s[RIGHT] = this.split(this.maybeClone(s[RIGHT])), s
    }, removeNode: function (s, key) {
        if (!s)return s
        s = this.maybeClone(s)
        var r = this.compare(s[KEY], key)
        if (0 === r)return s[LEFT] ? s[LEFT] : s[RIGHT]
        var side = r > 0 ? LEFT : RIGHT
        return s[SIZE] -= this.size(s[side]), s[side] = this.removeNode(s[side], key), s[SIZE] += this.size(s[side]), s
    }, predecessor: function (s) {
        if (!s[LEFT])return s
        for (s = s[LEFT]; s[RIGHT]; s = s[RIGHT]);
        return s
    }, successor: function (s) {
        if (!s[RIGHT])return s
        for (s = s[RIGHT]; s[LEFT]; s = s[LEFT]);
        return s
    }, decreaseLevel: function (s) {
        var expectedLevel = Math.min(s[LEFT] ? s[LEFT][LEVEL] : 0, s[RIGHT] ? s[RIGHT][LEVEL] : 0) + 1
        return expectedLevel < s[LEVEL] && (s[LEVEL] = expectedLevel, s[RIGHT] && expectedLevel < s[RIGHT][LEVEL] && (s[RIGHT] = this.maybeClone(s[RIGHT]), s[RIGHT][LEVEL] = expectedLevel)), s
    }, get: function (s, key) {
        if (s) {
            var r = this.compare(s[KEY], key)
            return 0 === r ? s[VALUE] : this.get(r > 0 ? s[LEFT] : s[RIGHT], key)
        }
    }, select: function (s, sink, options) {
        if (s) {
            if (options) {
                if ("limit" in options && options.limit <= 0)return
                var size = this.size(s)
                if (options.skip >= size && !options.query)return options.skip -= size, void 0
            }
            this.select(s[LEFT], sink, options), this.tail.select(s[VALUE], sink, options), this.select(s[RIGHT], sink, options)
        }
    }, selectReverse: function (s, sink, options) {
        if (s) {
            if (options) {
                if ("limit" in options && options.limit <= 0)return
                var size = this.size(s)
                if (options.skip >= size && !options.query)return console.log("reverse skipping: ", s[KEY]), options.skip -= size, void 0
            }
            this.selectReverse(s[RIGHT], sink, options), this.tail.selectReverse(s[VALUE], sink, options), this.selectReverse(s[LEFT], sink, options)
        }
    }, gt: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r < 0) {
            var l = this.gt(s[LEFT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[LEFT]) + this.size(l), s[LEVEL], l, s[RIGHT]]
        }
        return r > 0 ? this.gt(s[RIGHT], key) : s[RIGHT]
    }, gte: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r < 0) {
            var l = this.gte(s[LEFT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[LEFT]) + this.size(l), s[LEVEL], l, s[RIGHT]]
        }
        return r > 0 ? this.gte(s[RIGHT], key) : [s[KEY], s[VALUE], this.size(s) - this.size(s[LEFT]), s[LEVEL], null, s[RIGHT]]
    }, lt: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r > 0) {
            var r = this.lt(s[RIGHT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[RIGHT]) + this.size(r), s[LEVEL], s[LEFT], r]
        }
        return r < 0 ? this.lt(s[LEFT], key) : s[LEFT]
    }, lte: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r > 0) {
            var r = this.lte(s[RIGHT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[RIGHT]) + this.size(r), s[LEVEL], s[LEFT], r]
        }
        return r < 0 ? this.lte(s[RIGHT], key) : [s[KEY], s[VALUE], this.size(s) - this.size(s[RIGHT]), s[LEVEL], s[LEFT], null]
    }, size: function (s) {
        return s ? s[SIZE] : 0
    }, compare: function (o1, o2) {
        return this.prop.compareProperty(o1, o2)
    }, plan: function (s, sink, options) {
        options = this.cloneOptions(options)
        var query = options.query
        if (query === FALSE)return NOT_FOUND
        if (!query && CountExpr.isInstance(sink)) {
            var count = this.size(s)
            return {
                cost: 0, execute: function (unused, sink, options) {
                    return sink.count += count, anop
                }, toString: function () {
                    return "short-circuit-count(" + count + ")"
                }
            }
        }
        var prop = this.prop, isExprMatch = function (model) {
            if (model && query) {
                if (model.isInstance(query) && query.arg1 === prop) {
                    var arg2 = query.arg2
                    return options.query = query = void 0, arg2
                }
                if (AndExpr.isInstance(query))for (var i = 0; i < query.args.length; i++) {
                    var q = query.args[i]
                    if (model.isInstance(q) && q.arg1 === prop)return query = query.clone(), query.args[i] = TRUE, options.query = query = query.partialEval(), query === TRUE && (options.query = query = void 0), q.arg2
                }
            }
        }, index = this, arg2 = isExprMatch(GLOBAL.InExpr)
        if (arg2 && Math.log(this.size(s)) / Math.log(2) * arg2.length < this.size(s)) {
            for (var keys = arg2, subPlans = [], results = [], cost = 1, i = 0; i < keys.length; i++) {
                var result = this.get(s, keys[i])
                if (result) {
                    var subPlan = this.tail.plan(result, sink, options)
                    cost += subPlan.cost, subPlans.push(subPlan), results.push(result)
                }
            }
            return 0 == subPlans.length ? NOT_FOUND : {
                cost: 1 + cost, execute: function (s2, sink, _) {
                    for (var pars = [], i = 0; i < subPlans.length; i++)pars.push(subPlans[i].execute(results[i], sink, options))
                    return apar.apply(null, pars)
                }, toString: function () {
                    return "IN(key=" + prop.name + ", size=" + results.length + ")"
                }
            }
        }
        if (arg2 = isExprMatch(GLOBAL.EqExpr), void 0 != arg2) {
            var key = arg2.f(), result = this.get(s, key)
            if (!result)return NOT_FOUND
            var subPlan = this.tail.plan(result, sink, options)
            return {
                cost: 1 + subPlan.cost, execute: function (s2, sink, _) {
                    return subPlan.execute(result, sink, options)
                }, toString: function () {
                    return "lookup(key=" + prop.name + ", cost=" + this.cost + (query && query.toSQL ? ", query: " + query.toSQL() : "") + ") " + subPlan.toString()
                }
            }
        }
        arg2 = isExprMatch(GLOBAL.GtExpr), arg2 && (s = this.gt(s, arg2.f())), arg2 = isExprMatch(GLOBAL.GteExpr), arg2 && (s = this.gte(s, arg2.f())), arg2 = isExprMatch(GLOBAL.LtExpr), arg2 && (s = this.lt(s, arg2.f())), arg2 = isExprMatch(GLOBAL.LteExpr), arg2 && (s = this.lte(s, arg2.f()))
        var cost = this.size(s), sortRequired = !1, reverseSort = !1
        return options.order && (options.order === prop || (GLOBAL.DescExpr && DescExpr.isInstance(options.order) && options.order.arg1 === prop ? reverseSort = !0 : (sortRequired = !0, 0 != cost && (cost *= Math.log(cost) / Math.log(2))))), sortRequired || (options.skip && (cost -= options.skip), options.limit && (cost = Math.min(cost, options.limit))), {
            cost: cost, execute: function () {
                if (sortRequired) {
                    var a = [].sink
                    index.selectCount++, index.select(s, a, {query: options.query}), index.selectCount--, a.sort(toCompare(options.order))
                    var skip = options.skip || 0, limit = Number.isFinite(options.limit) ? options.limit : a.length
                    limit += skip, limit = Math.min(a.length, limit)
                    for (var i = skip; i < limit; i++)sink.put(a[i])
                } else index.selectCount++, reverseSort ? index.selectReverse(s, sink, options) : index.select(s, sink, options), index.selectCount--
                return anop
            }, toString: function () {
                return "scan(key=" + prop.name + ", cost=" + this.cost + (query && query.toSQL ? ", query: " + query.toSQL() : "") + ")"
            }
        }
    }, cloneOptions: function (options) {
        var c = {}
        return options && (options.query && (c.query = options.query), options.skip && (c.skip = options.skip), options.order && (c.order = options.order), "limit" in options && (c.limit = options.limit)), c
    }, toString: function () {
        return "TreeIndex(" + this.prop.name + ", " + this.tail + ")"
    }
}, CITreeIndex = {
    __proto__: TreeIndex, create: function (prop, tail) {
        return tail = tail || ValueIndex, {__proto__: this, prop: prop, tail: tail}
    }, put: function (s, newValue) {
        return this.putKeyValue(s, this.prop.f(newValue).toLowerCase(), newValue)
    }, remove: function (s, value) {
        return this.removeKeyValue(s, this.prop.f(value).toLowerCase(), value)
    }
}, SetIndex = {
    __proto__: TreeIndex, create: function (prop, tail) {
        return tail = tail || ValueIndex, {__proto__: this, prop: prop, tail: tail}
    }, dedup: function (obj, value) {
    }, put: function (s, newValue) {
        var a = this.prop.f(newValue)
        if (a.length)for (var i = 0; i < a.length; i++)s = this.putKeyValue(s, a[i], newValue)
        else s = this.putKeyValue(s, "", newValue)
        return s
    }, remove: function (s, value) {
        var a = this.prop.f(value)
        if (a.length)for (var i = 0; i < a.length; i++)s = this.removeKeyValue(s, a[i], value)
        else s = this.removeKeyValue(s, "", value)
        return s
    }
}, PositionQuery = {
    create: function (args) {
        return {__proto__: this, skip: args.skip, limit: args.limit, s: args.s}
    }, reduce: function (other) {
        var otherFinish = other.skip + other.limit, myFinish = this.skip + this.limit
        return other.skip > myFinish ? null : other.skip >= this.skip ? PositionQuery.create({
            skip: this.skip,
            limit: Math.max(myFinish, otherFinish) - this.skip,
            s: this.s
        }) : other.reduce(this)
    }, equals: function (other) {
        return this.skip === other.skip && this.limit === other.limit
    }
}, AutoPositionIndex = {
    create: function (factory, mdao, networkdao, maxage) {
        var obj = {
            __proto__: this,
            factory: factory,
            maxage: maxage,
            dao: mdao,
            networkdao: networkdao,
            sets: [],
            alt: AltIndex.create()
        }
        return obj
    }, put: function (s, value) {
        return this.alt.put(s, value)
    }, remove: function (s, value) {
        return this.alt.remove(s, value)
    }, bulkLoad: function (a) {
        return []
    }, addIndex: function (s, index) {
        return this
    }, addPosIndex: function (s, options) {
        var index = PositionIndex.create(options && options.order, options && options.query, this.factory, this.dao, this.networkdao, this.queue, this.maxage)
        this.alt.delegates.push(index), s.push(index.bulkLoad([]))
    }, hasIndex: function (options) {
        for (var i = 0; i < this.sets.length; i++) {
            var set = this.sets[i]
            if (set[0].equals(options && options.query || "") && set[1].equals(options && options.order || ""))return !0
        }
        return !1
    }, plan: function (s, sink, options) {
        var subPlan = this.alt.plan(s, sink, options)
        return subPlan != NO_PLAN ? subPlan : options && null != options.skip && null != options.limit || CountExpr.isInstance(sink) ? this.hasIndex(options) ? NO_PLAN : (this.sets.push([options && options.query || "", options && options.order || ""]), this.addPosIndex(s, options), this.alt.plan(s, sink, options)) : NO_PLAN
    }
}, PositionIndex = {
    create: function (order, query, factory, dao, networkdao, queue, maxage) {
        var obj = {
            __proto__: this,
            order: order || "",
            query: query || "",
            factory: factory,
            dao: dao,
            networkdao: networkdao.where(query).orderBy(order),
            maxage: maxage,
            queue: arequestqueue(function (ret, request) {
                var s = request.s
                obj.networkdao.skip(request.skip).limit(request.limit).select()(function (objs) {
                    for (var now = Date.now(), i = 0; i < objs.length; i++)s[request.skip + i] = {
                        obj: objs[i].id,
                        timestamp: now
                    }, s.feedback = objs[i].id, obj.dao.put(objs[i]), s.feedback = null
                    ret()
                })
            }, void 0, 1)
        }
        return obj
    }, put: function (s, newValue) {
        if (s.feedback === newValue.id)return s
        if (this.query && !this.query.f(newValue))return s
        for (var compare = toCompare(this.order), i = 0; i < s.length; i++) {
            var entry = s[i]
            if (entry) {
                if (this.dao.find(entry.obj, {
                        put: function (o) {
                            entry = o
                        }
                    }), entry.id === newValue.id)break
                if (compare(entry, newValue) > 0) {
                    for (var j = s.length; j > i; j--)s[j] = s[j - 1];
                    (0 == i || s[i - 1]) && (s[i] = {obj: newValue.id, timestamp: Date.now()})
                    break
                }
            }
        }
        return s
    }, remove: function (s, obj) {
        if (s.feedback === obj.id)return s
        for (var i = 0; i < s.length; i++)if (s[i] && s[i].obj === obj.id) {
            for (var j = i; j < s.length - 1; j++)s[j] = s[j + 1]
            break
        }
        return s
    }, bulkLoad: function (a) {
        return []
    }, plan: function (s, sink, options) {
        var order = options && options.order || "", query = options && options.query || "", skip = options && options.skip, limit = options && options.limit, self = this
        if (!order.equals(this.order) || !query.equals(this.query))return NO_PLAN
        if (CountExpr.isInstance(sink))return {
            cost: 0, execute: function (s, sink, options) {
                return s.count || (s.count = amemo(function (ret) {
                    self.networkdao.select(COUNT())(function (c) {
                        ret(c)
                    })
                }, self.maxage)), function (ret, count) {
                    sink.copyFrom(count), ret()
                }.ao(s.count)
            }, toString: function () {
                return "position-index(cost=" + this.cost + ", count)"
            }
        }
        if (void 0 == skip || void 0 == limit)return NO_PLAN
        var threshold = Date.now() - this.maxage
        return {
            cost: 0, toString: function () {
                return "position-index(cost=" + this.cost + ")"
            }, execute: function (s, sink, options) {
                for (var objs = [], min, max, i = 0; i < limit; i++) {
                    var o = s[i + skip];
                    (!o || o.timestamp < threshold) && (void 0 == min && (min = i + skip), max = i + skip), o ? self.dao.find(o.obj, {
                        put: function (obj) {
                            objs[i] = obj
                        }
                    }) : objs[i] = self.factory(), !objs[i]
                }
                void 0 != min && self.queue(PositionQuery.create({skip: min, limit: max - min + 1, s: s}))
                for (var i = 0; i < objs.length; i++)sink.put(objs[i])
                return anop
            }
        }
    }
}, AltIndex = {
    GOOD_ENOUGH_PLAN: 10, create: function () {
        return {__proto__: this, delegates: argsToArray(arguments)}
    }, addIndex: function (s, index) {
        var a = [].sink
        return this.plan(s, a).execute(s, a), s.push(index.bulkLoad(a)), this.delegates.push(index), this
    }, bulkLoad: function (a) {
        for (var root = [].sink, i = 0; i < this.delegates.length; i++)root[i] = this.delegates[i].bulkLoad(a)
        return root
    }, get: function (s, key) {
        return this.delegates[0].get(s[0], key)
    }, put: function (s, newValue) {
        s = s || [].sink
        for (var i = 0; i < this.delegates.length; i++)s[i] = this.delegates[i].put(s[i], newValue)
        return s
    }, remove: function (s, obj) {
        s = s || [].sink
        for (var i = 0; i < this.delegates.length; i++)s[i] = this.delegates[i].remove(s[i], obj)
        return s
    }, plan: function (s, sink, options) {
        for (var bestPlan, bestPlanI = 0, i = 0; i < this.delegates.length; i++) {
            var plan = this.delegates[i].plan(s[i], sink, options)
            if (plan.cost <= AltIndex.GOOD_ENOUGH_PLAN) {
                bestPlanI = i, bestPlan = plan
                break
            }
            (!bestPlan || plan.cost < bestPlan.cost) && (bestPlanI = i, bestPlan = plan)
        }
        return void 0 == bestPlan || bestPlan == NO_PLAN ? NO_PLAN : {
            __proto__: bestPlan,
            execute: function (unused, sink, options) {
                return bestPlan.execute(s[bestPlanI], sink, options)
            }
        }
    }, size: function (obj) {
        return this.delegates[0].size(obj[0])
    }, toString: function () {
        return "Alt(" + this.delegates.join(",") + ")"
    }
}, mLangIndex = {
    create: function (mlang) {
        return {
            __proto__: this, mlang: mlang, PLAN: {
                cost: 0, execute: function (s, sink, options) {
                    return sink.copyFrom(s), anop
                }, toString: function () {
                    return "mLangIndex(" + this.s + ")"
                }
            }
        }
    }, bulkLoad: function (a) {
        return a.select(this.mlang), this.mlang
    }, put: function (s, newValue) {
        return s = s || this.mlang.clone(), s.put(newValue), s
    }, remove: function (s, obj) {
        return s = s || this.mlang.clone(), s.remove && s.remove(obj), s
    }, size: function (s) {
        return Number.MAX_VALUE
    }, plan: function (s, sink, options) {
        return options && options.query ? NO_PLAN : sink.model_ && sink.model_.isInstance(s) && s.arg1 === sink.arg1 ? (this.PLAN.s = s, this.PLAN) : NO_PLAN
    }, toString: function () {
        return "mLangIndex(" + this.mlang + ")"
    }
}, AutoIndex = {
    create: function (mdao) {
        return {__proto__: this, properties: {id: !0}, mdao: mdao}
    }, put: function (s, newValue) {
        return s
    }, remove: function (s, obj) {
        return s
    }, bulkLoad: function (a) {
        return "auto"
    }, addIndex: function (prop) {
        GLOBAL.DescExpr && DescExpr.isInstance(prop) && (prop = prop.arg1), console.log("Adding AutoIndex : ", prop.id), this.properties[prop.name] = !0, this.mdao.addIndex(prop)
    }, plan: function (s, sink, options) {
        return options && (options.order && Property.isInstance(options.order) && !this.properties[options.order.name] ? this.addIndex(options.order) : options.query), NO_PLAN
    }, toString: function () {
        return "AutoIndex()"
    }
}, MDAO = Model.create({
    extends: "AbstractDAO",
    name: "MDAO",
    label: "Indexed DAO",
    properties: [{name: "model", type: "Model", required: !0}, {type: "Boolean", name: "autoIndex", defaultValue: !1}],
    methods: {
        init: function () {
            this.SUPER(), this.map = {}, this.index = TreeIndex.create(this.model.getProperty(this.model.ids[0])), this.autoIndex && this.addRawIndex(AutoIndex.create(this))
        }, addIndex: function () {
            for (var props = argsToArray(arguments), i = 0; i < this.model.ids.length; i++)if (props.push(this.model.getProperty(this.model.ids[i])), !props[props.length - 1])throw"Undefined index property"
            return this.addUniqueIndex.apply(this, props)
        }, addUniqueIndex: function () {
            for (var index = ValueIndex, i = arguments.length - 1; i >= 0; i--) {
                var prop = arguments[i], proto = "Array[]" == prop.type ? SetIndex : TreeIndex
                index = proto.create(prop, index)
            }
            return this.addRawIndex(index)
        }, addRawIndex: function (index) {
            return this.index.delegates || (this.index = AltIndex.create(this.index), this.root = [this.root]), this.index.addIndex(this.root, index), this
        }, bulkLoad: function (dao, sink) {
            var self = this
            dao.select({
                __proto__: [].sink, eof: function () {
                    self.root = self.index.bulkLoad(this), sink && sink.eof && sink.eof()
                }
            })
        }, put: function (obj, sink) {
            var oldValue = this.map[obj.id]
            oldValue ? this.root = this.index.put(this.index.remove(this.root, oldValue), obj) : this.root = this.index.put(this.root, obj), this.map[obj.id] = obj, this.notify_("put", [obj]), sink && sink.put && sink.put(obj)
        }, findObj_: function (key, sink) {
            var obj = this.map[key]
            obj ? sink.put && sink.put(obj) : sink.error && sink.error("find", key)
        }, find: function (key, sink) {
            if (void 0 == key)return sink && sink.error && sink.error("missing key"), void 0
            if (!key.f)return this.findObj_(key, sink), void 0
            var found = !1
            this.where(key).limit(1).select({
                put: function (obj) {
                    found = !0, sink && sink.put && sink.put(obj)
                }, eof: function () {
                    found || sink && sink.error && sink.error("find", key)
                }
            })
        }, remove: function (obj, sink) {
            if (!obj)return sink && sink.error && sink.error("missing key"), void 0
            var id = void 0 !== obj.id && "" !== obj.id ? obj.id : obj, self = this
            this.find(id, {
                put: function (obj) {
                    self.root = self.index.remove(self.root, obj), delete self.map[obj.id], self.notify_("remove", [obj]), sink && sink.remove && sink.remove(obj)
                }, error: function () {
                    sink && sink.error && sink.error("remove", obj)
                }
            })
        }, removeAll: function (sink, options) {
            options || (options = {}), options.query || (options.query = TRUE)
            var future = afuture()
            return this.where(options.query).select()(function (a) {
                for (var i = 0; i < a.length; i++)this.root = this.index.remove(this.root, a[i]), delete this.map[a[i].id], this.notify_("remove", [a[i]]), sink && sink.remove && sink.remove(a[i])
                sink && sink.eof && sink.eof(), future.set(sink)
            }.bind(this)), future.get
        }, select: function (sink, options) {
            if (sink = sink || [].sink, options && (options = {__proto__: options}), GLOBAL.ExplainExpr && GLOBAL.ExplainExpr.isInstance(sink)) {
                var plan = this.index.plan(this.root, sink.arg1, options)
                return sink.plan = "cost: " + plan.cost + ", " + plan.toString(), sink && sink.eof && sink.eof(), aconstant(sink)
            }
            if (options && options.query) {
                var query = options.query.partialEval()
                options.query = query === TRUE ? void 0 : query
            }
            var plan = this.index.plan(this.root, sink, options), future = afuture()
            return plan.execute(this.root, sink, options)(function (ret) {
                sink && sink.eof && sink.eof(), future.set(sink)
            }), future.get
        }, toString: function () {
            return "MDAO(" + this.model.name + "," + this.index + ")"
        }
    }
})
CLASS({
    name: "Binding",
    documentation: function () {
    },
    properties: [{name: "id", hidden: !0}, {name: "value", hidden: !0}, {name: "version", defaultValue: 1, hidden: !0}]
}), CLASS({
    name: "PersistentContext",
    documentation: function () {
    },
    properties: [{name: "dao", label: "DAO", type: "DAO", hidden: !0}, {
        name: "context",
        hidden: !0
    }, {
        name: "predicate", type: "Expr", defaultValueFn: function () {
            return TRUE
        }, hidden: !0
    }],
    methods: {
        manage: function (name, obj, version) {
            var write = EventService.merged(function () {
                this.dao.put(this.Y.Binding.create({
                    id: name,
                    value: JSONUtil.where(this.predicate).stringify(obj),
                    version: version
                }))
            }.bind(this), void 0, this.Y)
            obj.addListener(write), write()
        }, bindObjects: function (a) {
        }, clearBinding: function (ret, name) {
            var self = this
            self.dao.remove.ao(self.dao.find.bind(self.dao, name))(ret)
        }, bindObject: function (name, factory, transientValues, version) {
            version = version || 1
            var future = afuture()
            if (transientValues = transientValues || {}, this.context[name])future.set(this.context[name])
            else {
                var newinit = function () {
                    var obj = factory.create()
                    obj.copyFrom(transientValues), this.context[name] = obj, this.manage(name, obj, version), future.set(obj)
                }.bind(this)
                this.dao.find(name, {
                    put: function (binding) {
                        if (binding.version !== version)return newinit(), void 0
                        try {
                            var json = JSON.parse(binding.value), obj = JSONUtil.mapToObj(this.Y, json)
                            obj.copyFrom(transientValues), this.context[name] = obj, this.manage(name, obj, version), future.set(obj)
                        } catch (e) {
                            console.log("PersistentContext", "existingInit serialization error", name), newinit()
                        }
                    }.bind(this), error: newinit
                })
            }
            return future.get
        }
    }
}), CLASS({
    name: "UserInfo",
    label: "UserInfo",
    properties: [{type: "String", name: "email"}]
}), arequire = function (modelName) {
    var THIS = this === GLOBAL ? X : this
    return function (ret) {
        var m = THIS.lookup(modelName)
        m || console.warn("Model missing from package:", modelName), ret(m)
    }
}, CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTestApp",
    extends: "foam.ui.DetailView",
    requires: ["com.google.fiber.speedtest.Logger", "com.google.fiber.speedtest.SpeedTest", "com.google.fiber.speedtest.SpeedTestView", "foam.input.touch.GestureManager", "foam.input.touch.TouchManager"],
    exports: ["logger"],
    properties: [{
        name: "logger", factory: function () {
            return this.Logger.create()
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      ", this.SpeedTestView.create({data: this.SpeedTest.create()}), "\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "Logger",
    properties: [{model_: "ArrayProperty", name: "logs"}, {
        model_: "BooleanProperty",
        name: "logToConsole",
        swiftDefaultValue: "true",
        defaultValue: !0
    }],
    methods: [function clear() {
        this.logs = []
    }, function log(severity, message) {
        var log = [window.performance.now(), severity, message]
        this.logToConsole && console.log(log[0].toFixed(2) + " " + log[1] + ": " + log[2]), this.logs.push(log)
    }, function info(message) {
        this.log("INFO", message)
    }, function warn(message) {
        this.log("WARN", message)
    }, function error(message) {
        this.log("ERROR", message)
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    requires: ["com.google.fiber.speedtest.ConfirmSpeedtest", "com.google.fiber.speedtest.ReloadSpeedtest", "com.google.fiber.speedtest.RequestPool", "com.google.fiber.speedtest.TestDownloadSpeed", "com.google.fiber.speedtest.TestPingLatency", "com.google.fiber.speedtest.TestUploadSpeed", "com.google.fiber.speedtest.TransferTestRunner"],
    imports: ["document", "logger"],
    properties: [{
        name: "currentSpeedMbps", defaultValue: 0, preSet: function (_, n) {
            return this.isNumber(n) ? this.round(n) : n
        }
    }, {
        name: "downloadSpeedMbps", preSet: function (_, n) {
            return this.isNumber(n) ? (this.downloadSpeedUnits = "Mbps", this.round(n)) : (this.downloadSpeedUnits = "", n)
        }
    }, {
        name: "speedTo", preSet: function (_, n) {
            return n ? (this.speedToLabel = "Speed to: ", n) : (this.speedTolabel = "", "")
        }
    }, {
        name: "uploadSpeedMbps", preSet: function (_, n) {
            return this.isNumber(n) ? (this.uploadSpeedUnits = "Mbps", this.round(n)) : (this.uploadSpeedUnits = "", n)
        }
    }, {
        name: "ping", preSet: function (_, n) {
            return this.isNumber(n) ? (this.pingUnits = "ms", n < 10 ? n.toFixed(1) : Math.round(n)) : (this.pingUnits = "", n)
        }
    }, {
        name: "status", defaultValueFn: function () {
            return this.statusInit
        }
    }, {model_: "BooleanProperty", name: "running", defaultValue: !1}, {
        model_: "BooleanProperty",
        name: "cancelled",
        defaultValue: !1
    }, {name: "serverUrl"}, {name: "speedToLabel"}, {name: "downloadSpeedUnits"}, {name: "uploadSpeedUnits"}, {name: "pingUnits"}, {name: "uploadData"}, {
        name: "config",
        defaultValueFn: function () {
            return {}
        }
    }, {
        name: "pool", lazyFactory: function () {
            return this.RequestPool.create()
        }
    }, {name: "didRun"}, {
        model_: "BooleanProperty",
        name: "warnedUser",
        defaultValue: !1
    }, {name: "initResult"}, {name: "result"}, {name: "resultSummary"}, {name: "version"}, {
        model_: "ArrayProperty",
        name: "errors"
    }],
    actions: [{
        name: "sendFeedback", label: "SEND FEEDBACK", code: function () {
            this.startFeedback()
        }
    }, {
        name: "sendFeedbackLarge", label: "SEND FEEDBACK ABOUT SPEED TEST", code: function () {
            this.startFeedback()
        }
    }, {
        name: "cancelTest", label: "", isEnabled: function () {
            return this.status != this.statusInit && this.status != this.statusFindingNearest && this.status != this.statusNoneFound && this.status != this.statusConfigFailed
        }, iconUrl: "/ic_stop_white_36dp_1x.png", code: function () {
            this.running && (this.logger.info("Speed test cancelled by user"), this.cancel()), this.running = !1
        }
    }, {
        name: "runTest", label: "", isEnabled: function () {
            return this.status != this.statusInit && this.status != this.statusFindingNearest && this.status != this.statusNoneFound && this.status != this.statusConfigFailed
        }, iconUrlFn: function () {
            return this.didRun ? "/ic_refresh_white_36dp_1x.png" : "/ic_play_arrow_white_36dp_1x.png"
        }, code: function () {
            var self = this
            self.running || (this.logger.info("Speed test started by user"), this.startSpeedTest())
        }
    }],
    messages: [{
        model_: "Message",
        name: "statusInit",
        value: "Initializing",
        translationHint: "The label shown when Speedtest is being initialized."
    }, {
        model_: "Message",
        name: "statusConfigFailed",
        value: "Failed to load server config",
        translationHint: "The label shown when the config failed to load."
    }, {
        model_: "Message",
        name: "statusNoneFound",
        value: "No servers responded",
        translationHint: "The label shown when no Speedtest servers responded."
    }, {
        model_: "Message",
        name: "statusFindingNearest",
        value: "Finding Speedtest server",
        translationHint: "The label shown when Speedtest is finding the nearest server."
    }, {
        model_: "Message",
        name: "statusDownload",
        value: "Testing Download speed",
        translationHint: "The label shown when the download test is being performed."
    }, {
        model_: "Message",
        name: "statusUpload",
        value: "Testing Upload speed",
        translationHint: "The label shown when the upload test is being performed."
    }, {
        model_: "Message",
        name: "statusPing",
        value: "Pinging",
        translationHint: "The label shown when a ping test is in progress."
    }, {
        model_: "Message",
        name: "statusNotStarted",
        value: "Click button to begin",
        translationHint: "The label shown when the test is not currently active."
    }, {
        model_: "Message",
        name: "statusDone",
        value: "Click button to repeat",
        translationHint: "The label shown when the test is finished."
    }, {
        model_: "Message",
        name: "statusCancelled",
        value: "Cancelled by user",
        translationHint: "The label shown when the user cancels the test."
    }],
    methods: [function getRandomData(size) {
        for (var result = "", remaining = size; remaining > 0;) {
            var part = Math.random(36).toString()
            if (!(part.length <= remaining)) {
                result += part.substring(0, remaining)
                break
            }
            result += part, remaining -= part.length
        }
        var blob
        try {
            blob = new Blob([result], {type: "application/octet-stream"})
        } catch (e) {
            var bb = new BlobBuilder
            bb.append(result), blob = bb.getBlob("application/octet-stream")
        }
        return blob
    }, function init() {
        if (window.location.hostname.search(/\.$/) != -1) {
            var newUrl = window.location.protocol + "//" + window.location.hostname.replace(/\.+$/, "")
            window.location.port && (newUrl += ":" + window.location.port), newUrl += window.location.pathname + window.location.search + window.location.hash, window.location = newUrl
        }
        var self = this
        self.resultSummary = {state: "INITIALIZING"}, window.location.hash.search(/\blogtoconsole\b/) != -1 && (self.logger.logToConsole = !0), self.logger.info("Connected to " + window.location.href), self.initResult = {startMillis: Date.now()}, window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder, self.loadServerVersion(), self.loadConfig("", 3, self.processConfig.bind(self), self.failLoadConfig.bind(this))
    }, function loadServerVersion(opt_continue) {
        var self = this, request = self.pool.takeRequest()
        request.open("GET", "/version"), request.addEventListener("readystatechange", function () {
            if (request.readyState == request.DONE) {
                var newVersion = request.responseText
                if (self.version) {
                    if (self.version != newVersion) {
                        self.logger.info("Version changed from " + self.version + " to " + newVersion)
                        var reload = self.ReloadSpeedtest.create()
                        return reload.open(), void 0
                    }
                    self.logger.info("No change in server version")
                } else self.version = newVersion, self.logger.info("Setting version to " + newVersion)
                self.pool.returnRequest(request), request = null, "function" == typeof opt_continue && opt_continue()
            }
        }), request.send()
    }, function loadConfig(server, attemptsLeft, successFn, failFn) {
        var self = this
        self.resultSummary.state = "LOADING_CONFIG"
        var request = self.pool.takeRequest(), url = server + "/config?progress=" + encodeURIComponent(request.supportsProgress)
        this.logger.info("Loading config from " + url), request.open("GET", url), request.timeout = 2e3, request.responseType = "json", self.initResult.configResult = {startMillis: Date.now()}, request.addEventListener("readystatechange", function () {
            if (request.readyState == request.DONE) {
                var status = request.status, response = request.response
                200 == status ? (self.logger.info("Successfully loaded config"), successFn(response), self.initResult.configResult.endMillis = Date.now()) : --attemptsLeft > 0 ? (self.logger.error("Load config failed. Retrying"), self.loadConfig(server, attemptsLeft, successFn, failFn)) : (self.logger.error("Too many failed attempts loading config"), self.initResult.configResult = {}, failFn())
            }
        }), request.addEventListener("timeout", function () {
            self.logger.warn("Timeout loading config from " + url)
        }), request.addEventListener("error", function () {
            self.logger.error("Error loading config from " + url)
        }), request.addEventListener("loadend", function () {
            self.pool.returnRequest(request)
        }), request.send()
    }, function failLoadConfig() {
        this.resultSummary.state = "FAIL_LOAD_CONFIG", this.config = {}, this.status = this.statusConfigFailed
    }, function processConfig(config) {
        return this.resultSummary.state = "PROCESS_CONFIG", config && this.isArray(config.regions) && 0 != config.regions.length ? (this.initResult.configResult = {}, this.tryLocalMarket(config), void 0) : (this.logger.info("Setting selected region to " + config.locationId), this.initResult.selectedRegion = config.locationId, this.setConfig("", config), void 0)
    }, function tryLocalMarket(config) {
        var self = this
        if (!config.region)return self.logger.info("Not on Google Fiber network so finding nearest"), self.findNearest(config), void 0
        for (var region = null, i = config.regions.length - 1; i >= 0; --i)if (config.regions[i].id == config.region) {
            region = config.regions[i]
            break
        }
        if (!region || !region.id || !region.url)return self.logger.warn("Region " + config.region + " not found in regions"), self.findNearest(config), void 0
        var localRegion = {
            id: region.id,
            name: region.name,
            url: region.url[Math.floor(Math.random() * region.url.length)]
        }, ping = self.TestPingLatency.create({
            id: localRegion.id,
            pool: this.pool,
            runtimeMillis: 2e3,
            timeoutMillis: 1e3,
            server: localRegion.url,
            exitOnSuccess: !0
        })
        self.resultSummary.state = "TRY_LOCAL", self.logger.info("Trying to ping local server"), ping.start(), ping.endMillis$.addListener(EventService.oneTime(function () {
            self.logger.info("Successfully pinged local market " + localRegion.id + " so skipping find nearest"), ping.pingsSucceeded > 0 ? self.setFastestMarket(localRegion) : (self.logger.warn("No pings succeeded to local server " + localRegion.id + " so trying to find nearest"), self.findNearest(config))
        }))
    }, function findNearest(config) {
        this.resultSummary.state = "FINDING_NEAREST", this.logger.info("Attempting to find nearest server"), this.initResult.findNearest = {startMillis: Date.now()}, this.status = this.statusFindNearest
        var pings = config.regions.map(function (region) {
            var server = region.url[Math.floor(Math.random() * region.url.length)]
            return this.TestPingLatency.create({
                id: region.id,
                name: region.name,
                pool: this.pool,
                runtimeMillis: 2e3,
                timeoutMillis: 1e3,
                server: server
            })
        }, this), pingFns = pings.map(function (ping) {
            return function (ret) {
                ping.start(), ping.endMillis$.addListener(EventService.oneTime(ret))
            }
        }, this)
        apar.apply(null, pingFns)(function () {
            pingFns = null, this.chooseNearest(pings, config.region), pings = null
        }.bind(this))
    }, function chooseNearest(pings, region) {
        this.resultSummary.state = "CHOOSING_NEAREST", this.logger.info("Choosing nearest server from " + pings.length)
        var fastestMarket = void 0, localMarket = void 0, self = this
        if (this.initResult.findNearest.pingResults = pings.map(function (ping) {
                var ret = {id: ping.id, url: ping.server, errors: ping.pingErrors + ping.pingTimeouts}
                return ping.pingsSucceeded > 0 ? (ret.minPingMillis = ping.minPingMillis, self.logger.info("Ping time to " + ret.id + ": " + ret.minPingMillis), (void 0 === fastestMarket || ret.minPingMillis < fastestMarket.minPingMillis) && (fastestMarket = ret), ret.id == region && (localMarket = ret)) : self.logger.info("No pings succeeded to " + ret.id), ret
            }), localMarket && localMarket.minPingMillis < 100 && (fastestMarket = localMarket, self.logger.info("Using local market " + localMarket.id)), void 0 === fastestMarket) {
            self.logger.error("No servers responded. Failed to initialize"), self.status = this.statusNoneFound, self.resultSummary.state = "NO_SERVERS_FOUND"
            var request = self.pool.takeRequest()
            request.open("POST", self.serverUrl + "/error"), request.contentType = "application/json", request.addEventListener("readystatechange", function () {
                request.readyState == request.DONE && (self.pool.returnRequest(request), request = null)
            }), request.send(JSON.stringify({message: "Find nearest: no servers responded", log: self.logger.logs}))
        } else this.initResult.findNearest.endMillis = Date.now(), this.setFastestMarket(fastestMarket)
    }, function setFastestMarket(region) {
        var self = this, serverId = region.id, serverUrl = region.url
        self.resultSummary.selectedRegion = serverId, self.initResult.selectedRegion = serverId, self.logger.info("Fastest server " + serverId + ": " + serverUrl), self.loadConfig(serverUrl, 3, function (config) {
            self.setConfig(serverUrl, config)
        }, self.failLoadConfig.bind(self))
    }, function setConfig(serverUrl, config) {
        this.resultSummary.state = "SET_CONFIG", serverUrl ? this.logger.info("Setting server URL to " + serverUrl) : this.logger.info("Using the same server"), this.serverUrl = serverUrl, this.config = config, this.status = this.statusNotStarted, this.speedTo = this.config.locationName, this.pool.reserve(Math.max(this.config.numConcurrentDownloads, this.config.numConcurrentUploads)), this.uploadData && this.uploadData.size == this.config.uploadSize || (this.uploadData = this.getRandomData(this.config.uploadSize)), this.initResult.configResult.parameters = config, this.initResult.endMillis = Date.now(), this.resultSummary.state = "FINISHED_INITIALIZATION", window.location.hash.search(/\bautostart\b/) != -1 && (this.logger.info("Auto starting test"), this.runSpeedTest())
    }, function cancel() {
    }, function clearCancel() {
        this.cancel = function () {
        }
    }, function endCancel() {
        this.running = !1, this.status = this.statusCancelled, this.currentSpeedMbps = "Done", this.clearCancel()
    }, function startFeedback() {
        var productData = {}
        productData.region = this.config && this.config.region ? "" + this.config.region : "external", this.resultSummary && (this.resultSummary.selectedRegion && (productData.selectedRegion = "" + this.resultSummary.selectedRegion), this.resultSummary.downloadSpeed && (productData.downloadSpeed = this.resultSummary.downloadSpeed.toFixed(2) + " Mbps"), this.resultSummary.uploadSpeed && (productData.uploadSpeed = this.resultSummary.uploadSpeed.toFixed(2) + " Mbps"), this.resultSummary.minPingMillis && (productData.pingLatency = this.resultSummary.minPingMillis.toFixed(2) + " ms"), this.resultSummary.ping && (productData.ping = "" + this.resultSummary.ping), productData.state = this.resultSummary.state ? "" + this.resultSummary.state : "UNKNOWN", this.initResult.findNearest ? this.initResult.findNearest.pingResults ? this.initResult.findNearest.pingResults.length > 0 ? productData.findNearest = this.initResult.findNearest.pingResults.map(function (ping) {
            return ping.id + ":" + (ping.minPingMillis > 0 ? ping.minPingMillis.toFixed(1) : "failed")
        }).join(" ") : productData.findNearest = "empty results" : productData.findNearest = "no results" : productData.findNearest = "skipped"), this.logger.info("Starting feedback")
        for (var property in productData)productData.hasOwnProperty(property) && this.logger.info("Feedback: " + property + " = " + productData[property])
        gfiber.speedtest.feedback(productData)
    }, function startSpeedTest() {
        var self = this
        self.logger.info("Checking for a version update"), self.loadServerVersion(function () {
            self.logger.info("Version up to date. Starting speed test"), self.confirmRunSpeedTest()
        })
    }, function confirmRunSpeedTest() {
        var self = this
        if (self.config.internalNetwork || self.warnedUser)return self.runSpeedTest(), void 0
        this.logger.info("Asking user to confirm external speed test")
        var confirm = self.ConfirmSpeedtest.create()
        confirm.addPropertyListener("done", EventService.oneTime(function () {
            confirm.close(), confirm.confirm && (self.warnedUser = !0, self.runSpeedTest())
        }))
        var el = this.document.getElementById("run-test")
        confirm.open(el)
    }, function runSpeedTest() {
        this.logger.info("Running speed test")
        var self = this
        self.didRun = !0, self.running = !0, self.downloadSpeedMbps = "", self.uploadSpeedMbps = "", self.ping = "", self.result = {startMillis: Date.now()}, self.resultSummary = {
            state: "STARTING",
            selectedRegion: self.resultSummary.selectedRegion
        }, aseq(function (ret) {
            function cleanup() {
                self.downloadSpeedMbps = self.currentSpeedMbps, Events.unfollow(self.currentSpeedMbps$, transfer.speed$), self.currentSpeedMbps = 0
            }

            self.logger.info("Starting download test"), self.status = self.statusDownload, self.resultSummary.state = "RUNNING_DOWNLOAD"
            var transfer = self.TransferTestRunner.create({
                data: self.TestDownloadSpeed.create({
                    server: self.serverUrl,
                    startPort: self.config.transferPortStart,
                    endPort: self.config.transferPortEnd,
                    downloadSize: self.config.downloadSize,
                    pool: self.pool,
                    numTransfers: self.config.numConcurrentDownloads
                }),
                minIntervals: self.config.minTransferIntervals,
                maxIntervals: self.config.maxTransferIntervals,
                maxVariance: self.config.maxTransferVariance,
                intervalMillis: self.config.intervalSize,
                minRunTime: self.config.minTransferRunTime,
                maxRunTime: self.config.maxTransferRunTime,
                averageType: self.config.averageType,
                initialVariance: self.config.initialTransferVariance,
                minPostRampillis: self.config.minPostRampillis
            })
            self.currentSpeedMbps$ = transfer.speed$
            var cancelled = !1
            self.cancel = function () {
                cancelled = !0, self.status == self.statusDownload && (self.logger.info("Cancelled in download test by user"), delete self.result.download, self.result.endState = "CANCELLED_IN_DOWNLOAD", self.resultSummary.state = "CANCELLED_IN_DOWNLOAD", cleanup(), transfer.stop()), self.endCancel()
            }, self.result.downloadResult = {startMillis: Date.now()}, transfer.start(), transfer.endMillis$.addListener(EventService.oneTime(function () {
                cancelled || (self.result.downloadResult.endMillis = Date.now(), self.result.downloadResult.shortMbps = transfer.shortSpeed, self.result.downloadResult.longMbps = transfer.longSpeed, self.result.downloadResult.speedMbps = transfer.speed, self.result.downloadResult.buckets = transfer.intervals, self.result.downloadResult.totalBytes = transfer.totalBytes, self.resultSummary.downloadSpeed = self.result.downloadResult.speedMbps, cleanup(), ret())
            }))
        }, function (ret) {
            function cleanup() {
                self.uploadSpeedMbps = self.currentSpeedMbps, Events.unfollow(self.currentSpeedMbps$, transfer.speed$), self.currentSpeedMbps = 0
            }

            self.logger.info("Starting upload test"), self.status = self.statusUpload, self.resultSummary.state = "RUNNING_UPLOAD"
            var transfer = self.TransferTestRunner.create({
                data: self.TestUploadSpeed.create({
                    server: self.serverUrl,
                    startPort: self.config.transferPortStart,
                    endPort: self.config.transferPortEnd,
                    uploadData: self.uploadData,
                    pool: self.pool,
                    numTransfers: self.config.numConcurrentUploads
                }),
                minIntervals: self.config.minTransferIntervals,
                maxIntervals: self.config.maxTransferIntervals,
                maxVariance: self.config.maxTransferVariance,
                intervalMillis: self.config.intervalSize,
                minRunTime: self.config.minTransferRunTime,
                maxRunTime: self.config.maxTransferRunTime,
                averageType: self.config.averageType,
                initialVariance: self.config.initialTransferVariance,
                minPostRampillis: self.config.minPostRampillis
            })
            self.currentSpeedMbps$ = transfer.speed$
            var cancelled = !1
            self.cancel = function () {
                cancelled = !0, self.status == self.statusUpload && (self.logger.info("Cancelled in upload test by user"), delete self.result.upload, self.result.endState = "CANCELLED_IN_UPLOAD", self.resultSummary.state = "CANCELLED_IN_UPLOAD", cleanup(), transfer.stop()), self.endCancel()
            }, self.result.uploadResult = {startMillis: Date.now()}, transfer.start(), transfer.endMillis$.addListener(EventService.oneTime(function () {
                cancelled || (self.result.uploadResult.endMillis = Date.now(), self.result.uploadResult.shortMbps = transfer.shortSpeed, self.result.uploadResult.longMbps = transfer.longSpeed, self.result.uploadResult.speedMbps = transfer.speed, self.result.uploadResult.buckets = transfer.intervals, self.result.uploadResult.totalBytes = transfer.totalBytes, self.resultSummary.uploadSpeed = self.result.uploadResult.speedMbps, cleanup(), ret())
            }))
        }, function (ret) {
            function cleanup() {
                Events.unfollow(self.ping$, ping.minPingMillis$)
            }

            self.logger.info("Starting ping latency test"), self.status = self.statusPing, self.resultSummary.state = "RUNNING_PING", self.currentSpeedMbps = ""
            var ping = self.TestPingLatency.create({
                pool: self.pool,
                runtimeMillis: self.config.pingRunTime,
                timeoutMillis: self.config.pingTimeout,
                server: self.serverUrl
            })
            self.ping$ = ping.minPingMillis$
            var cancelled = !1
            self.cancel = function () {
                cancelled = !0, self.status == self.statusPing && (self.logger.info("Cancelled in ping latency test by user"), delete self.result.ping, self.result.endState = "CANCELLED_IN_PING", self.resultSummary.state = "CANCELLED_IN_PING", cleanup(), ping.stop()), self.endCancel()
            }, self.result.pingResult = {startMillis: Date.now()}, ping.start(), ping.endMillis$.addListener(EventService.oneTime(function () {
                cancelled || (self.result.pingResult.endMillis = Date.now(), self.result.pingResult.id = self.initResult.selectedRegion, self.result.pingResult.url = self.serverUrl, self.result.pingResult.errors = ping.pingErrors + ping.pingTimeouts, ping.pingsSucceeded > 0 ? (self.result.pingResult.minPingMillis = ping.minPingMillis, self.resultSummary.minPingMillis = ping.minPingMillis) : self.resultSummary.ping = "No pings succeeded", cleanup(), ret())
            }))
        }, function (ret) {
            self.logger.info("Finished speed test"), self.result.endState = "COMPLETE", self.resultSummary.state = "COMPLETE", self.result.endMillis = Date.now()
            var request = self.pool.takeRequest()
            request.open("POST", self.serverUrl + "result"), request.contentType = "application/json", request.addEventListener("readystatechange", function () {
                request.readyState == request.DONE && (self.pool.returnRequest(request), request = null, self.result = null)
            }), request.addEventListener("error", function () {
                self.logger.error("Failed to send result")
            }), self.result.initResult = self.initResult, self.result.log = self.logger.logs, request.send(JSON.stringify(self.result)), self.currentSpeedMbps = "Done", self.status = self.statusDone, self.running = !1, self.clearCancel(), ret()
        })(function () {
        })
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "ConfirmSpeedtest",
    extends: "foam.ui.SimpleView",
    imports: ["document", "logger"],
    properties: [{name: "done"}, {
        model_: "BooleanProperty",
        name: "confirm",
        swiftDefaultValue: "false",
        defaultValue: !1
    }],
    actions: [{
        name: "cancelSpeedtest", label: "CANCEL", code: function () {
            this.logger.info("User declined to run speed test"), this.confirm = !1, this.done = !0
        }
    }, {
        name: "confirmSpeedtest", label: "CONTINUE", code: function () {
            this.logger.info("User agreed to run speed test"), this.confirm = !0, this.done = !0
        }
    }],
    messages: [{
        model_: "Message",
        name: "confirmSpeedtestTitle",
        value: "Run speed test?",
        translationHint: "Title for dialog to confirm running Speedtest."
    }, {
        model_: "Message",
        name: "confirmSpeedtestText",
        value: "You are not on the Google Fiber network. Running a speed test on your mobile network may result in data charges.",
        translationHint: "Text to show when confirming to run Speedtest."
    }],
    methods: [function open(sourceElement) {
        this.document.body.insertAdjacentHTML("beforeend", this.toHTML()), this.initHTML()
        var dialogWidth = this.$.offsetWidth, centerX = sourceElement.offsetLeft + sourceElement.offsetWidth / 2, centerY = sourceElement.offsetTop + sourceElement.offsetHeight / 2, left = Math.max(0, Math.min(centerX - dialogWidth / 2, screen.availWidth - dialogWidth)), top = Math.max(0, centerY - this.$.offsetHeight / 2)
        this.$.style.left = left + "px", this.$.style.top = top + "px"
        var self = this
        window.setTimeout(function () {
            self.$.classList.remove("hide")
        }, 0)
    }, function close() {
        this.$.classList.add("hide")
    }, function initHTML() {
        this.SUPER(), this.document.body.addEventListener("mouseup", this.onTouch), this.document.body.addEventListener("touchstart", this.onTouch), this.$.addEventListener("transitionend", this.onTransitionEnd)
    }, function destroy() {
        this.document.body.removeEventListener("mouseup", this.onTouch), this.document.body.removeEventListener("touchstart", this.onTouch), this.$.removeEventListener("transitionend", this.onTransitionEnd), this.document.body.removeChild(this.$), this.SUPER()
    }],
    listeners: [{
        name: "onTransitionEnd", code: function () {
            this.$.classList.contains("hide") && this.destroy()
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".confirm-speedtest-popup{background-color:white;-webkit-box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);font-family:'Roboto', sans-serif;transition:opacity 300ms ease-in-out;width:320px;position:absolute;z-index:1000}.confirm-speedtest-title{font-size:1.5em;margin:20px}.confirm-speedtest-text{color:#666;margin:20px}.confirm-speedtest-buttons{display:-webkit-flex;display:flex;-webkit-justify-content:flex-end;justify-content:flex-end}.confirm-speedtest-buttons a{text-decoration:none;color:#0091EA;padding:20px;cursor:pointer}.confirm-speedtest-buttons a:hover{background-color:#E5E5E5}.hide{opacity:0}"),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="', self.id, '" class="confirm-speedtest-popup hide">\n        <div class="confirm-speedtest-title">', self.confirmSpeedtestTitle, '</div>\n        <div class="confirm-speedtest-text">', self.confirmSpeedtestText, '</div>\n        <div class="confirm-speedtest-buttons">\n          ', self.createTemplateView("cancelSpeedtest", {tagName: "a"}), "\n          ", self.createTemplateView("confirmSpeedtest", {tagName: "a"}), "\n        </div>\n      </div>\n     "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "SimpleView",
    extends: "foam.ui.BaseView",
    traits: ["foam.ui.HTMLViewTrait", "foam.ui.U2ViewTrait"],
    requires: ["Property"],
    exports: ["propertyViewProperty"],
    properties: [{
        name: "propertyViewProperty", defaultValueFn: function () {
            return this.Property.DETAIL_VIEW
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "HTMLViewTrait",
    label: "HTMLView",
    requires: ["foam.input.touch.GestureTarget", "foam.ui.ActionBorder", "foam.ui.PropertyView", "foam.ui.AsyncLoadingView"],
    properties: [{
        model_: "StringProperty", name: "id", label: "Element ID", type: "String", factory: function () {
            return this.instance_.id || this.nextID()
        }
    }, {
        model_: "foam.core.types.DocumentInstallProperty", name: "installCSS", documentInstallFn: function (X) {
            for (var i = 0; i < this.model_.templates.length; i++) {
                var t = this.model_.templates[i]
                if ("CSS" === t.name)return t.futureTemplate(function () {
                    X.addStyle(this)
                }.bind(this)), void 0
            }
        }
    }, {
        name: "shortcuts", factory: function () {
            return []
        }
    }, {
        name: "$", labels: ["javascript"], mode: "read-only", visibility: "hidden", hidden: !0, getter: function () {
            return this.X.document.getElementById(this.id)
        }, setter: function () {
        }, help: "DOM Element."
    }, {name: "tagName", defaultValue: "span"}, {
        name: "className",
        defaultValue: "",
        help: "CSS class name(s), space separated."
    }, {name: "tooltip"}, {name: "tabIndex"}, {name: "extraClassName", defaultValue: ""}, {
        name: "propertyViewProperty",
        defaultValueFn: function () {
            return this.X.Property.VIEW
        }
    }, {
        name: "initializers_", factory: function () {
            return []
        }
    }, {
        name: "destructors_", factory: function () {
            return []
        }
    }, {
        model_: "BooleanProperty", name: "showActions", type: "Boolean", postSet: function (oldValue, showActions) {
            !oldValue && showActions && this.addDecorator(this.ActionBorder.create())
        }, defaultValue: !1
    }, {name: "minWidth", defaultValue: 300}, {name: "minHeight", defaultValue: 0}, {
        name: "preferredWidth",
        defaultValue: 400
    }, {name: "preferredHeight", defaultValue: 40}, {name: "maxWidth", defaultValue: 1e4}, {
        name: "maxHeight",
        defaultValue: 1e4
    }, {
        name: "$parent", labels: ["javascript"], getter: function () {
            return this.$ ? this.$.parentElement : null
        }
    }],
    constants: [{
        name: "KEYPRESS_CODES",
        value: {8: !0, 33: !0, 34: !0, 37: !0, 38: !0, 39: !0, 40: !0}
    }, {name: "NAMED_CODES", value: {37: "left", 38: "up", 39: "right", 40: "down"}}, {
        name: "ON_HIDE",
        value: ["onHide"]
    }, {name: "ON_SHOW", value: ["onShow"]}],
    methods: [function strToHTML(str) {
        return XMLUtil.escape(str.toString())
    }, function cssClassAttr() {
        if (!this.className && !this.extraClassName)return ""
        var s = ' class="'
        return this.className && (s += this.className, this.extraClassName && (s += " ")), this.extraClassName && (s += this.extraClassName), s + '"'
    }, function bindSubView(view, prop) {
        view.setValue(this.propertyValue(prop.name))
    }, function focus() {
        this.$ && this.$.focus && this.$.focus()
    }, function addChild(child) {
        if (child.toView_ && (child = child.toView_()), this.children.indexOf(child) == -1)return this.SUPER(child)
    }, function addShortcut(key, callback, context) {
        this.shortcuts.push([key, callback, context])
    }, function nextID() {
        return "view" + (arguments.callee._nextId = (arguments.callee._nextId || 0) + 1)
    }, function addInitializer(f) {
        this.initializers_.push(f)
    }, function addDestructor(f) {
        this.destructors_.push(f)
    }, function tapClick() {
    }, function resize() {
        var e = this.X.document.createEvent("Event")
        e.initEvent("resize", !0, !0), this.$ && this.X.window.getComputedStyle(this.$), this.X.window.dispatchEvent(e)
    }, function on(event, listener, opt_id) {
        if (opt_id = opt_id || this.nextID(), listener = listener.bind(this), "click" === event && this.X.gestureManager) {
            var self = this, manager = this.X.gestureManager, target = this.GestureTarget.create({
                containerID: opt_id,
                enforceContainment: !0,
                handler: {
                    tapClick: function (pointMap) {
                        return listener({
                            preventDefault: function () {
                            }, stopPropagation: function () {
                            }, pointMap: pointMap, target: self.X.$(opt_id)
                        })
                    }
                },
                gesture: "tap"
            })
            return manager.install(target), this.addDestructor(function () {
                manager.uninstall(target)
            }), opt_id
        }
        return this.addInitializer(function () {
            var e = this.X.$(opt_id)
            e && e.addEventListener(event, listener, !1)
        }.bind(this)), opt_id
    }, function setAttribute(attributeName, valueFn, opt_id) {
        var self = this
        opt_id = opt_id || this.nextID(), valueFn = valueFn.bind(this), this.addInitializer(function () {
            self.X.dynamicFn(valueFn, function () {
                var e = self.X.$(opt_id)
                if (!e)throw EventService.UNSUBSCRIBE_EXCEPTION
                var newValue = valueFn(e.getAttribute(attributeName))
                void 0 == newValue ? e.removeAttribute(attributeName) : e.setAttribute(attributeName, newValue)
            })
        })
    }, function setStyle(styleName, valueFn, opt_id) {
        var self = this
        return opt_id = opt_id || this.nextID(), valueFn = valueFn.bind(this), this.addInitializer(function () {
            self.X.dynamicFn(valueFn, function (value) {
                var e = self.X.$(opt_id)
                if (!e)throw EventService.UNSUBSCRIBE_EXCEPTION
                e.style[styleName] = value
            })
        }), opt_id
    }, function setClass(className, predicate, opt_id) {
        var self = this
        return opt_id = opt_id || this.nextID(), predicate = predicate.bind(this), this.addInitializer(function () {
            self.addDestructor(self.X.dynamicFn(predicate, function () {
                var e = self.X.$(opt_id)
                if (!e)throw EventService.UNSUBSCRIBE_EXCEPTION
                DOM.setClass(e, className, predicate())
            }).destroy)
        }), opt_id
    }, function setClasses(map, opt_id) {
        opt_id = opt_id || this.nextID()
        for (var keys = Objects.keys(map), i = 0; i < keys.length; i++)this.setClass(keys[i], map[keys[i]], opt_id)
        return opt_id
    }, function insertInElement(name) {
        var e = this.X.$(name)
        e.innerHTML = this.toHTML(), this.initHTML()
    }, function write(opt_X) {
        var X = opt_X || this.X
        X.writeView(this, X)
    }, function updateHTML() {
        this.$ && (this.destroy(), this.construct())
    }, function construct() {
        this.SUPER(), this.generateContent()
    }, function generateContent() {
        this.$ && (this.$.innerHTML = this.toInnerHTML(), this.initInnerHTML())
    }, function toInnerHTML() {
        return ""
    }, function toHTML() {
        return this.invokeDestructors(), "<" + this.tagName + ' id="' + this.id + '"' + this.cssClassAttr() + ">" + this.toInnerHTML() + "</" + this.tagName + ">"
    }, function initHTML() {
        this.initInnerHTML(), this.initKeyboardShortcuts(), this.maybeInitTooltip()
    }, function maybeInitTooltip() {
        this.tooltip && this.$ && (this.$.addEventListener("mouseenter", this.openTooltip), this.$.addEventListener("mouseleave", this.closeTooltip))
    }, function initInnerHTML() {
        this.invokeInitializers(), this.initChildren()
    }, function initChildren() {
        if (this.children)for (var i = 0; i < this.children.length; i++)try {
            this.children[i].initHTML && this.children[i].initHTML()
        } catch (x) {
            console.log("Error on View.child.initHTML", x, x.stack)
        }
    }, function invokeInitializers() {
        for (var i = 0; i < this.initializers_.length; i++)this.initializers_[i]()
        this.initializers_ = []
    }, function invokeDestructors() {
        for (var i = 0; i < this.destructors_.length; i++)this.destructors_[i]()
        this.destructors_ = []
    }, function evtToCharCode(evt) {
        var s = ""
        return evt.altKey && (s += "alt-"), evt.ctrlKey && (s += "ctrl-"), evt.shiftKey && "keydown" === evt.type && (s += "shift-"), evt.metaKey && (s += "meta-"), s += "keydown" === evt.type ? this.NAMED_CODES[evt.which] || String.fromCharCode(evt.which) : String.fromCharCode(evt.charCode), s
    }, function initKeyboardShortcuts() {
        function init(actions, opt_value) {
            actions.forEach(function (action) {
                for (var j = 0; j < action.keyboardShortcuts.length; j++) {
                    var key = action.keyboardShortcuts[j]
                    self.NAMED_CODES[key] ? key = self.NAMED_CODES[key] : "number" == typeof key && (key = String.fromCharCode(key)), keyMap[key] = opt_value ? function () {
                        action.maybeCall(self.X, opt_value.get())
                    } : action.maybeCall.bind(action, self.X, self), found = !0
                }
            })
        }

        var keyMap = {}, found = !1, self = this
        if (init(this.model_.getRuntimeActions()), this.data && this.data.model_ && this.data.model_.getRuntimeActions().length && init(this.data.model_.getRuntimeActions(), this.data$), found) {
            console.assert(this.$, "View must define outer id when using keyboard shortcuts: " + this.name_), this.keyMap_ = keyMap
            var target = this.$parent
            target.setAttribute("tabindex", target.tabIndex + ""), target.addEventListener("keydown", this.onKeyboardShortcut), target.addEventListener("keypress", this.onKeyboardShortcut)
        }
    }, function destroy(isParentDestroyed) {
        this.invokeDestructors(), this.SUPER(isParentDestroyed), delete this.instance_.$
    }, function close() {
        this.$ && this.$.remove(), this.destroy(), this.publish("closed")
    }, function rectOnPage() {
        for (var node = this.$, x = 0, y = 0, parent, rect = this.$.getBoundingClientRect(); node;)parent = node, x += node.offsetLeft, y += node.offsetTop, node = node.offsetParent
        return {top: y, left: x, right: x + rect.width, bottom: y + rect.height, width: rect.width, height: rect.height}
    }, function rectOnViewport() {
        return this.$.getBoundingClientRect()
    }, function viewportOnPage() {
        var bodyRect = this.X.document.documentElement.getBoundingClientRect(), vpSize = this.viewportSize()
        return {
            left: -bodyRect.left,
            top: -bodyRect.top,
            width: vpSize.width,
            height: vpSize.height,
            right: -bodyRect.left + vpSize.width,
            bottom: -bodyRect.top + vpSize.height
        }
    }, function viewportSize() {
        return {
            height: window.innerHeight || this.X.document.documentElement.clientHeight,
            width: window.innerWidth || this.X.document.documentElement.clientWidth
        }
    }, function createView(prop, opt_args) {
        var X = opt_args && opt_args.X || this.Y, v = this.PropertyView.create({
            id: (this.nextID ? this.nextID() : this.id) + "PROP",
            prop: prop,
            copyFrom: opt_args
        }, X)
        return this[prop.name + "View"] = v.view, v
    }, function removeChild(child) {
        this.PropertyView.isInstance(child) && child.prop && delete this[child.prop.name + "View"], this.SUPER(child)
    }, function createRelationshipView(r, opt_args) {
        if (opt_args.model_)return this.createView(r, opt_args)
        var X = opt_args && opt_args.X || this.Y, v = this.AsyncLoadingView.create({
            id: this.nextID(),
            name: r.name,
            model: "foam.ui.RelationshipView",
            args: {relationship: r},
            copyFrom: opt_args
        }, X)
        return v.view && (v = v.view), this[r.name + "View"] = v, v
    }, function createActionView(action, opt_args) {
        var X = opt_args && opt_args.X || this.Y, modelName = opt_args && opt_args.model_ ? opt_args.model_ : "foam.ui.ActionButton", v = this.AsyncLoadingView.create({
            id: this.nextID(),
            name: action.name,
            model: modelName,
            args: {action: action},
            copyFrom: opt_args
        }, X)
        return v.view && (v = v.view), this[action.name + "View"] = v.cview || v, v
    }, function createTemplateView(name, opt_args) {
        var args = opt_args || {}, X = this.Y, myData = this.data$
        if (myData && myData.value && myData.value.model_) {
            var o = myData.value.model_.getFeature(name)
            if (o) {
                var v
                return v = Action.isInstance(o) ? this.createActionView(o, args) : Relationship.isInstance(o) ? this.createRelationshipView(o, args) : this.createView(o, args), this.addDataChild(v), v
            }
        }
        var o = this.model_.getFeature(name)
        if (!o)throw"Unknown View Name: " + name
        var v
        return v = Action.isInstance(o) ? this.createActionView(o, args) : Relationship.isInstance(o) ? this.createRelationshipView(o, args) : this.createView(o, args), this.addSelfDataChild(v), v
    }, function dynamicTag(tagName, f) {
        var id = this.nextID(), self = this
        return this.addInitializer(function () {
            self.X.dynamicFn(function () {
                var html = f(), e = self.X.$(id)
                e && (e.innerHTML = html)
            })
        }), "<" + tagName + ' id="' + id + '"></' + tagName + ">"
    }],
    listeners: [{
        name: "openTooltip", code: function (e) {
        }
    }, {
        name: "closeTooltip", code: function (e) {
            this.tooltip_ && (this.tooltip_.close(), this.tooltip_ = null)
        }
    }, {
        name: "onKeyboardShortcut", code: function (evt) {
            if ("keydown" !== evt.type || this.KEYPRESS_CODES[evt.which]) {
                var action = this.keyMap_[this.evtToCharCode(evt)]
                action && (action(), evt.preventDefault(), evt.stopPropagation())
            }
        }
    }]
}), CLASS({
    package: "foam.input.touch",
    name: "GestureTarget",
    properties: [{name: "id"}, {name: "gesture", help: "The name of the gesture to be tracked."}, {
        name: "containerID",
        help: "The containing DOM node's ID. Used for checking what inputs are within which gesture targets."
    }, {
        model_: "BooleanProperty",
        name: "enforceContainment",
        type: "Boolean",
        help: "Require that the start and end of a matching gesture be inside the container.",
        defaultValue: !1
    }, {
        name: "getElement", defaultValue: function () {
            return this.X.$(this.containerID)
        }, help: "Function to retrieve the element this gesture is attached to. Defaults to $(containerID)."
    }, {name: "handler", help: "The target for the gesture's events, after it has been recognized."}],
    help: "Created by each view that wants to receive gestures."
}), CLASS({
    package: "foam.ui", name: "ActionBorder", methods: [function toHTML(border, delegate, args) {
        var str = ""
        str += delegate.apply(this, args), str += '<div class="actionToolbar">'
        for (var actions = this.model_.getRuntimeActions(), i = 0; i < actions.length; i++) {
            var v = this.createActionView(actions[i])
            this.addSelfDataChild(v), str += " " + v.toView_().toHTML() + " "
        }
        if (this.X.lookup("foam.ui.DetailView").isInstance(this)) {
            actions = this.model.actions
            for (var i = 0; i < actions.length; i++) {
                var v = this.createActionView(actions[i])
                this.addDataChild(v), str += " " + v.toView_().toHTML() + " "
            }
        }
        return str += "</div>", str
    }]
}), CLASS({
    package: "foam.ui",
    name: "PropertyView",
    extends: "foam.ui.AsyncLoadingView",
    properties: [{
        name: "prop", postSet: function (old, nu) {
            old && this.bound_ && this.unbindData(this.data), nu && !this.bound_ && this.bindData(this.data), this.args = nu, this.model = this.innerView || nu.view
        }
    }, {
        name: "data", postSet: function (old, nu) {
            old && this.bound_ && this.unbindData(old), nu && this.bindData(nu)
        }
    }, {name: "childData"}, {
        name: "innerView", postSet: function (old, nu) {
            this.model = nu
        }, help: "Override for prop.view"
    }, {
        name: "view", adapt: function (_, v) {
            return v && v.toView_ ? v.toView_() : v
        }
    }, {model_: "BooleanProperty", name: "bound_", type: "Boolean", defaultValue: !1}, {
        name: "parent",
        postSet: function (_, p) {
            p && (p[this.prop.name + "View"] = this.view.cview || this.view, this.view && (this.view.parent = p))
        }
    }],
    methods: [function unbindData(oldData) {
        if (this.bound_ && oldData && this.prop) {
            var pValue = oldData.propertyValue(this.prop.name)
            Events.unlink(pValue, this.childData$), this.bound_ = !1
        }
    }, function bindData(data) {
        var self = this
        if (!this.bound_ && data && this.prop) {
            var pValue = data.propertyValue(this.prop.name)
            Events.link(pValue, this.childData$), this.prop.validate && this.X.dynamic3(data, this.prop.validate, function (error) {
                self.view && (self.view.$.style.border = error ? "2px solid red" : "")
            }), this.bound_ = !0
        }
    }, function toString() {
        return "PropertyView(" + this.prop.name + ", " + this.view + ")"
    }, function destroy(isParentDestroyed) {
        this.unbindData(this.data), this.SUPER(isParentDestroyed)
    }, function construct() {
        this.bindData(this.data), this.SUPER()
    }, function finishRender(view) {
        view.prop = this.prop, this.SUPER(view)
    }, function addDataChild(child) {
        Events.link(this.childData$, child.data$), this.addChild(child)
    }]
}), CLASS({
    package: "foam.ui",
    name: "AsyncLoadingView",
    extends: "foam.ui.BaseView",
    properties: [{model_: "StringProperty", name: "id", label: "Element ID", type: "String"}, {
        name: "name",
        label: "The parent view's name for this"
    }, {name: "model", label: "View model name, model definition, or JSON with a factory_ specified."}, {
        name: "args",
        label: "View construction arguments",
        defaultValueFn: function () {
            return {}
        }
    }, {
        name: "copyFrom", label: "Additional arguments to this.copyFrom(...) when ready.", lazyFactory: function () {
            return {}
        }
    }, {name: "view"}],
    methods: [function init() {
        this.SUPER()
        var skipKeysArgDecorator = Object.create(this.args)
        if (skipKeysArgDecorator.hasOwnProperty = this.skipKeysFn_hasOwnProperty, skipKeysArgDecorator.inner = this.args, this.copyFrom && this.copyFrom.model && (skipKeysArgDecorator.model = this.copyFrom.model), this.copyFrom && this.copyFrom.model_) {
            if ("string" == typeof this.copyFrom.model_)return this.requireModelName(this.copyFrom.model_, skipKeysArgDecorator)
            if (Model.isInstance(this.copyFrom.model_))return this.finishRender(this.copyFrom.model_.create(skipKeysArgDecorator, this.Y))
        }
        return "string" == typeof this.model ? this.requireModelName(this.model, skipKeysArgDecorator) : this.model.model_ && "string" == typeof this.model.model_ ? this.requireViewInstance(FOAM(this.model)) : this.model.model_ ? Model.isInstance(this.model) ? this.finishRender(this.model.create(skipKeysArgDecorator, this.Y)) : (this.mergeWithCopyFrom(this.model), this.finishRender(this.model.model_.create(skipKeysArgDecorator, this.Y))) : this.model.factory_ ? (this.mergeWithCopyFrom(this.model), this.requireModelName(this.model.factory_, skipKeysArgDecorator)) : "function" == typeof this.model ? this.finishRender(this.model(skipKeysArgDecorator, this.Y)) : (console.warn("AsyncLoadingView: View load with invalid model. ", this.model, this.args, this.copyFrom), void 0)
    }, function mergeWithCopyFrom(other) {
        for (var key in other)"factory_" != key && (this.copyFrom[key] = other[key])
    }, function skipKeysFn_hasOwnProperty(name) {
        return "factory_" != name && "model_" != name && "view" != name && this.inner.hasOwnProperty(name)
    }, function requireViewInstance(view) {
        view.arequire()(function (m) {
            this.finishRender(view)
        }.bind(this))
    }, function requireModelName(name, args) {
        this.X.arequire(name)(function (m) {
            this.finishRender(m.create(args, this.Y))
        }.bind(this))
    }, function finishRender(view) {
        if (this.copyFrom) {
            var skipKeysCopyFromDecorator = Object.create(this.copyFrom)
            skipKeysCopyFromDecorator.hasOwnProperty = this.skipKeysFn_hasOwnProperty, skipKeysCopyFromDecorator.inner = this.copyFrom, view.copyFrom(skipKeysCopyFromDecorator)
        }
        this.view = view.toView_(), this.addDataChild(this.view)
        var el = this.X.$(this.id)
        el && (el.outerHTML = this.toHTML(), this.initHTML())
    }, function toHTML() {
        return this.view ? this.view.toHTML() : '<div id="' + this.id + '"></div>'
    }, function initHTML() {
        this.view && this.view.initHTML()
    }, function toString() {
        return "AsyncLoadingView(" + this.model + ", " + this.view + ")"
    }, function fromElement(e) {
        return this.view.fromElement(e), this
    }]
}), CLASS({
    package: "foam.ui",
    name: "BaseView",
    extends: "foam.patterns.ChildTreeTrait",
    properties: [{name: "data"}],
    methods: [function addDataChild(child) {
        Events.link(this.data$, child.data$), this.addChild(child)
    }, function addSelfDataChild(child) {
        child.data = this, this.addChild(child)
    }, function toView_() {
        return this
    }]
}), CLASS({
    package: "foam.patterns",
    name: "ChildTreeTrait",
    properties: [{name: "parent", visibility: "hidden", hidden: !0}, {
        name: "children", factory: function () {
            return []
        }
    }],
    methods: [function onAncestryChange_() {
        Array.prototype.forEach.call(this.children, function (c) {
            c.onAncestryChange_ && c.onAncestryChange_()
        })
    }, function addChild(child) {
        if (child.parent !== this) {
            child.parent = this, child.onAncestryChange_ && child.onAncestryChange_()
            var children = this.children
            return children.push(child), this.children = children, this
        }
    }, function removeChild(child) {
        return child.destroy && child.destroy(!0), this.children.deleteI(child), child.parent = void 0, this
    }, function removeAllChildren(isParentDestroyed) {
        var list = this.children
        this.children = [], Array.prototype.forEach.call(list, function (child) {
            this.removeChild(child)
        }.bind(this))
    }, function addChildren() {
        for (var i = 0; i < arguments.length; ++i)this.addChild(arguments[i])
        return this
    }, function destroy(isParentDestroyed) {
        return isParentDestroyed ? (Array.prototype.forEach.call(this.children, function (child) {
            child.destroy && child.destroy(!0)
        }), this.children = []) : this.removeAllChildren(), this
    }, function construct() {
        return this
    }, function deepPublish(topic) {
        var count = this.publish.apply(this, arguments)
        if (this.children)for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i]
            count += child.deepPublish.apply(child, arguments)
        }
        return count
    }]
}), CLASS({
    package: "foam.core.types",
    name: "DocumentInstallProperty",
    extends: "Property",
    properties: [{model_: "FunctionProperty", name: "documentInstallFn", type: "Function"}, {
        name: "hidden",
        defaultValue: !0
    }],
    methods: [function initPropertyAgents(proto, fastInit) {
        this.SUPER(proto, fastInit)
        var thisProp = this, DocumentInstallProperty = thisProp.model_
        if (proto.addInitAgent(12, ": install in document ", function (o, X, Y) {
                var model = o.model_
                model && X.installedModels && !X.installedModels[model.id] && thisProp.documentInstallFn.call(proto, X)
            }), proto.__proto__.model_) {
            var recurse = function (baseProto) {
                var baseProp = baseProto.model_.getProperty(thisProp.name)
                baseProp && (proto.addInitAgent(12, ": inherited install in document ", function (o, X, Y) {
                    var model = baseProto.model_
                    model && X.installedModels && !X.installedModels[model.id] && baseProp.documentInstallFn.call(baseProto, X)
                }), proto.addInitAgent(13, ": completed inherited install in document ", function (o, X, Y) {
                    X.installedModels[baseProto.model_.id] = !0
                }), baseProto.__proto__.model_ && recurse(baseProto.__proto__))
            }
            recurse(proto.__proto__)
        }
        proto.addInitAgent(13, ": completed install in document ", function (o, X, Y) {
            X.installedModels[o.model_.id] = !0
        })
    }],
    help: "Describes a function property that runs once per document"
}), CLASS({
    package: "foam.ui", name: "U2ViewTrait", methods: [function toE() {
        return this
    }, function load() {
        return this.initHTML && this.initHTML()
    }, function unload() {
        return this.destroy && this.destroy()
    }, function toString() {
        return this.toHTML ? this.toHTML() : ""
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "ReloadSpeedtest",
    extends: "foam.ui.SimpleView",
    imports: ["document"],
    actions: [{
        name: "reloadSpeedtest", label: "RELOAD", code: function () {
            window.location.reload(!0)
        }
    }],
    messages: [{
        model_: "Message",
        name: "reloadSpeedtestTitle",
        value: "Reload speed test",
        translationHint: "Title for dialog to reload Speedtest."
    }, {
        model_: "Message",
        name: "reloadSpeedtestText",
        value: "Please reload the speed test to get the latest changes.",
        translationHint: "Text to show when reloading."
    }],
    methods: [function open() {
        this.document.body.insertAdjacentHTML("beforeend", this.toHTML()), this.initHTML()
    }, function initHTML() {
        this.SUPER()
        var el = document.getElementById("reload-overlay")
        el.style.visibility = "visible", this.document.body.addEventListener("mouseup", this.onTouch), this.document.body.addEventListener("touchstart", this.onTouch)
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate("#reload-overlay{visibility:hidden;position:absolute;left:0px;top:0px;width:100%;height:100%;text-align:center;z-index:1000}.reload-container{position:absolute;top:50%;left:50%}.reload-speedtest-popup{background-color:white;-webkit-box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);font-family:'Roboto', sans-serif;transition:opacity 300ms ease-in-out;width:320px;position:absolute;height:240px;margin-left:-160px;margin-top:-120px}.reload-speedtest-title{font-size:1.5em;margin:20px}.reload-speedtest-text{color:#666;margin:20px}.reload-speedtest-buttons{display:-webkit-flex;display:flex;-webkit-justify-content:flex-end;justify-content:flex-end}.reload-speedtest-buttons a{text-decoration:none;color:#0091EA;padding:20px;cursor:pointer}.reload-speedtest-buttons a:hover{background-color:#E5E5E5}"),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="reload-overlay">\n        <div class="reload-container">\n          <div class="reload-speedtest-popup">\n            <div class="reload-speedtest-title">', self.reloadSpeedtestTitle, '</div>\n            <div class="reload-speedtest-text">', self.reloadSpeedtestText, '</div>\n            <div class="reload-speedtest-buttons">\n              ', self.createTemplateView("reloadSpeedtest", {tagName: "a"}), "\n            </div>\n          </div>\n        </div>\n      </div>\n     "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "RequestPool",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    requires: ["com.google.fiber.speedtest.Request"],
    properties: [{model_: "ArrayProperty", name: "availableRequests"}, {
        model_: "IntProperty",
        name: "activeRequests",
        defaultValue: 0
    }, {model_: "IntProperty", name: "requestsCreated", defaultValue: 0}, {
        model_: "IntProperty",
        name: "requestsTaken",
        defaultValue: 0
    }, {model_: "IntProperty", name: "requestsReturned", defaultValue: 0}],
    methods: [function createRequest() {
        var request = this.Request.create({id: this.requestsCreated++})
        return request
    }, function reserve(size) {
        for (var numToCreate = size - this.availableRequests.length - this.activeRequests, i = 0; i < numToCreate; ++i)this.availableRequests.push(this.createRequest())
    }, function takeRequest() {
        this.activeRequests++
        var request = this.availableRequests.pop()
        return request || (request = this.createRequest()), this.requestsTaken++, request
    }, function returnRequest(request) {
        request && this.availableRequests.indexOf(request) == -1 && (this.activeRequests--, this.requestsReturned++, request.reset(), this.availableRequests.push(request))
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "Request",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    requires: ["com.google.fiber.speedtest.Multimap"],
    properties: [{
        name: "xhr", lazyFactory: function () {
            return new XMLHttpRequest
        }
    }, {
        name: "eventListeners", lazyFactory: function () {
            return this.Multimap.create()
        }
    }, {
        name: "uploadEventListeners", lazyFactory: function () {
            return this.Multimap.create()
        }
    }, {
        name: "response", getter: function () {
            return "json" == this.internalResponseType && "json" != this.xhr.responseType ? JSON.parse(this.xhr.response) : this.xhr.response
        }
    }, {
        name: "responseText", getter: function () {
            return this.xhr.responseText
        }
    }, {
        name: "responseType", getter: function () {
            return this.internalResponseType
        }, setter: function (value) {
            this.internalResponseType = value
            try {
                this.xhr.responseType = value
            } catch (e) {
            }
        }
    }, {
        name: "timeout", getter: function () {
            return this.xhr.timeout
        }, setter: function (value) {
            this.xhr.timeout = value
        }
    }, {
        name: "status", getter: function () {
            return this.xhr.status
        }
    }, {
        name: "supportsProgress", getter: function () {
            return "onprogress" in this.xhr
        }
    }, {
        name: "readyState", getter: function () {
            return this.xhr.readyState
        }
    }, {
        name: "contentType", setter: function (value) {
            this.internalContentType = value, this.xhr.setRequestHeader("Content-Type", value)
        }
    }, {name: "id"}, {name: "internalResponseType"}],
    constants: [{name: "DONE", value: 4}],
    methods: [function addEventListener(type, listener, useCapture, wantsUntrusted) {
        this.xhr.addEventListener(type, listener, useCapture, wantsUntrusted), this.eventListeners.add(type, listener)
    }, function removeEventListener(type, listener, useCapture) {
        this.xhr.removeEventListener(type, listener, useCapture), this.eventListeners.removeValue(type, listener)
    }, function addUploadEventListener(type, listener, useCapture, wantsUntrusted) {
        this.xhr.upload.addEventListener(type, listener, useCapture, wantsUntrusted), this.uploadEventListeners.add(type, listener)
    }, function removeUploadEventListener(type, listener, useCapture) {
        this.xhr.upload.removeEventListener(type, listener, useCapture), this.uploadEventListeners.removeValue(type, listener)
    }, function open(method, url, async, user, password) {
        void 0 === async && (async = !0), this.xhr.open(method, url, async, user, password)
    }, function send(data) {
        this.xhr.send(data)
    }, function abort() {
        this.xhr.abort()
    }, function reset() {
        var self = this
        this.eventListeners.forEach(function (type, listener) {
            self.xhr.removeEventListener(type, listener)
        }), this.eventListeners.clear(), this.uploadEventListeners.forEach(function (type, listener) {
            self.xhr.upload.removeEventListener(type, listener)
        }), this.uploadEventListeners.clear()
        try {
            this.xhr.open("GET", "about:blank")
        } catch (e) {
        }
        this.internalResponseType = ""
        try {
            this.xhr.responseType = ""
        } catch (e) {
        }
        try {
            this.xhr.timeout = 0
        } catch (e) {
        }
        if (this.xhr.response = null, this.xhr.responseText = null, this.internalContentType) {
            try {
                this.xhr.setRequestHeader("Content-Type", null)
            } catch (e) {
            }
            this.internalContentType = null
        }
        this.xhr.abort()
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "Multimap",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    properties: [{
        name: "map", lazyFactory: function () {
            return {}
        }
    }],
    methods: [function add(key, value) {
        this.isArray(this.map[key]) ? this.map[key].push(value) : this.map[key] = [value]
    }, function set(key, value) {
        this.map[key] = [value]
    }, function removeValue(key, value) {
        var values = this.map[key]
        values && this.isArray(values) && (this.map[key] = values.filter(function (element) {
            return element !== value
        }))
    }, function removeKey(key) {
        delete this.map[key]
    }, function clear(key, value) {
        this.map = {}
    }, function forEach(f) {
        for (var key in this.map)if (this.map.hasOwnProperty(key))for (var values = this.map[key], len = values.length, i = 0; i < len; ++i)f(key, values[i])
    }]
}), CLASS({
    package: "com.google.fiber.speedtest", name: "SpeedTestUtils", methods: [function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n)
    }, function round(n) {
        n = Math.max(0, n)
        var amt = 0
        return n < 10 ? amt = 2 : n < 100 && (amt = 1), n.toFixed(amt)
    }, function megabits(bytes, millis) {
        return bytes / (125 * millis)
    }, function isArray(obj) {
        return obj && obj.constructor == Array
    }, function removeElement(array, value) {
        var elementsRemoved = !1
        if (this.isArray(array))for (var i = 0; i < array.length;)array[i] === value ? (array.splice(i, 1), elementsRemoved = !0) : i++
        return elementsRemoved
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TestDownloadSpeed",
    extends: "com.google.fiber.speedtest.AbstractTransferTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    properties: [{name: "downloadSize", defaultValue: 1e7}],
    methods: [function getBigFile(id) {
        var self = this, request = this.pool.takeRequest()
        if (self.requests[id] = request, request.open("GET", this.getServerUrl(id) + "/download?size=" + encodeURIComponent(this.downloadSize)), request.responseType = "blob", request.addEventListener("load", function (evt) {
                self.requestsSucceeded++
            }), request.supportsProgress) {
            var last_loaded = 0
            request.addEventListener("progress", function (evt) {
                if (!self.running)return request.abort(), void 0
                var amt = evt.loaded - last_loaded
                last_loaded = evt.loaded, self.bytesTransferred += amt
            })
        } else request.addEventListener("load", function (evt) {
            return self.running ? (self.bytesTransferred += request.response.size, void 0) : (request.abort(), void 0)
        })
        request.addEventListener("loadend", function () {
            self.pool.returnRequest(request), request = null, self.requests[id] = null, self.running && self.getBigFile(id)
        }), this.requestsStarted++, request.send()
    }, function start() {
        if (this.running)return !1
        this.running = !0, this.bytesTransferred = 0, this.startMillis = window.performance.now(), this.endMillis = null, this.requestsStarted = 0, this.requestsSucceeded = 0
        for (var i = 0; i < this.numTransfers; i++)this.getBigFile(i)
        return !0
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "AbstractTransferTest",
    extends: "com.google.fiber.speedtest.AbstractSpeedTest",
    properties: [{
        model_: "IntProperty",
        name: "startPort",
        swiftDefaultValue: "3051",
        defaultValue: 3051
    }, {
        model_: "IntProperty",
        name: "endPort",
        swiftDefaultValue: "3070",
        defaultValue: 3070
    }, {model_: "ArrayProperty", name: "requests", swiftType: "[NSURLSessionTask]"}, {
        model_: "IntProperty",
        name: "numTransfers",
        swiftDefaultValue: "20",
        defaultValue: 20
    }, {model_: "IntProperty", name: "requestsStarted"}, {
        model_: "IntProperty",
        name: "requestsSucceeded"
    }, {model_: "LongProperty", name: "bytesTransferred", defaultValue: 0}, {
        name: "server", defaultValue: "", postSet: function (o, n) {
            if (!n)return this.baseUrl = "//" + window.location.hostname, n
            var index = n.search(/(:\d+)?\/?$/)
            return index >= 0 ? this.baseUrl = n.substr(0, index) : this.baseUrl = n, n
        }
    }, {
        name: "baseUrl", defaultValueFn: function () {
            return "//" + window.location.hostname
        }
    }, {name: "startPort"}, {name: "endPort"}],
    methods: [function getServerUrl(id) {
        var numPorts = this.endPort - this.startPort + 1, port = this.startPort + id % numPorts
        return this.baseUrl + ":" + port
    }, function abortRequests() {
        for (var i = 0; i < this.requests.length; i++)this.requests[i] && this.requests[i].abort()
    }, function start() {
        return !1
    }, function stop() {
        return !!this.running && (this.running = !1, this.abortRequests(), this.endMillis = window.performance.now(), !0)
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "AbstractSpeedTest",
    requires: ["com.google.fiber.speedtest.RequestPool"],
    properties: [{
        model_: "BooleanProperty",
        name: "running",
        swiftDefaultValue: "false",
        defaultValue: !1
    }, {name: "startMillis", defaultValue: ""}, {name: "endMillis", defaultValue: ""}, {name: "pool"}],
    methods: [function start() {
        return !1
    }, function stop() {
        return !1
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TestPingLatency",
    extends: "com.google.fiber.speedtest.AbstractSpeedTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    imports: ["setInterval", "clearInterval", "logger"],
    properties: [{model_: "FloatProperty", name: "minPingMillis"}, {
        model_: "FloatProperty",
        name: "meanPingMillis"
    }, {name: "runtimeMillis", defaultValue: 3e3}, {name: "timeoutMillis", defaultValue: 300}, {
        name: "server",
        defaultValue: ""
    }, {name: "pingsSent"}, {name: "pingsSucceeded"}, {name: "pingErrors"}, {name: "pingTimeouts"}, {name: "totalPingMillis"}, {name: "intervalId_"}, {name: "id"}, {name: "name"}, {name: "currentPing"}, {
        name: "exitOnSuccess",
        defaultValue: !1
    }],
    methods: [function receivePing(pingMillis) {
        !this.running || pingMillis <= 0 || (this.isNumber(this.minPingMillis) && this.minPingMillis > 0 ? this.minPingMillis = Math.min(pingMillis, this.minPingMillis) : this.minPingMillis = pingMillis, this.totalPingMillis += pingMillis, this.pingsSucceeded++, this.id ? this.logger.info("Ping to " + this.id + " (" + this.server + ") in " + pingMillis.toFixed(2) + " ms (min " + this.minPingMillis.toFixed(2) + " ms)") : this.logger.info("Ping " + pingMillis.toFixed(2) + " ms (min " + this.minPingMillis.toFixed(2) + " ms)"), this.meanPingMillis = this.totalPingMillis / this.pingsSucceeded, this.exitOnSuccess && this.stop())
    }, function ping() {
        var self = this
        if (self.running && !self.currentPing) {
            var started = window.performance.now(), request = this.pool.takeRequest()
            request.open("GET", this.server + "ping?time=" + encodeURIComponent(started)), request.responseType = "text", request.timeout = self.timeoutMillis, request.addEventListener("error", function (e) {
                var ended = window.performance.now(), error = "status " + request.status + " readyState " + request.readyState + " after " + (ended - started).toFixed(2) + " ms"
                return self.id ? self.logger.info("Ping error to " + self.id + " (" + self.server + ") " + error) : self.logger.info("Ping error status " + error), !1
            }), request.addEventListener("timeout", function (e) {
                return self.pingTimeouts++, self.id ? self.logger.warn("Ping to " + self.id + " (" + self.server + ") timed out after " + self.timeoutMillis + " ms") : self.logger.warn("Ping timed out after " + self.timeoutMillis + " ms"), !1
            }), request.addEventListener("load", function (evt) {
                if (self.running)return 200 != request.status ? (self.pingErrors++, void 0) : (self.receivePing(window.performance.now() - started), void 0)
            }), request.addEventListener("loadend", function () {
                self.pool.returnRequest(request), self.currentPing = null
            }), self.currentPing = request, self.pingsSent++, request.send()
        }
    }, function start() {
        return !this.running && (this.server ? this.logger.info("Starting ping to " + this.server + " with timeout " + this.timeoutMillis + " ms") : this.logger.info("Starting ping with timeout " + this.timeoutMillis + " ms"), this.running = !0, this.startMillis = window.performance.now(), this.endMillis = null, this.minPingMillis = "", this.meanPingMillis = 0, this.pingsSent = 0, this.pingsSucceeded = 0, this.totalPingMillis = 0, this.pingErrors = 0, this.pingTimeouts = 0, this.currentPing = null, this.intervalId_ = this.setInterval(function () {
                if (this.running)return window.performance.now() >= this.startMillis + this.runtimeMillis ? (this.stop(), void 0) : (this.ping(), void 0)
            }.bind(this), 100), !0)
    }, function stop() {
        return this.currentPing && (this.currentPing.abort(), this.currentPing = null), !!this.running && (this.running = !1, this.endMillis = window.performance.now(), this.intervalId_ && (this.clearInterval(this.intervalId_), this.intervalId_ = null), !0)
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TestUploadSpeed",
    extends: "com.google.fiber.speedtest.AbstractTransferTest",
    properties: [{name: "uploadData"}],
    methods: [function putBigFile(id) {
        var self = this, request = this.pool.takeRequest()
        self.requests[id] = request, request.open("POST", this.getServerUrl(id) + "/upload?time=" + encodeURIComponent(window.performance.now())), request.addEventListener("load", function (evt) {
            self.requestsSucceeded++
        })
        var last_loaded = 0
        request.addUploadEventListener("progress", function (evt) {
            if (!self.running)return request.abort(), void 0
            var amt = evt.loaded - last_loaded
            last_loaded = evt.loaded, self.bytesTransferred += amt
        }), request.addEventListener("loadend", function () {
            self.pool.returnRequest(request), request = null, self.requests[id] = null, self.running && self.putBigFile(id)
        }), this.requestsStarted++, request.send(this.uploadData)
    }, function start() {
        if (this.running)return !1
        this.running = !0, this.bytesTransferred = 0, this.startMillis = window.performance.now(), this.endMillis = null, this.requestsStarted = 0, this.requestsSucceeded = 0
        for (var i = 0; i < this.numTransfers; i++)this.putBigFile(i)
        return !0
    }, function stop() {
        return this.SUPER(), this.uploadData = null, !0
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TransferTestRunner",
    extends: "com.google.fiber.speedtest.AbstractSpeedTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    imports: ["setInterval", "clearInterval", "logger"],
    properties: [{
        name: "data", postSet: function (o, n) {
            return this.startMillis$ = n.startMillis$, this.endMillis$ = n.endMillis$, n
        }
    }, {name: "minRunTimeMillis", defaultValue: 5e3}, {
        name: "maxRunTimeMillis",
        defaultValue: 1e4
    }, {name: "minPostRampMillis", defaultValue: 2e3}, {name: "endRampUpTimeMillis"}, {
        model_: "ArrayProperty",
        name: "intervals",
        defaultValueFn: function () {
            return []
        }
    }, {name: "minIntervals", defaultValue: 10}, {name: "maxIntervals", defaultValue: 20}, {
        name: "maxVariance",
        defaultValue: .1
    }, {name: "initialVariance", defaultValue: 0}, {
        model_: "FloatProperty",
        name: "speed",
        units: "Mbps",
        defaultValue: 0,
        swiftDefaultValue: "0"
    }, {
        name: "intervalMillis",
        defaultValue: 100
    }, {name: "intervalId"}, {name: "shortSpeedMbps"}, {name: "longSpeedMbps"}, {name: "prevShortSpeedMbps"}, {name: "prevLongSpeedMbps"}, {name: "rampingUp"}, {
        name: "averageType",
        defaultValue: "SIMPLE"
    }, {
        name: "totalBytes", getter: function () {
            return this.intervals && this.intervals.length ? this.intervals[this.intervals.length - 1].totalBytes : 0
        }
    }],
    methods: [function start() {
        this.data.start() && (this.intervals = [{
            totalBytes: 0,
            offsetMillis: 0,
            shortSpeedMbps: 0,
            longSpeedMbps: 0,
            prevShortSpeedMbps: 0,
            prevLongSpeedMbps: 0
        }], this.intervalId = this.setInterval(this.update.bind(this), this.intervalMillis), this.rampingUp = !0), this.speed = 0
    }, function update() {
        var speed = 0, stop = !1
        if (this.data) {
            var interval = {
                totalBytes: this.data.bytesTransferred,
                offsetMillis: window.performance.now() - this.data.startMillis
            }
            this.intervals.push(interval), "EXPONENTIAL" == this.averageType ? (interval.shortSpeedMbps = this.calculateEma("shortSpeedMbps", this.minIntervals), interval.longSpeedMbps = this.calculateEma("longSpeedMbps", this.maxIntervals)) : (interval.shortSpeedMbps = this.getIntervalSpeed(this.minIntervals), interval.longSpeedMbps = this.getIntervalSpeed(this.maxIntervals)), this.prevShortSpeedMbps = this.shortSpeedMbps, this.prevLongSpeedMbps = this.longSpeedMbps, this.shortSpeedMbps = interval.shortSpeedMbps, this.longSpeedMbps = interval.longSpeedMbps, speed = (this.longSpeedMbps + this.shortSpeedMbps) / 2, this.isDone() && (this.clearInterval(this.intervalId), stop = !0)
        }
        this.speed = speed, this.logger.info("Speed: " + speed.toFixed(2) + " (Short: " + this.shortSpeedMbps.toFixed(2) + ", Long: " + this.longSpeedMbps.toFixed(2) + ")"), stop && (this.logger.info("Stopping transfer test"), this.data.stop())
    }, function isDone() {
        if (!this.longSpeedMbps || !this.shortSpeedMbps)return !1
        var runningTime = this.getRunningTime()
        if (runningTime > this.maxRunTimeMillis)return this.logger.info("Max runtime exceeded. Ending"), !0
        var maxVariance = this.getEffectiveMaxVariance(runningTime)
        if (this.rampingUp) {
            var limitMbps = this.prevShortSpeedMbps * (1 + maxVariance)
            if (this.shortSpeedMbps > limitMbps)return !1
            this.logger.info("Ramping up ended"), this.endRampUpMillis = window.performance.now(), this.rampingUp = !1
        }
        if (runningTime <= this.minRunTimeMillis)return !1
        var postRampMillis = window.performance.now() - this.endRampUpMillis
        if (postRampMillis < this.minPostRampMillis)return !1
        var variance = 1 - Math.min(this.shortSpeedMbps, this.longSpeedMbps) / Math.max(this.shortSpeedMbps, this.longSpeedMbps)
        return variance <= maxVariance
    }, function getIntervalSpeed(intervals) {
        if (!this.intervals.length || intervals <= 0)return 0
        var end = this.intervals.length - 1, last = this.intervals[end], start = Math.max(0, end - intervals), first = this.intervals[start], bytes = last.totalBytes - first.totalBytes, time = last.offsetMillis - first.offsetMillis
        return this.megabits(bytes, time)
    }, function calculateEma(rangeType, period) {
        var numIntervals = this.intervals.length
        if (0 != numIntervals) {
            if (1 == numIntervals)return this.intervals[0][rangeType] = 0, void 0
            var end = numIntervals - 1, last = this.intervals[end], prev = this.intervals[end - 1], prevEma = prev[rangeType], lastSpeed = this.getIntervalSpeed(1), percent = 2 / (period + 1), ema = lastSpeed * percent + prevEma * (1 - percent)
            return last[rangeType] = ema, ema
        }
    }, function getRunningTime() {
        if (!this.startMillis)return null
        var end = this.endMillis ? this.endMillis : window.performance.now()
        return end - this.startMillis
    }, function getEffectiveMaxVariance(opt_runningTime) {
        if (this.initialVariance <= 0 || this.initialVariance >= this.maxVariance)return this.maxVariance
        if (void 0 === opt_runningTime && (opt_runningTime = this.getRunningTime()), null === opt_runningTime || opt_runningTime <= this.minRunTimeMillis)return this.maxVariance
        var effectiveMaxVariance
        if (opt_runningTime >= this.maxRunTimeMillis)effectiveMaxVariance = this.maxVariance
        else {
            var runtimeRatio = (opt_runningTime - this.minRunTimeMillis) / (this.maxRunTimeMillis - this.minRunTimeMillis)
            effectiveMaxVariance = this.initialVariance + runtimeRatio * (this.maxVariance - this.initialVariance)
        }
        return effectiveMaxVariance
    }, function stop() {
        return this.intervalId && (this.clearInterval(this.intervalId), this.intervalId = null), this.data.stop()
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTestView",
    extends: "foam.ui.SimpleView",
    requires: ["com.google.fiber.speedtest.SpeedTestGauge", "foam.ui.md.FlatButton"],
    properties: [{
        name: "speedometerView", lazyFactory: function () {
            return this.SpeedTestGauge.create({data$: this.data.currentSpeedMbps$})
        }
    }, {
        name: "data", postSet: function (o, n) {
            o && o.running$.removeListener(this.onRunningChanged), n.running$.addListener(this.onRunningChanged)
        }
    }],
    actions: [{
        name: "showMoreMenu", label: "&#x205E;", code: function () {
            this.MoreMenuPopUp.create().open(this.X.$("more-menu"))
        }
    }],
    messages: [{
        model_: "Message",
        name: "speedTest",
        value: "Speed test",
        translationHint: "Label for date of last speed test."
    }, {
        model_: "Message",
        name: "uploadSpeedMbps",
        value: "UPLOAD",
        translationHint: "Label for upload speed indicator."
    }, {
        model_: "Message",
        name: "downloadSpeedMbps",
        value: "DOWNLOAD",
        translationHint: "Label for download speed indicator."
    }, {
        model_: "Message",
        name: "ping",
        value: "PING:",
        translationHint: "Label for ping indicator."
    }, {
        model_: "Message",
        name: "whatSpeedsToExpectLabel",
        value: "What speeds should I expect?",
        translationHint: "Label that, when clicked, brings the user to a help page that describes the speeds they should expect."
    }, {model_: "Message", name: "learnMore", value: "Learn more", translationHint: "Learn more"}],
    listeners: [{
        name: "onRunningChanged", code: function () {
            this.data.running ? this.$.classList.add("running") : this.$.classList.remove("running")
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate('html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video{margin:0;padding:0;border:0;font:inherit;font-size:100%;vertical-align:baseline}html, body{margin:0;padding:0;height:100%;background-color:#F5F5F5}.speed-test{-webkit-tap-highlight-color:rgba(0, 0, 0, 0);font-family:\'Roboto\', sans-serif;min-width:300px;position:relative;height:auto !important;height:100%;min-height:100%}#top{padding-bottom:270px}#footer{position:absolute;bottom:0;height:240px;width:100%;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;-webkit-align-content:center;align-content:center;background-color:#272A2C;font-family:"Roboto","Noto Sans",sans-serif}#logo{display:-webkit-flex;display:flex;-webkit-justify-content:space-between;justify-content:space-between;-webkit-align-content:center;align-content:center;-webkit-align-items:center;align-items:center;height:56px;background-color:#0091EA;width:100%;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, .14),0 4px 8px rgba(0, 0, 0, .28);box-shadow:0 0 4px rgba(0, 0, 0, .14),0 4px 8px rgba(0, 0, 0, .28);margin:0 0 6px 0;color:white}#logo img{padding-left:4px;height:38px;width:auto}#send-feedback, #send-feedback-large{padding:16px;text-decoration:none;color:white;font-weight:bold;cursor:pointer}#send-feedback-large{display:none}.flat-button{cursor:pointer}.container{max-width:600px;margin:auto}#header{display:-webkit-flex;display:flex;-webkit-justify-content:space-between;justify-content:space-between;-webkit-align-items:center;align-items:center;-webkit-align-content:center;align-content:center;margin:16px auto 6px;padding:0 12px}@media screen and (min-width: 800px){#header{padding:0}#logo img{padding-left:26px}#send-feedback{display:none}#send-feedback-large{display:inline}}#title{color:#0091EA;font-size:24px}#network{color:#333333;font-size:15px}#speed-test{-webkit-box-shadow:0 -1px 0 #e5e5e5,0 0 2px rgba(0, 0, 0, .12),0 2px 4px rgba(0, 0, 0, .24);box-shadow:0 -1px 0 #e5e5e5,0 0 2px rgba(0, 0, 0, .12),0 2px 4px rgba(0, 0, 0, .24)}#speedometer{background-color:#F9F9F9;text-align:center;height:211px;padding-top:16px}#speed-result{background-color:white;border-top:1px solid #DDD}.status{display:block;font-weight:700;font-size:14px;color:#666;padding-top:12px}.footer-row{display:-webkit-flex;display:flex;color:#666;font-size:16px;padding:8px 16px;-webkit-align-items:center;align-items:center}.underlined-content{border-bottom:solid 1px #DAD9D9}.footer-half{width:50%;text-align:center;-webkit-align-self:flex-start;align-self:flex-start}.footer-row .material-icons-extended{width:40px;color:#66BDF2}.speed-label{font-weight:700;padding:6px 8px 6px 16px}.label-row{display:-webkit-flex;display:flex;-webkit-align-items:stretch;align-items:stretch;-webkit-justify-content:center;justify-content:center;width:100%}.label-row .speed-label{padding:2px 16px 2px 2px}.footer-row .speed-value{white-space:nowrap;padding-right:32px;padding:6px 0}.transfer-speed{font-size:36px}.action-button{-webkit-box-shadow:0 0 0px rgba(0, 0, 0, .14),0 2px 2px rgba(0, 0, 0, .28);box-shadow:0 0 0px rgba(0, 0, 0, .14),0 2px 2px rgba(0, 0, 0, .28);background-color:#0091EA;border-radius:50% 50%;border-width:0;height:48px;width:48px;display:inline-block;font-size:24px;color:white;line-height:48px;text-align:center;float:right;margin:-24px 62px -24px -0;padding:0;transition:background-color 300ms, transform 300ms;-webkit-user-select:none;user-select:none}.action-button:focus{outline-width:0}.action-button:disabled{background-color:#7DC7F7;-webkit-transform:rotate(1.0turn);transform:rotate(1.0turn);-webkit-transform:rotate(1.0turn);cursor:default}.action-button img{margin:6px}#cancel-test{display:none}.running #run-test{display:none}.running #cancel-test{display:inline}#ping{padding-left:50px}#speeds{height:5em;padding-left:30px;padding-right:30px}#expected-speeds{text-align:center;padding:16px 8px;font-size:16px;color:#666}#expected-speeds a{text-decoration:none;color:#0091EA}#footer .footer-content{display:-webkit-flex;display:flex;-webkit-justify-content:space-around;justify-content:space-around;-webkit-align-items:flex-start;align-items:flex-start;-webkit-align-content:center;align-content:center;width:100%;margin:0 auto}#footer .footer-section{padding:24px 12px 0}#footer .footer-group-title{color:#fff;cursor:default;letter-spacing:2px;font-size:12px;font-weight:600;text-transform:uppercase}#footer .footer-link-group{margin:24px 0}#footer .footer-item{font-size:14px;line-height:16px;margin-top:8px}#footer .footer-link{color:#fff;opacity:.48;position:relative;-webkit-transition:opacity 160ms cubic-bezier(0.4, 0, 1, 1);transition:opacity 160ms cubic-bezier(0.4, 0, 1, 1)}#footer a{cursor:pointer;text-decoration:none}ol, ul{list-style:none}li{display:list-item;text-align:-webkit-match-parent}'),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="', self.id, '" class="speed-test">\n        <div id="top">\n          <div id="logo">\n            <img src="/logo.png" alt="Google Fiber">\n            ', self.createTemplateView("sendFeedback", {
                id: "send-feedback",
                className: "flat-button",
                tagName: "a"
            }), "\n            ", self.createTemplateView("sendFeedbackLarge", {
                id: "send-feedback-large",
                className: "flat-button",
                tagName: "a"
            }), '\n          </div>\n          <div id="header" class="container">\n            <h1 id="title">', self.speedTest, '</h1>\n            <div id="network">\n              ', self.createTemplateView("speedToLabel", {
                mode: "read-only",
                className: "speed-to-label"
            }), "\n              ", self.createTemplateView("speedTo", {
                mode: "read-only",
                className: "speed-to"
            }), '\n            </div>\n          </div>\n          <div id="speed-test" class="container">\n            <div id="speedometer">\n              ', this.speedometerView, "\n              ", self.createTemplateView("status", {
                mode: "read-only",
                extraClassName: "status"
            }), '\n            </div>\n            <div id="speed-result">\n              ', self.createTemplateView("runTest", {
                id: "run-test",
                className: "flat-button",
                extraClassName: "action-button"
            }), "\n              ", self.createTemplateView("cancelTest", {
                id: "cancel-test",
                className: "flat-button",
                extraClassName: "action-button"
            }), '\n              <div id="ping" class="footer-row">\n                <div class="speed-label">', self.ping, '</div>\n                <div class="speed-value">\n                  ', self.createTemplateView("ping", {mode: "read-only"}), "\n                  ", self.createTemplateView("pingUnits", {mode: "read-only"}), '\n                </div>\n              </div>\n              <div id="speeds" class="footer-row">\n                <div class="footer-half">\n                  <div class="label-row">\n                    <img src="/ic_file_download_black_24dp_1x.png">\n                    <div class="speed-label">', self.downloadSpeedMbps, '</div>\n                  </div>\n                  <div class="speed-value upload-speed">\n                    ', self.createTemplateView("downloadSpeedMbps", {
                mode: "read-only",
                className: "transfer-speed"
            }), "\n                    ", self.createTemplateView("downloadSpeedUnits", {
                mode: "read-only",
                className: "transfer-units"
            }), '\n                  </div>\n                </div>\n                <div class="footer-half">\n                  <div class="label-row">\n                    <img src="/ic_file_upload_black_24dp_1x.png">\n                    <div class="speed-label">', self.uploadSpeedMbps, '</div>\n                  </div>\n                  <div class="speed-value download-speed">\n                    ', self.createTemplateView("uploadSpeedMbps", {
                mode: "read-only",
                className: "transfer-speed"
            }), "\n                    ", self.createTemplateView("uploadSpeedUnits", {
                mode: "read-only",
                className: "transfer-units"
            }), '\n                  </div>\n                </div>\n              </div>\n              <div id="expected-speeds">\n                <span>', self.whatSpeedsToExpectLabel, '</span>\n                <a href="https://support.google.com/fiber/answer/6250056" target="_blank">\n                  ', self.learnMore, '\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id="footer">\n          <div class="footer-content container">\n            <div class="footer-section"><p class="footer-group-title">About</p>\n              <ul class="footer-link-group">\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://googlefiberblog.blogspot.com/"\n                                           target="_self">Blog</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://fiber.google.com/careers/"\n                                           target="_self">Careers</a>\n                </li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://fiber.google.com/legal/"\n                                           target="_blank">Privacy\n                  &amp; Terms</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://fiber.google.com/support/"\n                                           target="_self">Support</a></li>\n                </li>\n              </ul>\n            </div>\n            <div class="footer-section"><p class="footer-group-title">Social Media</p>\n              <ul class="footer-link-group">\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://plus.google.com/+GoogleFiber"\n                                           target="_blank">Google+</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://www.facebook.com/GoogleFiber"\n                                           target="_blank">Facebook</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://twitter.com/GoogleFiber"\n                                           target="_blank">Twitter</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://www.youtube.com/GoogleFiberOfficial"\n                                           target="_blank">YouTube</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    '), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTestGauge",
    extends: "foam.ui.SimpleView",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    properties: [{
        model_: "FloatProperty", name: "data", postSet: function (o, n) {
            if (this.$) {
                this.isNumber(n) ? this.units = "Mbps" : (this.units = "", n = 0)
                var min = .05, max = .446, percent = Math.min(Math.max(0, n / this.max), this.max), rotate
                rotate = percent <= .025 ? 10 * percent : percent <= .1 ? 10 * percent / 3 + 1 / 6 : percent <= .25 ? 5 * percent / 3 + 1 / 3 : percent / 3 + 2 / 3
                var rotateBy = Math.min(min + (max - min) * rotate, max), val = "rotate(" + rotateBy + "turn)"
                this.X.$(this.id + "-meter").style.transform = val, this.X.$(this.id + "-meter").style.webkitTransform = val
            }
        }
    }, {name: "max", defaultValue: 1e3}, {name: "units", defaultValue: "Mbps"}, {
        name: "shortUnits",
        defaultValue: "M"
    }],
    methods: [function initHTML() {
        this.SUPER(), this.data = this.data
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate('.gauge{display:inline-block;position:relative;overflow:hidden;height:84px;width:214px}.gauge, .inner-circle, .clip-left, .clip-right{background:#F9F9F9}.gauge:before{background:#F0F0F0;content:"";display:block;border-radius:50%/100%;border-bottom-left-radius:0;border-bottom-right-radius:0;height:0;padding-bottom:50%;width:100%}.inner-circle{content:"";display:block;border-radius:50%/100%;border-top-left-radius:0;border-top-right-radius:0;height:0;padding-bottom:37.5%;width:75%;-webkit-transform-origin:center top;transform-origin:center top;-webkit-transform:rotate(.5turn);transform:rotate(.5turn);margin:auto}.clip-left, .clip-right{height:100%;position:absolute;width:100%;z-index:1000}.clip-left{-webkit-transform:rotate(.05turn) translateX(-50%);transform:rotate(.05turn) translateX(-50%)}.clip-right{-webkit-transform:rotate(.95turn) translateX(50%);transform:rotate(.95turn) translateX(50%)}.meter{background:linear-gradient(to left, #F4FF81, #AEEA00);position:absolute;width:100%;height:0;padding-bottom:50%;border-radius:50% / 100%;border-top-left-radius:0;border-top-right-radius:0;transition:500ms;-webkit-transform-origin:center top;transform-origin:center top}.speed-test-gauge{text-align:center;position:relative;padding-top:26px}.tick{position:absolute;display:inline-block;z-index:1;margin-left:auto;margin-right:auto;right:0;left:0;top:0;font-weight:700;color:#000000;opacity:0.3;font-size:12px}.tick-unit{font-size:11px}.current-speed{display:block;font-weight:300;font-size:56px;color:#000000;opacity:0.6;margin-top:-32px}.current-speed-units{font-size:16px;width:0px;display:inline-block;margin-left:-12px}'),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="', self.id, '" class="speed-test-gauge">\n        <div class="tick" style="top: 84px; left: -260px;">\n          0<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 24px; left: -160px;">\n          ', this.max / 40, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 0px; left: 0px;">\n          ', this.max / 10, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 24px; left: 160px;">\n          ', this.max / 4, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 84px; left: 270px;">\n          ', this.max, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="gauge">\n          <div class="clip-left"></div>\n          <div class="clip-right"></div>\n          <div>\n            <div class="meter" id="', self.id, '-meter"></div>\n            <div class="inner-circle"></div>\n          </div>\n        </div>\n        <span class="current-speed">\n          ', self.createTemplateView("data", {mode: "read-only"}), "\n          ", self.createTemplateView("units", {
                mode: "read-only",
                extraClassName: "current-speed-units"
            }), "\n        </span>\n      </div>\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui.md",
    name: "FlatButton",
    extends: "foam.flow.Element",
    requires: ["foam.ui.Color", "foam.ui.Icon", "foam.ui.md.HaloView"],
    properties: [{
        name: "className", defaultValue: "md-button flatbutton noselect", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className.split(" ").concat(this.extraClassName.split(" ")).join(" "))
        }
    }, {
        name: "extraClassName", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className.split(" ").concat(this.extraClassName.split(" ")).join(" "))
        }
    }, {model_: "BooleanProperty", name: "raised", type: "Boolean", defaultValue: !1}, {
        model_: "foam.ui.ColorProperty",
        name: "color",
        defaultValueFn: function () {
            return "ICON_ONLY" == this.displayMode_ ? "currentColor" : "#02A8F3"
        },
        help: "The text and background color to use for the active state"
    }, {
        model_: "StringProperty", name: "font", type: "String", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.font = nu)
        }
    }, {
        model_: "FloatProperty", name: "alpha", type: "Float", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.opacity = null === nu ? "" : nu)
        }, defaultValue: null
    }, {
        model_: "StringProperty", name: "background", type: "String", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.background = nu)
        }
    }, {
        model_: "foam.ui.ColorProperty", name: "haloColor", postSet: function (old, nu) {
            old || Events.unfollow(this.currentColor_$, this.haloColor_$), nu ? this.haloColor_ = nu : Events.follow(this.currentColor_$, this.haloColor_$)
        }
    }, {
        name: "action", postSet: function (_, nu) {
            this.bindData()
        }
    }, {
        name: "data", postSet: function () {
            this.bindData()
        }
    }, {name: "escapeHtml", defaultValue: !0}, {
        model_: "foam.core.types.StringEnumProperty",
        name: "displayMode",
        defaultValue: "ICON_AND_LABEL",
        choices: [["ICON_AND_LABEL", "Icon and Label"], ["ICON_ONLY", "Icon Only"], ["LABEL_ONLY", "Label Only"]]
    }, {
        model_: "foam.core.types.StringEnumProperty", name: "displayMode_", getter: function () {
            return this.iconUrl || this.ligature ? this.displayMode : "LABEL_ONLY"
        }
    }, {model_: "StringProperty", name: "iconUrl", type: "String"}, {
        model_: "StringProperty",
        name: "ligature",
        type: "String"
    }, {
        name: "icon", lazyFactory: function () {
            return this.Icon.create({
                url$: this.iconUrl$,
                ligature$: this.ligature$,
                color$: this.currentColor_$
            }, this.Y)
        }
    }, {
        name: "halo", lazyFactory: function () {
            return this.HaloView.create({
                className: "halo",
                recentering: !1,
                pressedAlpha: .2,
                startAlpha: .2,
                finishAlpha: 0
            }, this.Y)
        }
    }, {
        name: "tooltip", defaultValueFn: function () {
            return this.action && this.action.help
        }
    }, {
        model_: "foam.ui.ColorProperty",
        name: "currentColor_",
        visibility: "hidden",
        hidden: !0,
        defaultValueFn: function () {
            return this.color
        },
        preSet: function (old, nu) {
            return old !== nu && nu && this.Color.isInstance(nu) ? (this.alpha = nu.alpha, nu.alpha = 1, nu) : nu
        }
    }, {
        model_: "foam.ui.ColorProperty",
        name: "haloColor_",
        visibility: "hidden",
        hidden: !0
    }, {model_: "BooleanProperty", name: "isHidden", type: "Boolean", defaultValue: !1}],
    methods: [function init() {
        this.SUPER(), this.haloColor || Events.follow(this.currentColor_$, this.haloColor_$), Events.map(this.haloColor_$, this.halo.color$, function (color) {
            if ("currentColor" == color && this.$) {
                var s = this.X.window.getComputedStyle(this.$)
                if (s && s.color)return s.color
            }
            return color.toString()
        }.bind(this))
    }, function initHTML() {
        this.SUPER(), this.currentColor_$.addListener(function () {
            this.$ && (this.$.style.color = this.currentColor_.toString())
        }.bind(this)), this.$.style.color = this.currentColor_.toString(), this.$.style.font = this.font, this.$.style.opacity = this.alpha, this.$.style.background = this.background
        var temp = this.haloColor_
        this.haloColor_ = "black", this.haloColor_ = temp
    }, function bindData() {
        if (this.action && this.data) {
            this.iconUrl || (this.iconUrl = this.action.iconUrl), this.ligature || (this.ligature = this.action.ligature)
            var self = this
            this.action.labelFn && this.X.dynamicFn(function () {
                self.action.label = self.action.labelFn.call(self.data, self.action)
            }, function () {
                self.$ && (self.X.document.getElementById(self.id + "CONTENT").innerHTML = self.labelHTML())
            }), this.X.dynamicFn(function () {
                self.action.isEnabled.call(self.data, self.action)
            }, function () {
                self.action.isEnabled.call(self.data, self.action) ? self.currentColor_ = self.color : self.currentColor_ = "rgba(0,0,0,0.65)"
            }), this.X.dynamicFn(function () {
                self.action.isAvailable.call(self.data, self.action)
            }, function () {
                self.isHidden = !self.action.isAvailable.call(self.data, self.action)
            })
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate("flat-button{display:inline-flex;-webkit-align-items:baseline;align-items:baseline;-webkit-justify-content:center;justify-content:center;overflow:hidden;position:relative;border-radius:2px;cursor:pointer}flat-button.md-style-trait-inline{padding:8px 8px;margin:-4px -4px}flat-button .halo{border-radius:inherit}flat-button spacer{display:block;width:12px}flat-button.icon-only spacer, flat-button.label-only spacer{width:0px}flat-button.icon-only{border-radius:50%;transition:transform 250ms ease, width 249ms ease, margin 249ms ease, padding 249ms ease;transition-delay:249ms, 0ms, 0ms, 0ms;-webkit-transform:unset;transform:unset;width:40px;-webkit-flex-shrink:0;flex-shrink:0}flat-button.floatingActionButton{padding:10px}flat-button.md-button .md-button-label{color:inherit}flat-button.hidden, flat-button.label-only .flat-button-icon-container, flat-button.icon-only .md-button-label{display:none}flat-button.icon-only.hidden{display:inherit!important;-webkit-transform:rotateZ(180deg) scaleY(0);transform:rotateZ(180deg) scaleY(0);transition-delay:0ms, 250ms, 250ms, 250ms;width:0;margin:0;padding:0}flat-button:not(.label-only) .md-button-label{text-transform:none}flat-button .halo{position:absolute;left:0;top:0;z-index:2}flat-button:not(.icon-only) .flat-button-icon-container{width:24px;height:0px;position:relative}flat-button:not(.icon-only) .flat-button-icon{position:absolute;left:0px;bottom:-7px}flat-button.icon-only.floatingActionButton{width:44px;height:44px}"),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      <", self.tagName, ' id="', self.id, '" ', this.cssClassAttr(), " >\n        ", self.halo, '\n        <div class="flat-button-icon-container">\n          <div class="flat-button-icon">\n            ', self.icon, '\n          </div>\n        </div>\n        <spacer>\n        </spacer>\n        <span id="', this.id + "CONTENT", '" class="md-button-label">'), this.labelHTML(out), out("</span>\n      </", self.tagName, ">\n      "), this.on("click", function (e) {
                e.preventDefault(), e.stopPropagation(), self.action.maybeCall(self.X, self.data)
            }, this.id), this.setClass("icon-only", function () {
                return this.iconUrl, this.ligature, this.displayMode, "ICON_ONLY" === this.displayMode_
            }, this.id), this.setClass("label-only", function () {
                return this.iconUrl, this.ligature, this.displayMode, "LABEL_ONLY" === this.displayMode_
            }, this.id), this.setClass("hidden", function () {
                return self.isHidden
            }, this.id), this.setClass("raised", function () {
                return self.raised
            }, this.id), out("\n    "), out.toString()
        }, language: "html"
    }, {
        name: "labelHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      "), this.action ? (out("\n        "), this.escapeHtml ? out("\n          ", escapeHTML(this.action.label), "\n        ") : out("\n          ", this.action.label, "\n        "), out("\n      ")) : this.inner ? out("\n         ", this.inner(), "\n      ") : out("label"), out("\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "Color",
    properties: [{
        model_: "IntProperty", name: "red", type: "Int", preSet: function (_, v) {
            return Math.max(0, Math.min(255, v))
        }
    }, {
        model_: "IntProperty", name: "green", type: "Int", preSet: function (_, v) {
            return Math.max(0, Math.min(255, v))
        }
    }, {
        model_: "IntProperty", name: "blue", type: "Int", preSet: function (_, v) {
            return Math.max(0, Math.min(255, v))
        }
    }, {
        model_: "FloatProperty", name: "alpha", type: "Float", preSet: function (_, v) {
            return Math.max(0, Math.min(1, v))
        }
    }],
    methods: [function toString() {
        return "rgba(" + this.red + "," + this.green + "," + this.blue + "," + this.alpha + ")"
    }]
}), CLASS({
    package: "foam.ui",
    name: "Icon",
    extends: "foam.ui.SimpleView",
    requires: ["foam.fonts.LigatureTester", "foam.ui.ImageView", "foam.ui.LigatureView"],
    imports: ["document"],
    properties: [{model_: "StringProperty", name: "url", type: "String"}, {
        model_: "StringProperty",
        name: "ligature",
        type: "String",
        postSet: function (old, nu) {
            old !== nu && nu && this.document.createElement && (this.ligatureTester = this.LigatureTester.create({
                ligature$: this.ligature$,
                expectedWidth$: this.width$,
                expectedHeight$: this.height$,
                ligatureViewFactory: function () {
                    return this.LigatureView.create({
                        data$: this.ligature$,
                        color$: this.color$,
                        fontSize$: this.fontSize$,
                        className$: this.ligatureClassName$
                    }, this.Y)
                }.bind(this)
            }, this.Y))
        }
    }, {model_: "IntProperty", name: "width", type: "Int", defaultValue: 24}, {
        model_: "IntProperty",
        name: "height",
        type: "Int",
        defaultValue: 24
    }, {
        model_: "foam.ui.ColorProperty", name: "color", lazyFactory: function () {
            return "currentColor"
        }, postSet: function (old, nu) {
            old && old.alpha$ && Events.unfollow(old.alpha$, this.alpha$), nu && nu.alpha$ && Events.follow(nu.alpha$, this.alpha$)
        }
    }, {model_: "FloatProperty", name: "alpha", type: "Float", defaultValue: 1}, {
        model_: "IntProperty",
        name: "fontSize",
        type: "Int",
        defaultValue: 24
    }, {
        model_: "StringProperty",
        name: "imageClassName",
        type: "String",
        defaultValue: "icon"
    }, {
        model_: "StringProperty",
        name: "imageClassName",
        type: "String",
        defaultValue: "material-icons-extended"
    }, {
        name: "imageView", lazyFactory: function () {
            return this.ImageView.create({
                data$: this.url$,
                className$: this.imageClassName$,
                alpha$: this.alpha$,
                displayWidth$: this.width$,
                displayHeight$: this.height$
            }, this.Y)
        }
    }, {
        name: "ligatureView", defaultValue: null, postSet: function (old, nu) {
            if (old !== nu && this.$) {
                for (var i = 0; i < this.children.length; ++i)this.children[i].destroy()
                this.children = []
                var out = TemplateOutput.create(nu)
                nu.toHTML(out), this.$.innerHTML = out.toString(), nu.initHTML(), this.addChild(nu)
            }
        }
    }, {name: "ligatureTester", defaultValue: null}],
    methods: [function init() {
        this.SUPER(), this.ligatureTester && this.ligatureTester.ligatureViewFuture(function (ligatureView) {
            this.ligatureView = ligatureView
        }.bind(this))
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <icon id="', self.id, '" ', self.cssClassAttr(), ">\n        "), this.ligatureView ? out("\n             ", self.ligatureView, "\n        ") : out("\n             ", self.imageView, "\n        "), out("\n      </icon>\n    "), out.toString()
        }, language: "html"
    }, {name: "CSS", code: ConstantTemplate("icon{display:block}"), language: "css"}]
}), CLASS({
    package: "foam.fonts",
    name: "LigatureTester",
    requires: ["foam.ui.LigatureView"],
    imports: ["window", "document"],
    properties: [{
        name: "ligature", defaultValue: "accessibility", postSet: function (old, nu) {
            old !== nu && this.ligatureView && (this.ligatureView.data = nu)
        }
    }, {
        model_: "IntProperty",
        name: "expectedWidth",
        type: "Int",
        required: !0,
        defaultValue: 24
    }, {
        model_: "IntProperty",
        name: "expectedHeight",
        type: "Int",
        required: !0,
        defaultValue: 24
    }, {model_: "IntProperty", name: "timeout", type: "Int", units: "ms", defaultValue: 1e3}, {
        name: "$parent",
        lazyFactory: function () {
            return this.document.createElement("div")
        },
        postSet: function (old, nu) {
            old !== nu && (old && (this.document.body.removeChild(old), old.removeEventListener("scroll", this.onParentScroll)), nu && (this.initParentStyle(), this.document.body.appendChild(nu), nu.addEventListener("scroll", this.onParentScroll)))
        }
    }, {
        name: "parentStyle", factory: function () {
            return {
                position: "fixed",
                bottom: "0",
                right: "0",
                visibility: "hidden",
                width: "1px",
                height: "1px",
                overflow: "hidden",
                "z-index": "-1000"
            }
        }, postSet: function (old, nu) {
            old !== nu && this.$parent && this.initParentStyle()
        }
    }, {
        model_: "ViewFactoryProperty",
        name: "ligatureViewFactory",
        type: "ViewFactory",
        defaultValue: "foam.ui.LigatureView"
    }, {
        name: "ligatureView", factory: function () {
            return this.ligatureViewFactory({data$: this.ligature$})
        }, postSet: function (old, nu) {
            if (old !== nu && nu) {
                var out = TemplateOutput.create(nu)
                nu.toHTML(out), this.$parent.innerHTML = out.toString(), nu.initHTML(), this.$parent.scrollTop = this.$parent.scrollHeight - this.$parent.clientHeight
            }
        }
    }, {
        name: "ligatureViewFuture", lazyFactory: function () {
            return this.ligatureViewFuture_.get
        }
    }, {
        name: "ligatureViewFuture_", lazyFactory: function () {
            return afuture()
        }
    }, {model_: "IntProperty", name: "timeoutID", type: "Int"}],
    methods: [function init() {
        this.SUPER(), this.timeoutID = this.window.setTimeout(function () {
            this.ligatureViewFuture_.set(null), this.ligatureView = this.$parent = null
        }.bind(this), this.timeout)
    }, function initParentStyle() {
        var parent = this.$parent
        Object_forEach(this.parentStyle, function (value, key) {
            parent.style[key] = value
        })
    }],
    listeners: [{
        name: "onParentScroll", code: function () {
            this.ligatureView && this.ligatureView.$ && this.ligatureView.width === this.expectedWidth && this.ligatureView.height === this.expectedHeight && (this.window.clearTimeout(this.timeoutID), this.ligatureViewFuture_.set(this.ligatureView), this.ligatureView = this.$parent = null)
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "LigatureView",
    extends: "foam.ui.SimpleView",
    properties: [{
        model_: "StringProperty",
        name: "data",
        type: "String",
        defaultValue: "accessibility",
        postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.textContent = nu)
        }
    }, {
        model_: "StringProperty", name: "tagName", type: "String", defaultValue: "i", postSet: function (old, nu) {
            if (old !== nu && this.$) {
                var out = TemplateOutput.create(this)
                this.toHTML(out), this.$.outerHTML = out.toString()
            }
        }
    }, {
        model_: "StringProperty",
        name: "className",
        type: "String",
        defaultValue: "material-icons-extended",
        postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className + (this.extraClassName ? " " + this.extraClassName : ""))
        }
    }, {
        model_: "StringProperty", name: "extraClassName", type: "String", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className + (this.extraClassName ? " " + this.extraClassName : ""))
        }
    }, {
        model_: "IntProperty", name: "width", type: "Int", getter: function () {
            return this.$ ? this.$.scrollWidth : 0
        }
    }, {
        model_: "IntProperty", name: "height", type: "Int", getter: function () {
            return this.$ ? this.$.scrollHeight : 0
        }
    }, {
        model_: "IntProperty", name: "fontSize", type: "Int", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style["font-size"] = nu + "px")
        }, defaultValue: 24
    }, {
        name: "color", defaultValue: "currentColor", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.color = nu)
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      <", escapeHTML(this.tagName), ' id="', self.id, '" ', self.cssClassAttr(), '\n                        style="font-size: ', escapeHTML(this.fontSize), "px; color: ", self.color, '">', self.data, "</", self.tagName, ">\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "ImageView",
    extends: "foam.ui.View",
    properties: [{name: "className", defaultValue: "imageView"}, {name: "backupImage"}, {
        name: "domValue",
        postSet: function (oldValue, newValue) {
            oldValue && Events.unfollow(this.data$, oldValue), newValue && Events.follow(this.data$, newValue)
        }
    }, {
        name: "displayWidth", postSet: function (_, newValue) {
            this.$ && (this.$.style.width = newValue)
        }
    }, {
        name: "displayHeight", postSet: function (_, newValue) {
            this.$ && (this.$.style.height = newValue)
        }
    }, {
        name: "alpha", defaultValue: 1, postSet: function (_, newValue) {
            this.$ && (this.$.style.opacity = newValue)
        }
    }],
    methods: [function toHTML() {
        var src = window.IS_CHROME_APP && !this.isSupportedUrl(this.data) ? this.backupImage ? ' src="' + this.backupImage + '"' : "" : ' src="' + this.data + '"'
        return "<img " + this.cssClassAttr() + ' id="' + this.id + '"' + src + 'style="opacity:' + this.alpha + '">'
    }, function isSupportedUrl(url) {
        return url = url.trim().toLowerCase(), url.startsWith("data:") || url.startsWith("blob:") || url.startsWith("filesystem:")
    }, function initHTML() {
        if (this.SUPER(), this.backupImage && this.$.addEventListener("error", function () {
                this.data = this.backupImage
            }.bind(this)), window.IS_CHROME_APP && !this.isSupportedUrl(this.data)) {
            var self = this, xhr = new XMLHttpRequest
            xhr.open("GET", this.data), xhr.responseType = "blob", xhr.asend(function (blob) {
                blob && (self.$.src = URL.createObjectURL(blob))
            })
        } else this.domValue = DomValue.create(this.$, void 0, "src"), this.displayHeight = this.displayHeight, this.displayWidth = this.displayWidth
    }]
}), CLASS({
    package: "foam.ui",
    name: "View",
    extends: "foam.ui.DestructiveDataView",
    traits: ["foam.ui.HTMLViewTrait", "foam.ui.U2ViewTrait"],
    requires: ["Property"],
    exports: ["propertyViewProperty"],
    properties: [{
        name: "propertyViewProperty", type: "Property", defaultValueFn: function () {
            return this.Property.DETAIL_VIEW
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "DestructiveDataView",
    extends: "foam.ui.BaseView",
    requires: ["SimpleValue"],
    properties: [{
        name: "data", preSet: function (old, nu) {
            return this.shouldDestroy(old, nu) && this.destroy(), nu
        }, postSet: function (old, nu) {
            this.shouldDestroy(old, nu) && this.construct()
        }
    }, {
        name: "dataLinkedChildren", factory: function () {
            return []
        }
    }],
    methods: [function shouldDestroy(old, nu) {
        return !0
    }, function destroy(isParentDestroyed) {
        isParentDestroyed || (this.dataLinkedChildren.forEach(function (child) {
            Events.unfollow(this.data$, child.data$)
        }.bind(this)), this.dataLinkedChildren = []), this.SUPER(isParentDestroyed)
    }, function addDataChild(child) {
        Events.follow(this.data$, child.data$), this.dataLinkedChildren.push(child), this.addChild(child)
    }]
}), CLASS({
    package: "foam.ui",
    name: "ColorProperty",
    extends: "ColorProperty",
    requires: ["foam.ui.Color"],
    properties: [{
        name: "adapt", defaultValue: function (old, nu, self) {
            if (old === nu || self.Color.isInstance(nu))return nu
            if ("currentColor" == nu)return nu
            var c = self.Color.create(), rgb = self.COLORS[nu]
            if (rgb)return c.red = rgb[0], c.green = rgb[1], c.blue = rgb[2], c.alpha = 1, c
            if (rgb = nu.match(/^\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])\s*$/), rgb)return c.red = parseInt(rgb[1] + rgb[1], 16), c.green = parseInt(rgb[2] + rgb[2], 16), c.blue = parseInt(rgb[3] + rgb[3], 16), c.alpha = 1, c
            if (rgb = nu.match(/^\s*#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])\s*$/), rgb)return c.red = parseInt(rgb[1], 16), c.green = parseInt(rgb[2], 16), c.blue = parseInt(rgb[3], 16), c.alpha = 1, c
            if (rgb = nu.match(/^\s*rgb[(]\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*[)]\s*$/), rgb)return c.red = parseInt(rgb[1]), c.green = parseInt(rgb[2]), c.blue = parseInt(rgb[3]), c.alpha = 1, c
            var rgba = nu.match(/^\s*rgba[(]\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]*[.]?[0-9]*)\s*[)]\s*$/)
            return rgba ? (c.red = parseInt(rgba[1]), c.green = parseInt(rgba[2]), c.blue = parseInt(rgba[3]), c.alpha = parseFloat(rgba[4]), c) : (c.red = c.green = c.blue = 0, c.alpha = 1, c)
        }
    }],
    constants: [{
        name: "COLORS",
        value: {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50]
        }
    }]
}), CLASS({
    package: "foam.ui.md",
    name: "HaloView",
    extends: "foam.graphics.CView",
    requires: ["foam.ui.md.Halo", "foam.ui.md.HaloCViewView as CViewView"],
    properties: [{name: "background", defaultValue: "rgba(0,0,0,0)"}, {
        model_: "ViewFactoryProperty",
        name: "halo",
        type: "ViewFactory",
        defaultValue: {factory_: "foam.ui.md.Halo"}
    }, {
        name: "haloView", factory: function () {
            return this.halo({
                easeInTime$: this.easeInTime$,
                easeOutTime$: this.easeOutTime$,
                startAlpha$: this.startAlpha$,
                pressedAlpha$: this.pressedAlpha$,
                finishAlpha$: this.finishAlpha$,
                color$: this.color$,
                recentering$: this.recentering$
            }, this.Y)
        }
    }, {
        name: "style", defaultValue: "solid", postSet: function (_, style) {
            style !== this.RING_INNER_COLOR && this.setColorAndBorder()
        }
    }, {name: "easeInTime", defaultValue: 200}, {name: "easeOutTime", defaultValue: 150}, {
        name: "startAlpha",
        defaultValue: .8
    }, {name: "pressedAlpha", defaultValue: .4}, {
        name: "finishAlpha",
        defaultValue: 0
    }, {name: "color"}, {name: "recentering", defaultValue: !0}],
    methods: [function init() {
        this.SUPER(), this.addChild(this.haloView)
    }]
}), CLASS({
    package: "foam.ui.md",
    name: "Halo",
    extends: "foam.graphics.Circle",
    properties: [{
        name: "style", defaultValue: "solid", postSet: function (_, style) {
            style !== this.RING_INNER_COLOR && this.setColorAndBorder()
        }
    }, {name: "state_", defaultValue: "default"}, {
        name: "nextColor_", defaultValueFn: function () {
            return this.color
        }
    }, {
        name: "color", preSet: function (old, nu) {
            return "default" !== this.state_ ? (this.nextColor_ = nu, old) : nu
        }
    }, {name: "easeInTime", defaultValue: 200}, {name: "easeOutTime", defaultValue: 150}, {
        name: "startAlpha",
        defaultValue: .8
    }, {name: "pressedAlpha", defaultValue: .4}, {name: "finishAlpha", defaultValue: 0}, {
        name: "alpha",
        defaultValue: 0
    }, {name: "recentering", defaultValue: !0}, {
        model_: "FunctionProperty",
        name: "isEnabled",
        type: "Function",
        defaultValue: function () {
            return !0
        }
    }],
    constants: [{name: "RING_INNER_COLOR", value: "rgba(0, 0, 0, 0)"}],
    methods: [function setColorAndBorder() {
        if ("ring" === this.style) {
            var color = this.color
            this.border = color, this.borderWidth = 12, this.color = this.RING_INNER_COLOR
        }
    }, function initCView() {
        this.$.addEventListener("mousedown", this.onMouseDown), this.$.addEventListener("mouseup", this.onMouseUp), this.$.addEventListener("mouseleave", this.onMouseUp), this.$.addEventListener("touchstart", this.onMouseDown), this.$.addEventListener("touchend", this.onMouseUp), this.$.addEventListener("touchleave", this.onMouseUp), this.$.addEventListener("touchcancel", this.onMouseUp)
    }, function isTouchInRect(t, rect) {
        return t.clientX >= rect.left && t.clientX <= rect.right && t.clientY >= rect.top && t.clientY <= rect.bottom
    }],
    listeners: [{
        name: "onMouseDown", code: function (evt) {
            if ("default" === this.state_ && this.isEnabled()) {
                if (this.state_ = "pressing", "touchstart" === evt.type) {
                    for (var rect = this.$.getBoundingClientRect(), touchFound = !1, t, i = 0; i < evt.touches.length; ++i)if (t = evt.touches[i], this.isTouchInRect(t, rect)) {
                        touchFound = !0
                        break
                    }
                    touchFound ? (this.x = t.clientX - rect.left, this.y = t.clientY - rect.top) : (console.warn("No touches", evt.touches, "in element rect", rect), this.x = rect.width / 2, this.y = rect.height / 2)
                } else this.x = evt.offsetX, this.y = evt.offsetY
                this.r = 2, this.alpha = this.startAlpha
                var recentering = this.recentering
                this.X.animate(this.easeInTime, function () {
                    recentering ? (this.x = this.parent.width / 2, this.y = this.parent.height / 2, this.r = Math.min(28, Math.min(this.$.clientWidth, this.parent.height) / 2)) : this.r = Math.max(28, Math.max(this.$.clientWidth, this.parent.height)), this.alpha = this.pressedAlpha
                }.bind(this), void 0, function () {
                    "cancelled" === this.state_ ? (this.state_ = "pressed", this.onMouseUp()) : this.state_ = "pressed"
                }.bind(this))()
            }
        }
    }, {
        name: "onMouseUp", code: function (evt) {
            if ("default" !== this.state_)return "pressing" === this.state_ ? (this.state_ = "cancelled", void 0) : ("cancelled" !== this.state_ && (this.state_ = "released", this.X.animate(this.easeOutTime, function () {
                this.alpha = this.finishAlpha
            }.bind(this), Movement.easeIn(.5), function () {
                "released" === this.state_ && (this.state_ = "default", this.color = this.nextColor_)
            }.bind(this))()), void 0)
        }
    }]
}), CLASS({
    package: "foam.graphics",
    name: "Circle",
    extends: "foam.graphics.CView",
    properties: [{
        model_: "StringProperty",
        name: "border",
        label: "Border Color",
        type: "String",
        defaultValue: ""
    }, {name: "borderWidth", defaultValue: 1}, {
        model_: "FloatProperty",
        name: "r",
        label: "Radius",
        type: "Float",
        defaultValue: 20
    }, {name: "startAngle", defaultValue: 0}, {name: "endAngle", defaultValue: 6.283185307179586}, {
        name: "width",
        defaultValueFn: function () {
            return 2 * (this.r + (this.border ? this.borderWidth : 0))
        }
    }, {
        name: "height", defaultValueFn: function () {
            return 2 * (this.r + (this.border ? this.borderWidth : 0))
        }
    }],
    methods: [function paintSelf(c) {
        c && this.r && (this.color && (c.beginPath(), c.moveTo(0, 0), c.arc(0, 0, this.r, -this.endAngle, -this.startAngle, !1), c.closePath(), c.fillStyle = this.color, c.fill()), this.paintBorder(c))
    }, function paintBorder(c) {
        this.border && (c.lineWidth = this.borderWidth, c.beginPath(), c.arc(0, 0, this.r + this.borderWidth / 2 - 1, this.startAngle, this.endAngle), c.closePath(), c.strokeStyle = this.border, c.stroke())
    }, function intersects(c) {
        var r = this.r + c.r
        return this.border && (r += this.borderWidth - 2), c.border && (r += c.borderWidth - 2), Movement.distance(this.x - c.x, this.y - c.y) <= r
    }]
}), CLASS({
    package: "foam.graphics",
    name: "CView",
    label: "CView",
    traits: ["foam.patterns.ChildTreeTrait"],
    requires: ["foam.graphics.PositionedCViewView", "foam.graphics.CViewView"],
    properties: [{
        name: "view", visibility: "hidden", hidden: !0, transient: !0, postSet: function (_, view) {
            for (var key in this.children) {
                var child = this.children[key]
                child.view = view, view && child.addListener(view.paint)
            }
        }
    }, {name: "children", visibility: "hidden", hidden: !0}, {
        name: "$",
        visibility: "hidden",
        hidden: !0,
        transient: !0,
        defaultValueFn: function () {
            return this.view && this.view.$
        }
    }, {name: "state", defaultValue: "initial"}, {
        model_: "BooleanProperty",
        name: "suspended",
        type: "Boolean",
        defaultValue: !1
    }, {
        name: "className", defaultValue: "", postSet: function () {
            this.$ && (this.$.className = this.className)
        }, help: "CSS class name(s), space separated. Used if adapted with a CViewView."
    }, {model_: "FloatProperty", name: "x", type: "Float", defaultValue: 0}, {
        model_: "FloatProperty",
        name: "y",
        type: "Float",
        defaultValue: 0
    }, {
        model_: "FloatProperty",
        name: "a",
        label: "Rotation",
        type: "Float",
        defaultValue: 0
    }, {model_: "FloatProperty", name: "scaleX", type: "Float", defaultValue: 1}, {
        model_: "FloatProperty",
        name: "scaleY",
        type: "Float",
        defaultValue: 1
    }, {
        name: "canvasX", visibility: "hidden", hidden: !0, getter: function () {
            return this.x + (this.parent ? this.parent.canvasX : 0)
        }
    }, {
        name: "canvasY", visibility: "hidden", hidden: !0, getter: function () {
            return this.y + (this.parent ? this.parent.canvasY : 0)
        }
    }, {model_: "IntProperty", name: "width", type: "Int", defaultValue: 10}, {
        model_: "IntProperty",
        name: "height",
        type: "Int",
        defaultValue: 10
    }, {model_: "FloatProperty", name: "alpha", type: "Float", defaultValue: 1}, {
        model_: "StringProperty",
        name: "color",
        label: "Foreground Color",
        type: "String",
        defaultValue: "black"
    }, {
        model_: "StringProperty",
        name: "background",
        label: "Background Color",
        type: "String",
        defaultValue: "white"
    }, {name: "font"}, {model_: "BooleanProperty", name: "clipped", type: "Boolean", defaultValue: !1}],
    methods: [function toView_() {
        if (!this.view) {
            var params = {cview: this}
            this.className && (params.className = this.className), this.tooltip && (params.tooltip = this.tooltip), this.speechLabel && (params.speechLabel = this.speechLabel), this.tabIndex && (params.tabIndex = this.tabIndex), this.role && (params.role = this.role), this.data$ && (params.data$ = this.data$), this.view = this.CViewView.create(params)
        }
        return this.view
    }, function toGLView_() {
        var model = this.X.lookup("foam.graphics.webgl.CViewGLView")
        return model ? model.create({sourceView: this}, this.Y) : ""
    }, function toPositionedView_() {
        if (!this.view) {
            var params = {cview: this}
            this.className && (params.className = this.className), this.view = this.PositionedCViewView.create(params)
        }
        return this.view
    }, function initCView() {
    }, function write(opt_X) {
        var X = opt_X || this.X
        X.writeView(this.toView_(), X)
    }, function addChild(child) {
        if (this.SUPER(child), child === this, this.view) {
            child.view = this.view, child.addListener(this.view.paint)
            try {
                this.view.paint()
            } catch (x) {
            }
        }
        return this
    }, function removeChild(child) {
        return this.SUPER(child), child.view = void 0, this.view && (child.removeListener(this.view.paint), this.view.paint()), this
    }, function removeAllChildren(child) {
        for (var i = this.children.length - 1; i >= 0; i--)this.removeChild(this.children[i])
        return this
    }, function findChildAt(x, y) {
        for (var c2 = {x: x, y: y, r: 1}, cs = this.children, i = cs.length - 1; i >= 0; i--) {
            var c1 = cs[i]
            if (c1.intersects && c1.intersects(c2))return c1
        }
    }, function erase(canvas) {
        canvas.fillStyle = this.background, canvas.fillRect(0, 0, this.width, this.height)
    }, function paintChildren(c) {
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i]
            c.save(), c.beginPath(), child.paint(c), c.restore()
        }
    }, function paintSelf(canvas) {
    }, function paint(canvas) {
        if (this.width && this.height && ("initial" === this.state && (this.state = "active", this.initCView()), !this.suspended)) {
            var c = canvas || this.view.canvas
            c.save(), c.globalAlpha *= this.alpha, this.transform(c), this.clipped && (c.rect(0, 0, this.width, this.height), c.clip()), this.paintSelf(c), this.paintChildren(c), c.restore()
        }
    }, function transform(canvas) {
        canvas.translate(this.x, this.y), canvas.scale(this.scaleX, this.scaleY), this.a && canvas.rotate(this.a)
    }, function scale(s) {
        this.scaleX = this.scaleY = s
    }, function mapToParent(point) {
        return point.x += this.x, point.y += this.y, point
    }, function mapToCanvas(point) {
        return this.mapToParent(point), this.parent && this.parent.mapToCanvas && this.parent.mapToCanvas(point), point
    }, function destroy() {
    }]
}), CLASS({
    package: "foam.graphics",
    name: "PositionedCViewView",
    extends: "foam.graphics.AbstractCViewView",
    traits: ["foam.ui.layout.PositionedDOMViewTrait"],
    properties: [{
        name: "tagName", factory: function () {
            return "canvas"
        }
    }],
    methods: [function init() {
        this.SUPER(), this.X.dynamicFn(function () {
            this.cview, this.width, this.height
        }.bind(this), function () {
            this.cview && (this.cview.width = this.width, this.cview.height = this.height)
        }.bind(this))
    }, function toHTML() {
        var className = this.className ? ' class="' + this.className + '"' : ""
        return '<canvas id="' + this.id + '"' + className + ' width="' + this.canvasWidth() + '" height="' + this.canvasHeight() + '" ' + this.layoutStyle() + "></canvas>"
    }],
    listeners: [{
        name: "resize", code: function () {
            this.$ && (this.$.width = this.canvasWidth(), this.$.style.width = this.styleWidth(), this.$.height = this.canvasHeight(), this.$.style.height = this.styleHeight(), this.cview.width = this.width, this.cview.height = this.height, this.paint())
        }, isFramed: !0
    }]
}), CLASS({
    package: "foam.ui.layout",
    name: "PositionedDOMViewTrait",
    traits: ["foam.ui.layout.PositionedViewTrait"],
    properties: [{name: "tagName", defaultValue: "div"}],
    methods: [function toHTML() {
        return "<" + this.tagName + ' id="' + this.id + '"' + this.layoutStyle() + this.cssClassAttr() + ">" + this.toInnerHTML() + "</div>"
    }, function layoutStyle() {
        return ' style="-webkit-transform:' + this.transform() + ";width:" + this.styleWidth() + ";height:" + this.styleHeight() + ';position:absolute;"'
    }, function initHTML() {
        this.SUPER()
        var self = this
        this.X.dynamicFn(function () {
            self.x, self.y, self.z
        }, this.position), this.X.dynamicFn(function () {
            self.width, self.height
        }, this.resize), this.$.style.position = "absolute", this.position(), this.resize()
    }, function transform() {
        return "translate3d(" + this.x + "px," + this.y + "px," + this.z + "px)"
    }, function styleWidth() {
        return this.width + "px"
    }, function styleHeight() {
        return this.height + "px"
    }],
    listeners: [{
        name: "position", code: function () {
            this.$ && (this.$.style.webkitTransform = this.transform())
        }
    }, {
        name: "resize", code: function () {
            this.$ && (this.$.style.width = this.styleWidth(), this.$.style.height = this.styleHeight())
        }
    }]
}), CLASS({
    package: "foam.ui.layout",
    name: "PositionedViewTrait",
    properties: [{
        model_: "FloatProperty",
        name: "x",
        type: "Float",
        units: "px",
        defaultValue: 0
    }, {model_: "FloatProperty", name: "y", type: "Float", units: "px", defaultValue: 0}, {
        model_: "FloatProperty",
        name: "z",
        type: "Float",
        units: "px",
        defaultValue: 0
    }, {model_: "IntProperty", name: "width", type: "Int", units: "px", defaultValue: 100}, {
        model_: "IntProperty",
        name: "height",
        type: "Int",
        units: "px",
        defaultValue: 100
    }, {
        model_: "IntProperty",
        name: "preferredWidth",
        type: "Int",
        units: "px",
        defaultValue: 100
    }, {model_: "IntProperty", name: "preferredHeight", type: "Int", units: "px", defaultValue: 100}]
}), CLASS({
    package: "foam.graphics",
    name: "AbstractCViewView",
    extends: "foam.ui.View",
    properties: [{
        name: "cview", postSet: function (_, cview) {
            cview.view = this, this.width = cview.x + cview.width, this.height = cview.y + cview.height
        }
    }, {name: "className", defaultValue: "", help: "CSS class name(s), space separated."}, {
        model_: "FloatProperty",
        name: "scalingRatio",
        type: "Float",
        preSet: function (_, v) {
            return v <= 0 ? 1 : v
        },
        defaultValue: 1
    }, {name: "speechLabel"}, {name: "role"}, {name: "tabIndex"}, {
        model_: "IntProperty",
        name: "width",
        type: "Int",
        defaultValue: 100
    }, {model_: "IntProperty", name: "height", type: "Int", defaultValue: 100}, {
        name: "canvas", getter: function () {
            return this.instance_.canvas ? this.instance_.canvas : this.instance_.canvas = this.$ && this.$.getContext("2d")
        }
    }, {
        name: "gl", getter: function () {
            return null
        }
    }],
    methods: [function init() {
        this.SUPER(), this.X.dynamicFn(function () {
            this.scalingRatio, this.width, this.height
        }.bind(this), this.resize)
    }, function styleWidth() {
        return this.width + "px"
    }, function canvasWidth() {
        return this.width * this.scalingRatio
    }, function styleHeight() {
        return this.height + "px"
    }, function canvasHeight() {
        return this.height * this.scalingRatio
    }, function toString() {
        return "CViewView(" + this.cview + ")"
    }, function toHTML() {
        var className = this.className ? ' class="' + this.className + '"' : "", title = this.speechLabel ? ' aria-role="button" aria-label="' + this.speechLabel + '"' : "", tabIndex = this.tabIndex ? ' tabindex="' + this.tabIndex + '"' : "", role = this.role ? ' role="' + this.role + '"' : ""
        return '<canvas id="' + this.id + '"' + className + title + tabIndex + role + ' width="' + this.canvasWidth() + '" height="' + this.canvasHeight() + '" style="width:' + this.styleWidth() + ";height:" + this.styleHeight() + ";min-width:" + this.styleWidth() + ";min-height:" + this.styleHeight() + '"></canvas>'
    }, function initHTML() {
        if (this.$) {
            this.maybeInitTooltip(), this.canvas = this.$.getContext("2d")
            var devicePixelRatio = this.X.window.devicePixelRatio || 1, backingStoreRatio = this.canvas.backingStoreRatio || this.canvas.webkitBackingStorePixelRatio || 1
            devicePixelRatio !== backingStoreRatio && (this.scalingRatio = devicePixelRatio / backingStoreRatio)
            var style = this.X.window.getComputedStyle(this.$)
            style.backgroundColor && !this.cview.hasOwnProperty("background") && (this.cview.background = style.backgroundColor), this.paint()
        }
    }, function destroy(isParentDestroyed) {
        this.SUPER(isParentDestroyed)
    }],
    listeners: [{
        name: "resize", code: function () {
            this.$ && (this.$.width = this.canvasWidth(), this.$.style.width = this.styleWidth(), this.$.style.minWidth = this.styleWidth(), this.$.height = this.canvasHeight(), this.$.style.height = this.styleHeight(), this.$.style.minHeight = this.styleHeight(), this.paint())
        }, isFramed: !0
    }, {
        name: "paint", code: function () {
            if (!this.$)throw EventService.UNSUBSCRIBE_EXCEPTION
            this.canvas.save(), this.canvas.clearRect(0, 0, this.canvasWidth(), this.canvasHeight()), this.canvas.fillStyle = this.cview.background, this.canvas.fillRect(0, 0, this.canvasWidth(), this.canvasHeight()), this.canvas.scale(this.scalingRatio, this.scalingRatio), this.cview.paint(this.canvas), this.canvas.restore()
        }, isFramed: !0
    }]
}), CLASS({
    package: "foam.graphics", name: "CViewView", extends: "foam.graphics.AbstractCViewView", properties: [{
        name: "cview", postSet: function (_, cview) {
            cview.view = this, this.X.dynamicFn(function () {
                var w = cview.x + cview.width, h = cview.y + cview.height
                this.width = w ? Math.max(this.width, w) : 0, this.height = h ? Math.max(this.height, h) : 0
            }.bind(this))
        }
    }], methods: [function shouldDestroy() {
        return !1
    }, function destroy() {
        this.SUPER(), this.cview && this.cview.destroy()
    }], help: "DOM wrapper for a CView, auto adjusts it size to fit the given cview."
}), CLASS({
    package: "foam.ui.md",
    name: "HaloCViewView",
    extends: "foam.graphics.AbstractCViewView",
    properties: [{
        name: "cview", postSet: function (_, cview) {
            cview.view = this, cview.x = 0, cview.y = 0, this.resize()
        }
    }],
    methods: [function initHTML() {
        this.SUPER(), this.$ && this.$.addEventListener("mousedown", this.resize)
    }],
    listeners: [{
        name: "resize", code: function () {
            this.$ && this.$.clientWidth && this.$.clientHeight && (this.width = this.$.clientWidth, this.height = this.$.clientHeight, this.$.width = this.canvasWidth(), this.$.height = this.canvasHeight(), this.cview && (this.cview.width = this.width, this.cview.height = this.height, this.paint()))
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <canvas id="', self.id, '"\n              ', this.className ? 'class="' + this.className + '"' : "", '\n              style="width: 100%; height: 100%"></canvas>\n    '), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.flow",
    name: "Element",
    extends: "foam.ui.View",
    requires: ["foam.Name"],
    properties: [{
        model_: "ViewFactoryProperty",
        name: "inner",
        type: "ViewFactory"
    }, {
        model_: "foam.core.types.DocumentInstallProperty", name: "registerElement", documentInstallFn: function (X) {
            X.registerElement(this.getTagName(X), this.model_.package + "." + this.name_)
        }
    }],
    methods: [function init() {
        this.SUPER.apply(this, arguments), this.tagName = this.getTagName()
    }, function getTagName(X) {
        if (this.ELEMENT_NAME)return this.ELEMENT_NAME
        var Name = this.X.lookup("foam.Name")
        return Name ? Name.create({initial: this.name_}, X || this.X).toTagName() : "foam-flow-element"
    }, function replaceAll(str, a, b) {
        for (var next = str, prev = ""; prev !== next;)prev = next, next = next.replace(a, b)
        return next
    }, function fromElement(e) {
        if (this.SUPER(e), 1 !== e.children.length || "inner" !== e.children[0].nodeName) {
            for (var childrenToRemove = [], i = 0; i < e.children.length; i++)for (var child = e.children[i], properties = this.model_.getRuntimeProperties(), j = 0; j < properties.length; j++) {
                var prop = properties[j]
                if (child.nodeName === prop.name) {
                    childrenToRemove.push(child)
                    break
                }
            }
            for (i = 0; i < childrenToRemove.length; i++)e.removeChild(childrenToRemove[i])
            this.inner = e.innerHTML
        }
        return this
    }],
    templates: [{
        name: "toInnerHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("", this.inner(), ""), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam",
    name: "Name",
    requires: ["foam.Memo"],
    properties: [{
        model_: "StringProperty",
        name: "initial",
        type: "String",
        required: !0
    }, {model_: "StringArrayProperty", name: "parts", type: "StringArray"}, {
        model_: "FunctionProperty",
        name: "toUpperCamel",
        type: "Function",
        factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts.map(function (p) {
                        return p.charAt(0).toUpperCase() + p.slice(1)
                    }).join("")
                }
            }).get()
        }
    }, {
        model_: "FunctionProperty", name: "toLowerCamel", type: "Function", factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts[0].toLowerCase() + this.parts.slice(1).map(function (p) {
                            return p.charAt(0).toUpperCase() + p.slice(1)
                        }).join("")
                }
            }).get()
        }
    }, {
        model_: "FunctionProperty", name: "toHyphen", type: "Function", factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts.map(function (p) {
                        return p.toLowerCase()
                    }).join("-")
                }
            }).get()
        }
    }, {
        model_: "FunctionProperty", name: "toUpperUnderscore", type: "Function", factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts.map(function (p) {
                        return p.toUpperCase()
                    }).join("_")
                }
            }).get()
        }
    }],
    methods: [function init() {
        this.SUPER.apply(this, arguments)
        var str = this.initial, match = str.match(/^[^A-Z]*/), prefix = ""
        for (match && match[0] && (prefix = match[0], this.parts.push(prefix), str = str.slice(prefix.length)); str;)match = str.match(/^[A-Z]+/), match && match[0] && match[0].length > 1 ? (prefix = match[0].length === str.length ? match[0] : match[0].slice(0, match[0].length - 1), this.parts.push(prefix), str = str.slice(prefix.length)) : (match = str.match(/^[A-Z][^A-Z]*/), match && match[0] && (prefix = match[0], this.parts.push(prefix), str = str.slice(prefix.length)))
    }, function toModelName() {
        return this.toUpperCamel()
    }, function toMethodName() {
        return this.toLowerCamel()
    }, function toPropertyName() {
        return this.toLowerCamel()
    }, function toTagName() {
        return this.toHyphen()
    }, function toValueName() {
        return this.toLowerCamel() + "$"
    }, function toConstantName() {
        return this.toUpperUnderscore()
    }, function toPropertySymbolName() {
        return this.toUpperUnderscore()
    }, function toPropertyValueSymbolName() {
        return this.toUpperUnderscore() + "$"
    }]
}), CLASS({
    package: "foam",
    name: "Memo",
    properties: [{model_: "FunctionProperty", name: "f", type: "Function", required: !0}, {
        model_: "FunctionProperty",
        name: "f_",
        type: "Function",
        transient: !0
    }, {
        model_: "FunctionProperty", name: "hashFunction", type: "Function", defaultValueFn: function () {
            return this.IDENTITY
        }, defaultValue: function () {
        }
    }, {
        name: "memos", factory: function () {
            return {}
        }
    }],
    constants: [{
        name: "IDENTITY", value: function () {
            var args = argsToArray(arguments)
            return JSON.stringify(args.map(function (a) {
                return "object" == typeof a ? a.$UID : a.toString()
            }))
        }
    }, {
        name: "MODEL_IDENTITY", value: function () {
            var args = argsToArray(arguments)
            return JSON.stringify(args.map(function (a) {
                return a.model_ ? a.$UID : a.toString()
            }))
        }
    }, {
        name: "DEEP_VALUE", value: function () {
            var args = argsToArray(arguments)
            return JSON.stringify(args.map(function (a) {
                return a.model_ ? JSONUtil.stringify(a) : a
            }))
        }
    }],
    methods: [function init() {
        this.SUPER.apply(this, arguments)
        var self = this
        this.f_ = function () {
            var hash = self.hashFunction.apply(self, arguments)
            return self.memos[hash] ? self.memos[hash] : (self.memos[hash] = self.f.apply(this, arguments), self.memos[hash])
        }
    }, function get() {
        return this.f_
    }]
}), CLASS({
    package: "foam.core.types",
    name: "StringEnumProperty",
    extends: "StringProperty",
    traits: ["foam.core.types.EnumPropertyTrait"]
}), CLASS({
    package: "foam.core.types",
    name: "EnumPropertyTrait",
    properties: [{
        model_: "ArrayProperty", name: "choices", type: "Array", required: !0, preSet: function (_, a) {
            return a.map(function (c) {
                return Array.isArray(c) ? c : [c, c]
            })
        }, help: "Array of [value, label] choices."
    }, {name: "view", defaultValue: "foam.ui.ChoiceView"}, {
        name: "toPropertyE", defaultValue: function (X) {
            return X.lookup("foam.u2.tag.Select").create({prop: this, choices: this.choices}, X)
        }
    }],
    methods: [function choiceLabel(value) {
        var vl = this.choices.filter(function (vl) {
            return vl[0] === value
        })[0]
        return vl ? vl[1] : ""
    }, function choiceValue(label) {
        var vl = this.choices.filter(function (vl) {
            return vl[1] === label
        })[0]
        return vl ? vl[0] : ""
    }]
}), CLASS({
    package: "foam.input.touch",
    name: "GestureManager",
    requires: ["foam.input.touch.DragGesture", "foam.input.touch.Gesture", "foam.input.touch.GestureTarget", "foam.input.touch.PinchTwistGesture", "foam.input.touch.ScrollGesture", "foam.input.touch.TapGesture", "foam.input.touch.InputPoint"],
    imports: ["document", "touchManager"],
    properties: [{
        name: "gestures", factory: function () {
            return {
                verticalScroll: this.ScrollGesture.create(),
                verticalScrollMomentum: this.ScrollGesture.create({momentumEnabled: !0}),
                verticalScrollNative: this.ScrollGesture.create({nativeScrolling: !0}),
                horizontalScroll: this.ScrollGesture.create({direction: "horizontal"}),
                horizontalScrollMomentum: this.ScrollGesture.create({direction: "horizontal", momentumEnabled: !0}),
                horizontalScrollNative: this.ScrollGesture.create({direction: "horizontal", nativeScrolling: !0}),
                tap: this.TapGesture.create(),
                drag: this.DragGesture.create(),
                pinchTwist: this.PinchTwistGesture.create()
            }
        }
    }, {
        name: "targets", factory: function () {
            return {}
        }
    }, {
        name: "active",
        factory: function () {
            return {}
        },
        help: "Gestures that are active right now and should be checked for recognition. This is the gestures active on the FIRST touch. Rectangles are not checked for subsequent touches."
    }, {
        name: "recognized",
        help: "Set to the recognized gesture. Cleared when all points are lifted."
    }, {
        name: "points", factory: function () {
            return {}
        }
    }, {name: "wheelTimer"}, {name: "scrollWheelTimeout", defaultValue: 300}, {
        name: "scrollViewTargets",
        defaultValue: 0
    }],
    methods: [function init() {
        this.SUPER(), this.touchManager.subscribe(this.touchManager.TOUCH_START, this.onTouchStart), this.touchManager.subscribe(this.touchManager.TOUCH_MOVE, this.onTouchMove), this.touchManager.subscribe(this.touchManager.TOUCH_END, this.onTouchEnd), this.document.addEventListener("mousedown", this.onMouseDown), this.document.addEventListener("mousemove", this.onMouseMove), this.document.addEventListener("mouseup", this.onMouseUp), this.document.addEventListener("wheel", this.onWheel), this.document.addEventListener("contextmenu", this.onContextMenu)
    }, function install(target) {
        target.containerID ? (this.targets[target.containerID] || (this.targets[target.containerID] = []), this.targets[target.containerID].push(target)) : console.warn("no container ID on touch target")
    }, function uninstall(target) {
        var arr = this.targets[target.containerID]
        if (arr) {
            for (var i = 0; i < arr.length; i++)if (arr[i] === target) {
                arr.splice(i, 1)
                break
            }
            0 === arr.length && delete this.targets[target.containerID]
        }
    }, function purge() {
        for (var keys = Object.keys(this.targets), count = 0, i = 0; i < keys.length; i++)this.document.getElementById(keys[i]) || (delete this.targets[keys[i]], count++)
        return console.log("Purged " + count + " targets"), count
    }, function activateContainingGestures(x, y, opt_predicate) {
        for (var e = this.X.document.elementFromPoint(x, y); e;) {
            if (e.id) {
                var matches = this.targets[e.id]
                if (matches && matches.length)for (var i = 0; i < matches.length; i++) {
                    var t = matches[i], g = this.gestures[t.gesture]
                    !g || opt_predicate && !opt_predicate(g) || (this.active[g.name] || (this.active[g.name] = []), this.active[g.name].push(t))
                }
            }
            e = e.parentNode
        }
    }, function checkRecognition() {
        if (!this.recognized) {
            var self = this, matches = []
            if (Object.keys(this.active).forEach(function (name) {
                    var answer = self.gestures[name].recognize(self.points)
                    answer >= self.Gesture.WAIT ? matches.push([name, answer]) : delete self.active[name]
                }), 0 !== matches.length) {
                var i, lastYes = -1
                for (i = 0; i < matches.length; i++)matches[i][1] === this.Gesture.YES && (lastYes = i)
                var lastMaybe = -1
                for (i = 0; i < matches.length; i++)matches[i][1] === this.Gesture.MAYBE && (lastMaybe = i)
                var match
                if (lastYes < 0) {
                    if (matches.length > 1 || lastMaybe < 0)return
                    match = matches[lastMaybe][0]
                } else match = matches[lastYes][0]
                var matched = this.active[match].filter(function (m) {
                    if (!m.enforceContainment)return !0
                    for (var r = m.getElement().getBoundingClientRect(), keys = Object.keys(self.points), i = 0; i < keys.length; ++i) {
                        var p = self.points[keys[i]]
                        if (p.x < r.left || p.x > r.right || p.y < r.top || p.y > r.bottom)return !1
                    }
                    return !0
                }), legal = []
                for (i = 0; i < matched.length; i++) {
                    for (var m = matched[i].getElement(), contained = 0, j = 0; j < matched.length; j++) {
                        var n = matched[j].getElement()
                        m !== n && m.contains(n) && contained++
                    }
                    0 === contained && legal.push(matched[i].handler)
                }
                legal.length > 0 && this.gestures[match].attach(this.points, legal), this.recognized = this.gestures[match]
            }
        }
    }, function resetState() {
        this.active = {}, this.recognized = null, this.points = {}
    }],
    listeners: [{
        name: "onTouchStart", code: function (_, __, touch) {
            if (this.recognized)return this.recognized.addPoint && this.recognized.addPoint(touch), void 0
            var pointCount = Object.keys(this.points).length
            pointCount || this.activateContainingGestures(touch.x, touch.y), this.points[touch.id] = touch, this.checkRecognition()
        }
    }, {
        name: "onMouseDown", code: function (event) {
            var point = this.InputPoint.create({id: "mouse", type: "mouse", x: event.clientX, y: event.clientY})
            if (this.recognized)return this.recognized.addPoint && this.recognized.addPoint(point), void 0
            var pointCount = Object.keys(this.points).length
            pointCount || this.activateContainingGestures(point.x, point.y), this.points[point.id] = point, this.checkRecognition()
        }
    }, {
        name: "onTouchMove", code: function (_, __, touch) {
            this.recognized || this.checkRecognition()
        }
    }, {
        name: "onMouseMove", code: function (event) {
            this.points.mouse && (this.points.mouse.x = event.clientX, this.points.mouse.y = event.clientY, this.checkRecognition())
        }
    }, {
        name: "onTouchEnd", code: function (_, __, touch) {
            this.recognized || this.checkRecognition(), delete this.points[touch.id], this.active = {}, this.recognized = void 0
        }
    }, {
        name: "onMouseUp", code: function (event) {
            this.points.mouse && (this.points.mouse.x = event.clientX, this.points.mouse.y = event.clientY, this.points.mouse.done = !0, this.recognized || this.checkRecognition(), delete this.points.mouse, this.active = {}, this.recognized = void 0)
        }
    }, {
        name: "onWheel", code: function (event) {
            if (this.wheelTimer)this.points.wheel.x -= event.deltaX, this.points.wheel.y -= event.deltaY, this.X.window.clearTimeout(this.wheelTimer), this.wheelTimer = this.X.window.setTimeout(this.onWheelDone, this.scrollWheelTimeout)
            else {
                if (this.recognized || Object.keys(this.points).length > 0)return
                var wheel = this.InputPoint.create({
                    id: "wheel",
                    type: "wheel",
                    x: event.clientX,
                    y: event.clientY
                }), dir = Math.abs(event.deltaX) > Math.abs(event.deltaY) ? "horizontal" : "vertical", gestures = [dir + "Scroll", dir + "ScrollMomentum", dir + "ScrollNative"]
                this.activateContainingGestures(wheel.x, wheel.y, function (g) {
                    return gestures.indexOf(g.name) >= 0
                }), wheel.x -= event.deltaX, wheel.y -= event.deltaY
                for (var i = 0; i < gestures.length; i++) {
                    var gesture = gestures[i]
                    if (this.active[gesture] && this.active[gesture].length) {
                        this.points.wheel || (this.points.wheel = wheel), this.gestures[gesture].attach(this.points, this.active[gesture].map(function (gt) {
                            return gt.handler
                        })), this.recognized = this.gestures[gesture], this.wheelTimer = this.X.window.setTimeout(this.onWheelDone, this.scrollWheelTimeout)
                        break
                    }
                }
            }
        }
    }, {
        name: "onWheelDone", code: function () {
            this.wheelTimer = void 0, this.points.wheel.done = !0, delete this.points.wheel, this.recognized = void 0
        }
    }, {
        name: "onContextMenu", code: function () {
            this.resetState()
        }
    }]
}), CLASS({
    package: "foam.input.touch",
    name: "DragGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{name: "name", defaultValue: "drag"}],
    constants: [{name: "DRAG_TOLERANCE", value: 20}],
    methods: [function recognize(map) {
        var keys = Object.keys(map)
        if (keys.length > 1)return this.NO
        var point = map[keys[0]]
        if (point.done)return this.NO
        var delta = Math.max(Math.abs(point.totalX), Math.abs(point.totalY)), r = delta >= this.DRAG_TOLERANCE ? this.YES : this.MAYBE
        return r != this.NO && (point.shouldPreventDefault = !0), r
    }, function attach(map, handlers) {
        var point = map[Object.keys(map)[0]]
        this.handlers = handlers || [], point.done$.addListener(this.onDone), this.pingHandlers("dragStart", point)
    }, function pingHandlers(method, point) {
        for (var i = 0; i < this.handlers.length; i++) {
            var h = this.handlers[i]
            h && h[method] && h[method](point)
        }
    }],
    listeners: [{
        name: "onDone", code: function (obj, prop, old, nu) {
            obj.done$.removeListener(this.onDone), this.pingHandlers("dragEnd", obj)
        }
    }],
    help: "Gesture that understands a hold and drag with mouse or one touch point."
}), CLASS({
    package: "foam.input.touch",
    name: "Gesture",
    properties: [{name: "name", required: !0}],
    constants: [{name: "YES", value: 3}, {name: "MAYBE", value: 2}, {name: "WAIT", value: 1}, {name: "NO", value: 0}],
    methods: [function recognize(map) {
        return this.NO
    }, function attach(handlers) {
    }, function newPoint(point) {
    }],
    help: "Installed in the GestureManager to watch for a particular kind of gesture"
}), CLASS({
    package: "foam.input.touch",
    name: "PinchTwistGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{name: "name", defaultValue: "pinchTwist"}, {name: "handlers"}, {name: "points"}],
    methods: [function getPoints(map) {
        var keys = Object.keys(map)
        return [map[keys[0]], map[keys[1]]]
    }, function recognize(map) {
        if (2 !== Object.keys(map).length)return this.NO
        var points = this.getPoints(map)
        if (points[0].done || points[1].done)return this.NO
        var moved = !(0 === points[0].dx && 0 === points[0].dy || 0 === points[1].dx && 0 === points[1].dy)
        return moved ? this.YES : this.MAYBE
    }, function attach(map, handlers) {
        Object_forEach(map, function (p) {
            p.shouldPreventDefault = !0
        }), this.points = this.getPoints(map), this.handlers = handlers || [], this.points.forEach(function (p) {
            p.x$.addListener(this.onMove), p.y$.addListener(this.onMove), p.done$.addListener(this.onDone)
        }.bind(this)), this.pingHandlers("pinchStart"), this.onMove()
    }, function pingHandlers(method, scale, rotation) {
        for (var i = 0; i < this.handlers.length; i++) {
            var h = this.handlers[i]
            h && h[method] && h[method](scale, rotation)
        }
    }, function distance(x1, y1, x2, y2) {
        var dx = x2 - x1, dy = y2 - y1
        return Math.sqrt(dx * dx + dy * dy)
    }],
    listeners: [{
        name: "onMove", code: function () {
            for (var oldDist = this.distance(this.points[0].x0, this.points[0].y0, this.points[1].x0, this.points[1].y0), newDist = this.distance(this.points[0].x, this.points[0].y, this.points[1].x, this.points[1].y), scale = newDist / oldDist, oldAngle = Math.atan2(this.points[1].y0 - this.points[0].y0, this.points[1].x0 - this.points[0].x0), newAngle = Math.atan2(this.points[1].y - this.points[0].y, this.points[1].x - this.points[0].x), rotation = newAngle - oldAngle; rotation < -Math.PI;)rotation += 2 * Math.PI
            for (; rotation > Math.PI;)rotation -= 2 * Math.PI
            rotation *= 360, rotation /= 2 * Math.PI, this.pingHandlers("pinchMove", scale, rotation)
        }
    }, {
        name: "onDone", code: function (obj, prop, old, nu) {
            this.points.forEach(function (p) {
                p.x$.removeListener(this.onMove), p.y$.removeListener(this.onMove), p.done$.removeListener(this.onDone)
            }), this.pingHandlers("pinchEnd")
        }
    }],
    help: "Gesture that understands a two-finger pinch/stretch and rotation"
}), CLASS({
    package: "foam.input.touch",
    name: "ScrollGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{
        name: "name", factory: function () {
            return this.direction + "Scroll" + (this.momentumEnabled ? "Momentum" : this.nativeScrolling ? "Native" : "")
        }
    }, {name: "direction", defaultValue: "vertical"}, {
        name: "isVertical", factory: function () {
            return "vertical" === this.direction
        }
    }, {
        name: "momentumEnabled",
        defaultValue: !1,
        help: 'Set me to true (usually by attaching the "verticalScrollMomentum" gesture) to enable momentum'
    }, {
        name: "nativeScrolling",
        defaultValue: !1,
        help: 'Set me to true (usually by attaching the "verticalScrollNative" gesture) to enable native browser scrolling'
    }, {
        name: "dragCoefficient",
        defaultValue: .94,
        help: "Each frame, the momentum will be multiplied by this coefficient. Higher means LESS drag."
    }, {
        name: "dragClamp",
        defaultValue: .05,
        help: "The speed threshold (pixels/millisecond) below which the momentum drops to 0."
    }, {
        name: "momentum",
        defaultValue: 0,
        help: "The current speed, in pixels/millisecond, at which the scroller is sliding."
    }, {
        name: "lastTime",
        visibility: "hidden",
        hidden: !0,
        defaultValue: 0,
        help: "The performance.now() value for the last time we computed the momentum slide."
    }, {
        name: "tickRunning",
        visibility: "hidden",
        hidden: !0,
        defaultValue: !1,
        help: "True when the physics tick should run."
    }, {name: "handlers"}],
    constants: [{name: "DRAG_TOLERANCE", value: 10}],
    methods: [function recognize(map) {
        if (1 !== Object.keys(map).length)return this.NO
        var point = map[Object.keys(map)[0]]
        if ("mouse" === point.type || point.done)return this.NO
        if (Math.abs(this.momentum) > 0)return this.YES
        var delta = Math.abs(this.isVertical ? point.totalY : point.totalX)
        return delta > this.DRAG_TOLERANCE ? this.YES : this.MAYBE
    }, function attach(map, handlers) {
        var point = map[Object.keys(map)[0]]
        this.handlers = handlers || [], this.nativeScrolling || (Object_forEach(map, function (p) {
            p.shouldPreventDefault = !0
        }), (this.isVertical ? point.y$ : point.x$).addListener(this.onDelta), point.done$.addListener(this.onDone), 0 === this.momentum ? this.pingHandlers(this.direction + "ScrollStart", 0, 0, this.isVertical ? point.y0 : point.x0) : this.tickRunning = !1)
    }, function pingHandlers(method, d, t, c) {
        for (var i = 0; i < this.handlers.length; i++) {
            var h = this.handlers[i]
            h && h[method] && h[method](d, t, c, this.stopMomentum)
        }
    }, function sendEndEvent(point) {
        var delta = this.isVertical ? point.dy : point.dx, total = this.isVertical ? point.totalY : point.totalX, current = this.isVertical ? point.y : point.x
        this.pingHandlers(this.direction + "ScrollEnd", delta, total, current)
    }, function calculateInstantaneousVelocity(point) {
        var now = this.X.performance.now(), lastTime = this.tickRunning ? this.lastTime : point.lastTime, velocity = (this.isVertical ? point.dy : point.dx) / (now - point.lastTime)
        return this.tickRunning && (this.lastTime = now), velocity
    }],
    listeners: [{
        name: "onDelta", code: function (obj, prop, old, nu) {
            if (this.momentumEnabled) {
                var velocity = this.calculateInstantaneousVelocity(obj), delta = velocity - this.momentum
                this.momentum += delta
            }
            var delta = this.isVertical ? obj.dy : obj.dx, total = this.isVertical ? obj.totalY : obj.totalX, current = this.isVertical ? obj.y : obj.x
            this.pingHandlers(this.direction + "ScrollMove", delta, total, current)
        }
    }, {
        name: "onDone", code: function (obj, prop, old, nu) {
            (this.isVertical ? obj.y$ : obj.x$).removeListener(this.onDelta), obj.done$.removeListener(this.onDone), this.momentumEnabled ? Math.abs(this.momentum) < this.dragClamp ? (this.momentum = 0, this.sendEndEvent(obj)) : (this.tickRunning = !0, this.lastTime = this.X.performance.now(), this.tick(obj)) : this.sendEndEvent(obj)
        }
    }, {
        name: "tick", code: function (touch) {
            if (this.tickRunning) {
                var xy = this.isVertical ? "y" : "x", now = this.X.performance.now(), elapsed = now - this.lastTime
                this.lastTime = now
                var distance = this.momentum * elapsed
                touch[xy] += distance
                var delta, total, current
                this.isVertical ? (delta = touch.dy, total = touch.totalY, current = touch.y) : (delta = touch.dx, total = touch.totalX, current = touch.x), 0 != delta && this.pingHandlers(this.direction + "ScrollMove", delta, total, current), this.momentum *= this.dragCoefficient, Math.abs(this.momentum) < this.dragClamp ? (this.momentum = 0, this.tickRunning = !1, this.sendEndEvent(touch)) : this.tick(touch)
            }
        }, isFramed: !0
    }, {
        name: "stopMomentum", code: function () {
            this.momentum = 0
        }
    }],
    help: "Gesture that understands vertical or horizontal scrolling."
}), CLASS({
    package: "foam.input.touch",
    name: "TapGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{name: "name", defaultValue: "tap"}, {name: "handlers"}],
    constants: [{name: "DRAG_TOLERANCE", value: 40}],
    methods: [function recognize(map) {
        for (var response, doneCount = 0, self = this, keys = Object.keys(map), i = 0; i < keys.length; i++) {
            var key = keys[i], p = map[key]
            if (Math.abs(p.totalX) >= this.DRAG_TOLERANCE || Math.abs(p.totalY) >= this.DRAG_TOLERANCE)return this.NO
            p.done && doneCount++
        }
        return response === this.NO ? response : doneCount === keys.length ? this.YES : this.WAIT
    }, function attach(map, handlers) {
        if (handlers && handlers.length) {
            var points = 0
            Object_forEach(map, function (point) {
                points++, point.shouldPreventDefault = !0
            }), handlers.forEach(function (h) {
                h && h.tapClick && h.tapClick(map)
            })
        }
    }],
    help: "Gesture that understands a quick, possible multi-point tap. Calls into the handler: tapClick(numberOfPoints)."
}), CLASS({
    package: "foam.input.touch",
    name: "InputPoint",
    properties: [{name: "id"}, {name: "type"}, {model_: "BooleanProperty", name: "done", type: "Boolean"}, {
        name: "x",
        postSet: function (old, nu) {
            this.lastX = old
        }
    }, {
        name: "y", postSet: function (old, nu) {
            this.lastY = old
        }
    }, {
        name: "x0", factory: function () {
            return this.x
        }
    }, {
        name: "y0", factory: function () {
            return this.y
        }
    }, {
        name: "lastX", factory: function () {
            return this.x
        }
    }, {
        name: "lastY", factory: function () {
            return this.y
        }
    }, {
        name: "dx", getter: function () {
            return this.x - this.lastX
        }
    }, {
        name: "dy", getter: function () {
            return this.y - this.lastY
        }
    }, {
        name: "totalX", getter: function () {
            return this.x - this.x0
        }
    }, {
        name: "totalY", getter: function () {
            return this.y - this.y0
        }
    }, {name: "lastTime"}, {name: "shouldPreventDefault", defaultValue: !1}]
}), CLASS({
    package: "foam.input.touch",
    name: "TouchManager",
    requires: ["foam.input.touch.InputPoint"],
    properties: [{
        name: "touches", factory: function () {
            return {}
        }
    }],
    constants: [{name: "TOUCH_START", value: ["touch-start"]}, {
        name: "TOUCH_END",
        value: ["touch-end"]
    }, {name: "TOUCH_MOVE", value: ["touch-move"]}],
    methods: [function init() {
        this.SUPER(), this.X.document && this.install(this.X.document)
    }, function install(d) {
        d.addEventListener("touchstart", this.onTouchStart)
    }, function attach(e) {
        e.addEventListener("touchmove", this.onTouchMove), e.addEventListener("touchend", this.onTouchEnd), e.addEventListener("touchcancel", this.onTouchCancel), e.addEventListener("touchleave", this.onTouchEnd)
    }, function detach(e) {
        e.removeEventListener("touchmove", this.onTouchMove), e.removeEventListener("touchend", this.onTouchEnd), e.removeEventListener("touchcancel", this.onTouchCancel), e.removeEventListener("touchleave", this.onTouchEnd)
    }, function touchStart(i, t, e) {
        this.touches[i] = this.InputPoint.create({
            id: i,
            type: "touch",
            x: t.pageX,
            y: t.pageY
        }), this.publish(this.TOUCH_START, this.touches[i])
    }, function touchMove(i, t, e) {
        var touch = this.touches[i]
        touch.x = t.pageX, touch.y = t.pageY, touch.lastTime = this.X.performance.now(), touch.shouldPreventDefault && e.preventDefault(), this.publish(this.TOUCH_MOVE, this.touch)
    }, function touchEnd(i, t, e) {
        var touch = this.touches[i]
        touch.x = t.pageX, touch.y = t.pageY, touch.done = !0, this.publish(this.TOUCH_END, touch), touch.shouldPreventDefault && e.cancelable && e.preventDefault(), delete this.touches[i]
    }, function touchCancel(i, t, e) {
        this.touches[i].done = !0, this.publish(this.TOUCH_END, this.touches[i])
    }, function touchLeave(i, t, e) {
        this.touches[i].done = !0, this.publish(this.TOUCH_END, this.touches[i])
    }],
    listeners: [{
        name: "onTouchStart", code: function (e) {
            e._touchcount || (e._touchcount = 0), e._touchcount++, 1 == e._touchcount && this.attach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i]
                this.touchStart(t.identifier, t, e)
            }
        }
    }, {
        name: "onTouchMove", code: function (e) {
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchMove(id, t, e) : console.warn("Touch move for unknown touch.")
            }
        }
    }, {
        name: "onTouchEnd", code: function (e) {
            e._touchcount--, 0 == e._touchcount && this.detach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchEnd(id, t, e) : console.warn("Touch end for unknown touch " + id, Object.keys(this.touches))
            }
        }
    }, {
        name: "onTouchCancel", code: function (e) {
            this.detach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchCancel(id, t, e) : console.warn("Touch cancel for unknown touch.")
            }
        }
    }, {
        name: "onTouchLeave", code: function (e) {
            this.detach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchLeave(id, t, e) : console.warn("Touch cancel for unknown touch.")
            }
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "DetailView",
    extends: "foam.ui.View",
    requires: ["Property", "foam.ui.TextFieldView", "foam.ui.IntFieldView", "foam.ui.FloatFieldView", "foam.ui.DAOController"],
    exports: ["propertyViewProperty"],
    properties: [{name: "className", defaultValue: "detailView"}, {
        name: "data", preSet: function (old, nu) {
            return nu.model_ && (this.model = nu.model_), nu
        }
    }, {
        name: "model", postSet: function (_, model) {
            console.assert(Model.isInstance(model), "Invalid model specified for " + this.name_)
        }
    }, {
        name: "title", defaultValueFn: function () {
            return this.model.label
        }
    }, {model_: "StringProperty", name: "mode", type: "String", defaultValue: "read-write"}, {
        model_: "BooleanProperty",
        name: "showRelationships",
        type: "Boolean",
        defaultValue: !1
    }, {
        name: "propertyViewProperty", type: "Property", defaultValueFn: function () {
            return this.Property.DETAIL_VIEW
        }
    }],
    methods: [function shouldDestroy(old, nu) {
        return !(old && old.model_ && nu && nu.model_) || old.model_ !== nu.model_
    }, function generateContent() {
        this.$ && (this.$.outerHTML = this.toHTML(), this.initHTML())
    }, function titleHTML() {
        var title = this.title
        return title ? '<tr><td colspan="2" class="heading">' + title + "</td></tr>" : ""
    }, function startForm() {
        return "<table>"
    }, function endForm() {
        return "</table>"
    }, function startColumns() {
        return "<tr><td colspan=2><table valign=top><tr><td valign=top><table>"
    }, function nextColumn() {
        return "</table></td><td valign=top><table valign=top>"
    }, function endColumns() {
        return "</table></td></tr></table></td></tr>"
    }, function rowToHTML(prop, view) {
        var str = ""
        return prop.detailViewPreRow && (str += prop.detailViewPreRow(this)), str += '<tr class="detail-' + prop.name + '">', this.DAOController.isInstance(view) ? (str += "<td colspan=2><div class=detailArrayLabel>" + prop.label + "</div>", str += view.toHTML(), str += "</td>") : (str += "<td class='label'>" + prop.label + "</td>", str += "<td>", str += view.toHTML(), str += "</td>"), str += "</tr>", prop.detailViewPostRow && (str += prop.detailViewPostRow(this)), str
    }, function toHTML() {
        if (!this.data)return '<span id="' + this.id + '"></span>'
        if (!this.model)throw"DetailView: either 'data' or 'model' must be specified."
        return (this.model.getPrototype().toDetailHTML || this.defaultToHTML).call(this)
    }, function getDefaultProperties() {
        return this.model.getRuntimeProperties()
    }, function defaultToHTML() {
        this.children = []
        var model = this.model, str = ""
        str += '<div id="' + this.id + '" ' + this.cssClassAttr() + '" name="form">', str += this.startForm(), str += this.titleHTML()
        for (var properties = this.getDefaultProperties(), i = 0; i < properties.length; i++) {
            var prop = properties[i]
            if (!prop.hidden) {
                var view = this.createView(prop)
                this.addDataChild(view), str += this.rowToHTML(prop, view)
            }
        }
        if (str += this.endForm(), this.showRelationships) {
            var view = this.X.lookup("foam.ui.RelationshipsView").create({data: this.data})
            this.addDataChild(view), str += view.toHTML()
        }
        return str += "</div>", str
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".detailView{border:solid 2px #dddddd;background:#fafafa;display:table}.detailView .heading{color:black;float:left;font-size:16px;margin-bottom:8px;padding:2px}.detailView .propertyLabel{font-size:14px;display:block;font-weight:bold;text-align:right;float:left}.detailView input{font-size:12px;padding:4px 2px;border:solid 1px #aacfe4;margin:2px 0 0px 10px}.detailView textarea{float:left;font-size:12px;padding:4px 2px;border:solid 1px #aacfe4;margin:2px 0 0px 10px;width:98%;overflow:auto}.detailView select{font-size:12px;padding:4px 2px;border:solid 1px #aacfe4;margin:2px 0 0px 10px}.detailView .label{color:#444;font-size:smaller;padding-left:6px;padding-top:8px;vertical-align:top}.detailArrayLabel{font-size:medium}.detailArrayLabel .foamTable{margin:1px}"),
        language: "css"
    }]
}), CLASS({
    package: "foam.ui",
    name: "TextFieldView",
    label: "Text Field",
    extends: "foam.ui.SimpleView",
    requires: ["foam.ui.AutocompleteView"],
    properties: [{
        model_: "StringProperty",
        name: "name",
        type: "String",
        defaultValue: "field"
    }, {model_: "IntProperty", name: "displayWidth", type: "Int", defaultValue: 30}, {
        model_: "IntProperty",
        name: "displayHeight",
        type: "Int",
        defaultValue: 1
    }, {model_: "StringProperty", name: "type", type: "String", defaultValue: "text"}, {
        model_: "StringProperty",
        name: "placeholder",
        type: "String",
        defaultValue: ""
    }, {
        model_: "BooleanProperty", name: "onKeyMode", type: "Boolean", getter: function () {
            return this.updateMode === this.EACH_KEYSTROKE
        }, setter: function (nu) {
            this.updateMode = nu ? this.EACH_KEYSTROKE : this.DONE_EDITING
        }, help: "If true, value is updated on each keystroke."
    }, {
        model_: "foam.core.types.StringEnumProperty",
        name: "updateMode",
        defaultValue: "DONE_EDITING",
        help: "Controls when the real .data is updated: on every keystroke, when the user presses enter or blurs the box, or on enter only.",
        choices: [["DONE_EDITING", "Done editing"], ["EACH_KEYSTROKE", "Every keystroke"], ["ENTER_ONLY", "Enter only"]]
    }, {
        model_: "BooleanProperty",
        name: "escapeHTML",
        type: "Boolean",
        help: "If true, HTML content is escaped in display mode.",
        defaultValue: !0
    }, {
        model_: "StringProperty",
        name: "mode",
        type: "String",
        defaultValue: "read-write",
        view: {factory_: "foam.ui.ChoiceView", choices: ["read-only", "read-write", "final"]}
    }, {model_: "BooleanProperty", name: "required", type: "Boolean"}, {
        model_: "StringProperty",
        name: "pattern",
        type: "String"
    }, {name: "domValue", visibility: "hidden", hidden: !0}, {name: "data"}, {
        model_: "StringProperty",
        name: "readWriteTagName",
        type: "String",
        visibility: "hidden",
        hidden: !0,
        defaultValueFn: function () {
            return 1 === this.displayHeight ? "input" : "textarea"
        }
    }, {
        model_: "BooleanProperty",
        name: "autocomplete",
        type: "Boolean",
        defaultValue: !0
    }, {name: "autocompleter"}, {name: "autocompleteView"}],
    constants: [{name: "ESCAPE", value: ["escape"]}, {
        name: "DONE_EDITING",
        value: "DONE_EDITING"
    }, {name: "EACH_KEYSTROKE", value: "EACH_KEYSTROKE"}, {name: "ENTER_ONLY", value: "ENTER_ONLY"}],
    methods: [function toHTML() {
        return "read-write" === this.mode ? this.toReadWriteHTML() : this.toReadOnlyHTML()
    }, function toReadWriteHTML() {
        var str = "<" + this.readWriteTagName + ' id="' + this.id + '"'
        return str += ' type="' + this.type + '" ' + this.cssClassAttr(), this.on("click", this.onClick, this.id), str += "input" === this.readWriteTagName ? ' size="' + this.displayWidth + '"' : ' rows="' + this.displayHeight + '" cols="' + this.displayWidth + '"', this.required && (str += " required"), this.pattern && (str += ' pattern="' + this.pattern + '"'), str += this.extraAttributes(), str += ' name="' + this.name + '">', str += "</" + this.readWriteTagName + ">", str
    }, function extraAttributes() {
        return ""
    }, function toReadOnlyHTML() {
        var self = this
        return this.setClass("placeholder", function () {
            return "" === self.data
        }, this.id), "<" + this.tagName + ' id="' + this.id + '"' + this.cssClassAttr() + ' name="' + this.name + '"></' + this.tagName + ">"
    }, function setupAutocomplete() {
        if (this.autocomplete && this.autocompleter) {
            var view = this.autocompleteView = this.AutocompleteView.create({
                autocompleter: this.autocompleter,
                target: this
            })
            this.bindAutocompleteEvents(view)
        }
    }, function onAutocomplete(data) {
        this.data = data
    }, function bindAutocompleteEvents(view) {
        this.$.addEventListener("blur", function () {
            view.publish("blur")
        }), this.$.addEventListener("input", function () {
            view.autocomplete(this.textToValue(this.$.value))
        }.bind(this)), this.$.addEventListener("focus", function () {
            view.autocomplete(this.textToValue(this.$.value))
        }.bind(this))
    }, function initHTML() {
        this.$ && (this.SUPER(), "read-write" === this.mode ? (this.placeholder && (this.$.placeholder = this.placeholder), this.updateMode === this.EACH_KEYSTROKE ? this.domValue = DomValue.create(this.$, "input") : this.updateMode === this.DONE_EDITING ? this.domValue = DomValue.create(this.$, "change") : this.domValue = this.OnEnterValue.create({element: this.$}), Events.relate(this.data$, this.domValue, this.valueToText.bind(this), this.textToValue.bind(this), this.updateMode === this.EACH_KEYSTROKE), this.updateMode === this.EACH_KEYSTROKE && this.$.addEventListener("blur", this.onBlur), this.$.addEventListener("keydown", this.onKeyDown), this.$.addEventListener("keypress", this.onKeyPress), this.setupAutocomplete()) : (this.domValue = DomValue.create(this.$, "undefined", this.escapeHTML ? "textContent" : "innerHTML"), Events.map(this.data$, this.domValue, this.valueToText.bind(this))))
    }, function textToValue(text) {
        return text
    }, function valueToText(value) {
        return "read-only" === this.mode && "" === value ? this.placeholder : value
    }, function destroy(isParentDestroyed) {
        this.SUPER(isParentDestroyed), Events.unlink(this.domValue, this.data$)
    }],
    listeners: [{
        name: "onKeyDown", code: function (e) {
            27 == e.keyCode ? (this.domValue.set(this.data), this.publish(this.ESCAPE)) : this.publish(["keydown"], e)
        }
    }, {
        name: "onKeyPress", code: function (e) {
            e.stopPropagation()
        }
    }, {
        name: "onBlur", code: function (e) {
            this.domValue.get() !== this.data && this.domValue.set(this.data)
        }
    }, {
        name: "onClick", code: function (e) {
            this.$ && this.$.focus()
        }
    }],
    models: [{
        package: "foam.ui.TextFieldView",
        name: "OnEnterValue",
        properties: [{name: "element"}, {
            name: "listeners", factory: function () {
                return []
            }
        }],
        methods: [function get() {
            return this.element.value
        }, function set(value) {
            this.get() !== value && (this.element.value = value)
        }, function addListener(listener) {
            listener && (0 === this.listeners.length && this.element.addEventListener("keydown", this.onKeyDown), this.listeners.push(listener))
        }, function removeListener(listener) {
            var index = this.listeners.indexOf(listener)
            index >= 0 && this.listeners.splice(i, 1)
        }, function fireListeners(e) {
            for (var i = 0; i < this.listeners.length; i++)this.listeners[i](e)
        }],
        listeners: [{
            name: "onKeyDown", code: function (e) {
                13 === e.keyCode && this.fireListeners(e)
            }
        }]
    }]
}), CLASS({
    package: "foam.ui",
    name: "AutocompleteView",
    extends: "foam.ui.PopupView",
    requires: ["foam.ui.ChoiceListView"],
    properties: [{name: "closeTimeout"}, {name: "autocompleter"}, {name: "completer"}, {name: "current"}, {
        model_: "IntProperty",
        name: "closeTime",
        type: "Int",
        units: "ms",
        help: "Time to delay the actual close on a .close call.",
        defaultValue: 200
    }, {
        name: "view", postSet: function (prev, v) {
            prev && (prev.data$.removeListener(this.complete), prev.choices$.removeListener(this.choicesUpdate)), v.data$.addListener(this.complete), v.choices$.addListener(this.choicesUpdate)
        }
    }, {
        name: "target", postSet: function (prev, v) {
            prev && prev.unsubscribe(["keydown"], this.onKeyDown), v.subscribe(["keydown"], this.onKeyDown)
        }
    }, {name: "maxHeight", defaultValue: 400}, {name: "className", defaultValue: "autocompletePopup"}],
    methods: [function autocomplete(partial) {
        if (!this.completer) {
            var proto = this.X.lookup(this.autocompleter)
            this.completer = proto.create(null, this.Y)
        }
        this.view || (this.view = this.makeView()), this.current = partial, this.open(this.target), this.completer.autocomplete(partial)
    }, function makeView() {
        return this.ChoiceListView.create({
            dao: this.completer.autocompleteDao$Proxy,
            extraClassName: "autocomplete",
            orientation: "vertical",
            mode: "final",
            objToChoice: this.completer.f,
            useSelection: !0
        }, this.Y)
    }, function init(args) {
        this.SUPER(args), this.subscribe("blur", function () {
            this.close()
        }.bind(this))
    }, function open(e, opt_delay) {
        if (this.closeTimeout && (this.X.clearTimeout(this.closeTimeout), this.closeTimeout = 0), this.$)return this.position(this.$.firstElementChild, e.$ || e), void 0
        var parentNode = e.$ || e, document = parentNode.ownerDocument
        console.assert(this.X.document === document, "X.document is not global document")
        var div = document.createElement("div"), window = document.defaultView
        console.assert(this.X.window === window, "X.window is not global window"), parentNode.insertAdjacentHTML("afterend", this.toHTML().trim()), this.position(this.$.firstElementChild, parentNode), this.initHTML()
    }, function close(opt_now) {
        if (opt_now)return this.closeTimeout && (this.X.clearTimeout(this.closeTimeout), this.closeTimeout = 0), this.SUPER(), void 0
        if (!this.closeTimeout) {
            var realClose = this.SUPER, self = this
            this.closeTimeout = this.X.setTimeout(function () {
                self.closeTimeout = 0, realClose.call(self)
            }, this.closeTime)
        }
    }, function position(div, parentNode) {
        var document = parentNode.ownerDocument, pos = findPageXY(parentNode), pageWH = [document.firstElementChild.offsetWidth, document.firstElementChild.offsetHeight]
        pageWH[1] - (pos[1] + parentNode.offsetHeight) < (this.height || this.maxHeight || 400) && (div.style.bottom = parentNode.offsetHeight, document.defaultView.innerHeight - pos[1]), pos[2].offsetWidth - pos[0] < 600 ? div.style.left = 600 - pos[2].offsetWidth : div.style.left = -parentNode.offsetWidth, this.width && (div.style.width = this.width + "px"), this.height && (div.style.height = this.height + "px"), this.maxWidth && (div.style.maxWidth = this.maxWidth + "px", div.style.overflowX = "auto"), this.maxHeight && (div.style.maxHeight = this.maxHeight + "px", div.style.overflowY = "auto")
    }],
    listeners: [{
        name: "onKeyDown", code: function (_, __, e) {
            this.view && (38 === e.keyCode ? (this.view.index--, this.view.scrollToSelection(this.$), e.preventDefault()) : 40 === e.keyCode ? (this.view.index++, this.view.scrollToSelection(this.$), e.preventDefault()) : 13 === e.keyCode && (this.view.commit(), e.preventDefault()))
        }
    }, {
        name: "complete", code: function () {
            this.target.onAutocomplete(this.view.data), this.view = this.makeView(), this.close(!0)
        }
    }, {
        name: "choicesUpdate", code: function () {
            this.view && (0 === this.view.choices.length || 1 === this.view.choices.length && this.view.choices[0][1] === this.current) && this.close(!0)
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n  <span id="', this.id, '" style="position:relative"><div ', this.cssClassAttr(), ' style="position:absolute">', this.view, "</div></span>\n    "), out.toString()
        }, language: "html"
    }],
    help: "Default autocomplete popup."
}), CLASS({
    package: "foam.ui",
    name: "ChoiceListView",
    extends: "foam.ui.AbstractChoiceView",
    properties: [{
        name: "orientation",
        view: {factory_: "foam.ui.ChoiceView", choices: [["horizontal", "Horizontal"], ["vertical", "Vertical"]]},
        defaultValue: "horizontal",
        postSet: function (old, nu) {
            this.$ && (DOM.setClass(this.$, old, !1), DOM.setClass(this.$, nu))
        }
    }, {
        name: "className", defaultValueFn: function () {
            return "foamChoiceListView " + this.orientation
        }
    }, {name: "tagName", defaultValue: "ul"}, {name: "innerTagName", defaultValue: "li"}],
    methods: [function init() {
        this.SUPER(), this.index$.addListener(this.updateSelected), this.choices$.addListener(this.updateSelected)
    }, function choiceToHTML(id, choice) {
        return "<" + this.innerTagName + ' id="' + id + '" class="choice">' + choice[1] + "</" + this.innerTagName + ">"
    }, function toInnerHTML() {
        for (var out = [], i = 0; i < this.choices.length; i++) {
            var choice = this.choices[i], id = this.nextID()
            this.on("click", function (index) {
                this.choice = this.choices[index]
            }.bind(this, i), id), out.push(this.choiceToHTML(id, choice))
        }
        return out.join("")
    }, function initInnerHTML() {
        this.SUPER(), this.updateSelected()
    }, function scrollToSelection() {
        var e = this.$ && this.$.children[this.index]
        if (e) {
            for (var parent = e.parentElement; parent;) {
                var overflow = this.X.window.getComputedStyle(parent).overflowY
                if ("scroll" === overflow || "auto" === overflow)break
                parent = parent.parentElement
            }
            parent = parent || this.X.window, e.offsetTop < parent.scrollTop ? parent.scrollTop = e.offsetTop : e.offsetTop + e.offsetHeight >= parent.scrollTop + parent.offsetHeight && (parent.scrollTop = e.offsetTop + e.offsetHeight - parent.offsetHeight)
        }
    }],
    listeners: [{
        name: "updateSelected", code: function () {
            if (this.$ && this.$.children)for (var i = 0; i < this.$.children.length; i++) {
                var c = this.$.children[i]
                DOM.setClass(c, "selected", i === this.index)
            }
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".foamChoiceListView{list-style-type:none}.foamChoiceListView .selected{font-weight:bold}.foamChoiceListView.vertical{padding:0}.foamChoiceListView.vertical .choice{margin:4px}.foamChoiceListView.horizontal{padding:0}.foamChoiceListView.horizontal .choice{display:inline;margin:12px}"),
        language: "css"
    }]
}), CLASS({
    package: "foam.ui",
    name: "AbstractChoiceView",
    extends: "foam.ui.View",
    properties: [{
        model_: "BooleanProperty",
        name: "autoSetData",
        type: "Boolean",
        help: "If true, this.data is set when choices update and the current data is not one of the choices.",
        defaultValue: !0
    }, {name: "prop", visibility: "hidden", hidden: !0}, {
        name: "label",
        help: 'The user-visible label for the ChoiceView. Not to be confused with $$DOC{ref:".text"}, the name of the currently selected choice.'
    }, {
        name: "text", postSet: function (_, d) {
            for (var i = 0; i < this.choices.length; i++)if (this.choices[i][1] === d)return this.index !== i && (this.index = i), void 0
        }, help: "The user-visible text of the current choice (ie. [value, text] -> text)."
    }, {
        name: "choice", getter: function () {
            for (var value = this.data, i = 0; i < this.choices.length; i++) {
                var choice = this.choices[i]
                if (value === choice[0])return choice
            }
        }, setter: function (choice) {
            var oldValue = this.choice
            this.data = choice[0], this.text = choice[1], this.propertyChange("choice", oldValue, this.choice)
        }, help: "The current choice (ie. [value, text])."
    }, {
        name: "choices", factory: function () {
            return []
        }, preSet: function (_, a) {
            if ("object" == typeof a && !Array.isArray(a)) {
                var out = []
                for (var key in a)a.hasOwnProperty(key) && out.push([key, a[key]])
                return out
            }
            a = a.clone()
            for (var i = 0; i < a.length; i++)Array.isArray(a[i]) || (a[i] = [a[i], a[i]])
            return a
        }, postSet: function (oldValue, newValue) {
            for (var value = this.data, i = 0; i < newValue.length; i++) {
                var choice = newValue[i]
                if (value === choice[0]) {
                    this.useSelection ? this.index = i : this.choice = choice
                    break
                }
            }
            this.autoSetData && i === newValue.length && (this.useSelection ? this.index = 0 : this.data = newValue.length ? newValue[0][0] : void 0)
            var labelsChanged = !0
            if ((oldValue && oldValue.length) == (newValue && newValue.length)) {
                labelsChanged = !1
                for (var i = 0; i < oldValue.length; ++i)if (!equals(oldValue[i][1], newValue[i][1])) {
                    labelsChanged = !0
                    break
                }
            }
            labelsChanged && this.updateHTML()
        }
    }, {
        model_: "IntProperty", name: "index", type: "Int", transient: !0, preSet: function (_, i) {
            return i < 0 || 0 == this.choices.length ? 0 : i >= this.choices.length ? this.choices.length - 1 : i
        }, postSet: function (_, i) {
            this.useSelection || this.choices.length && this.data !== this.choices[i][0] && (this.data = this.choices[i][0])
        }, help: "The index of the current choice.", defaultValue: -1
    }, {
        model_: "FunctionProperty",
        name: "objToChoice",
        type: "Function",
        help: "A Function which adapts an object from the DAO to a [key, value, ...] choice."
    }, {
        model_: "BooleanProperty",
        name: "useSelection",
        type: "Boolean",
        help: "When set, data and choice do not update until an entry is firmly selected"
    }, {model_: "foam.core.types.DAOProperty", name: "dao", onDAOUpdate: "onDAOUpdate"}, {
        name: "data", postSet: function (old, nu) {
            for (var i = 0; i < this.choices.length; i++)if (this.choices[i][0] === nu)return this.index !== i && (this.text = this.choices[i][1], this.index = i), void 0
            nu && this.choices.length && console.warn("ChoiceView data set to invalid choice: ", nu)
        }
    }],
    methods: [function initHTML() {
        this.SUPER(), this.dao = this.dao
    }, function findChoiceIC(name) {
        name = name.toLowerCase()
        for (var i = 0; i < this.choices.length; i++)if (this.choices[i][1].toLowerCase() == name)return this.choices[i]
    }, function commit() {
        this.useSelection && this.choices[this.index] && (this.choice = this.choices[this.index])
    }],
    listeners: [{
        name: "onDAOUpdate", code: function () {
            this.dao.select(MAP(this.objToChoice))(function (map) {
                this.choices = map.arg2
            }.bind(this))
        }, isFramed: !0
    }]
}), CLASS({
    package: "foam.core.types",
    name: "DAOProperty",
    extends: "Property",
    requires: ["foam.dao.FutureDAO", "foam.dao.ProxyDAO"],
    imports: ["console"],
    properties: [{name: "type", defaultValue: "DAO", help: "The FOAM type of this property."}, {
        model_: "ModelProperty",
        name: "model",
        type: "Model",
        help: "The model for objects stored in the DAO."
    }, {name: "view", defaultValue: "foam.ui.DAOListView"}, {name: "onDAOUpdate"}, {
        name: "install", defaultValue: function (prop) {
            defineLazyProperty(this, prop.name + "$Proxy", function () {
                if (this[prop.name])delegate = this[prop.name]
                else var future = afuture(), delegate = prop.FutureDAO.create({future: future.get})
                var proxy = prop.ProxyDAO.create({delegate: delegate})
                return this.addPropertyListener(prop.name, function (_, __, ___, dao) {
                    return future ? (future.set(dao), future = null, void 0) : (proxy.delegate = dao, void 0)
                }), {
                    get: function () {
                        return proxy
                    }, configurable: !0
                }
            })
        }
    }, {
        name: "fromElement_", defaultValue: function (e, p, model) {
            for (var children = e.children, i = 0; i < children.length; i++)this[p.name].put(model.create(null, this.Y).fromElement(children[i], p))
        }
    }, {
        name: "fromElement", defaultValue: function (e, p) {
            var model = e.getAttribute("model") || this[p.name] && this[p.name].model || p.model || ""
            return model ? ("string" == typeof model ? this.X.arequire(model)(function (model) {
                p.fromElement_.call(this, e, p, model)
            }.bind(this)) : p.fromElement_.call(this, e, p, model), void 0) : (this.console.warn("Attempt to load DAO from element without model"), void 0)
        }
    }],
    help: "Describes a DAO property."
}), CLASS({
    package: "foam.dao",
    name: "FutureDAO",
    extends: "foam.dao.ProxyDAO",
    properties: [{
        name: "delegate", factory: function () {
            return null
        }
    }, {name: "future", required: !0}, {
        name: "model", defaultValueFn: function () {
            return this.delegate ? this.delegate.model : ""
        }
    }],
    methods: [function init() {
        this.SUPER(), this.future(function (delegate) {
            var listeners = this.daoListeners_
            this.daoListeners_ = [], this.delegate = delegate, this.daoListeners_ = listeners, this.daoListeners_.length && this.delegate.listen(this.relay)
        }.bind(this))
    }, function put(value, sink) {
        this.delegate ? this.delegate.put(value, sink) : this.future(this.put.bind(this, value, sink))
    }, function remove(query, sink) {
        this.delegate ? this.delegate.remove(query, sink) : this.future(this.remove.bind(this, query, sink))
    }, function removeAll() {
        if (this.delegate)return this.delegate.removeAll.apply(this.delegate, arguments)
        var a = arguments, f = afuture()
        return this.future(function (delegate) {
            this.removeAll.apply(this, a)(f.set)
        }.bind(this)), f.get
    }, function find(key, sink) {
        this.delegate ? this.delegate.find(key, sink) : this.future(this.find.bind(this, key, sink))
    }, function select(sink, options) {
        if (this.delegate)return this.delegate.select(sink, options)
        var a = arguments, f = afuture()
        return this.future(function () {
            this.select.apply(this, a)(f.set)
        }.bind(this)), f.get
    }]
}), CLASS({
    package: "foam.dao", name: "ProxyDAO", extends: "AbstractDAO", requires: ["foam.dao.NullDAO"], properties: [{
        name: "relay", factory: function () {
            var self = this
            return {
                put: function () {
                    self.notify_("put", arguments)
                }, remove: function () {
                    self.notify_("remove", arguments)
                }, reset: function () {
                    self.notify_("reset", arguments)
                }, toString: function () {
                    return "RELAY(" + this.$UID + ", " + self.model_.name + ", " + self.delegate + ")"
                }
            }
        }
    }, {
        name: "delegate",
        mode: "read-only",
        required: !0,
        visibility: "hidden",
        hidden: !0,
        transient: !0,
        factory: function () {
            return this.NullDAO.create()
        },
        postSet: function (oldDAO, newDAO) {
            this.daoListeners_.length && (oldDAO && oldDAO.unlisten(this.relay), newDAO.listen(this.relay), this.notify_("reset", []))
        }
    }, {
        model_: "ModelProperty", name: "model", type: "Model", required: !1, defaultValueFn: function () {
            return this.delegate.model
        }
    }], methods: [function put(value, sink) {
        this.delegate.put(value, sink)
    }, function remove(query, sink) {
        this.delegate.remove(query, sink)
    }, function removeAll() {
        return this.delegate.removeAll.apply(this.delegate, arguments)
    }, function find(key, sink) {
        this.delegate.find(key, sink)
    }, function select(sink, options) {
        return this.delegate.select(sink, options)
    }, function listen(sink, options) {
        !this.daoListeners_.length && this.delegate && this.delegate.listen(this.relay), this.SUPER(sink, options)
    }, function unlisten(sink) {
        this.SUPER(sink), 0 === this.daoListeners_.length && this.delegate && this.delegate.unlisten(this.relay)
    }, function toString() {
        return this.name_ + "(" + this.delegate + ")"
    }]
}), CLASS({
    package: "foam.dao", name: "NullDAO", methods: [function put(obj, sink) {
        sink && sink.put && sink.put(obj)
    }, function remove(obj, sink) {
        sink && sink.remove && sink.remove(obj)
    }, function select(sink) {
        return sink && sink.eof && sink.eof(), aconstant(sink || [].sink)
    }, function find(q, sink) {
        sink && sink.error && sink.error("find", q)
    }, function listen() {
    }, function removeAll() {
    }, function unlisten() {
    }, function pipe() {
    }, function where() {
        return this
    }, function limit() {
        return this
    }, function skip() {
        return this
    }, function orderBy() {
        return this
    }], help: "A DAO that stores nothing and does nothing."
}), CLASS({
    package: "foam.ui",
    name: "PopupView",
    extends: "foam.ui.SimpleView",
    properties: [{name: "view"}, {name: "x"}, {name: "y"}, {name: "width", defaultValue: ""}, {
        name: "maxWidth",
        defaultValue: ""
    }, {name: "maxHeight", defaultValue: ""}, {name: "height", defaultValue: ""}],
    constants: [{name: "CLOSED_TOPIC", value: ["closed"]}],
    methods: [function open() {
        if (!this.$) {
            var document = this.X.document, div = document.createElement("div")
            div.style.left = this.x + "px", div.style.top = this.y + "px", this.width && (div.style.width = this.width + "px"), this.height && (div.style.height = this.height + "px"), this.maxWidth && (div.style.maxWidth = this.maxWidth + "px"), this.maxHeight && (div.style.maxHeight = this.maxHeight + "px"), div.style.position = "absolute", div.id = this.id, div.innerHTML = this.view.toHTML(), document.body.appendChild(div), this.view.initHTML()
        }
    }, function openOn(parent) {
        if (!this.$) {
            var self = this, document = this.X.document, bg = document.createElement("div"), div = document.createElement("div")
            bg.style.width = bg.style.height = "10000px", bg.style.opacity = 0, bg.style.position = "fixed", bg.style.top = "0", bg.style.zIndex = 998, div.style.zIndex = 999, this.y || (this.y = (parent.clientHeight - this.height) / 2), this.x || (this.x = (parent.clientWidth - this.width) / 2), div.className = "popup", div.style.left = this.x + "px", div.style.top = this.y + "px", this.width && (div.style.width = this.width + "px"), this.height && (div.style.height = this.height + "px"), this.maxWidth && (div.style.maxWidth = this.maxWidth + "px"), this.maxHeight && (div.style.maxHeight = this.maxHeight + "px"), parent.style.position = "relative", div.id = this.id, div.innerHTML = this.view.toHTML(), document.body.appendChild(bg), bg.addEventListener("click", function () {
                div.remove(), bg.remove(), self.destroy(), self.publish(self.CLOSED_TOPIC)
            }), parent.appendChild(div), this.view.initHTML()
        }
    }, function close() {
        this.$ && this.$.remove()
    }, function destroy(isParentDestroyed) {
        this.SUPER(isParentDestroyed), this.close(), this.view.destroy()
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".popup{background:#999;-webkit-box-shadow:3px 3px 6px 0 gray;box-shadow:3px 3px 6px 0 gray;color:white;font-size:18px;opacity:0.9;padding:20px;position:absolute;box-sizing:border-box}"),
        language: "css"
    }]
}), CLASS({
    package: "foam.ui",
    name: "IntFieldView",
    extends: "foam.ui.AbstractNumberFieldView",
    methods: [function textToValue(text) {
        return parseInt(text) || "0"
    }, function valueToText(value) {
        return value ? value : "0"
    }]
}), CLASS({
    package: "foam.ui",
    name: "AbstractNumberFieldView",
    extends: "foam.ui.TextFieldView",
    properties: [{name: "type", defaultValue: "number"}, {name: "step"}],
    methods: [function extraAttributes() {
        return this.step ? ' step="' + this.step + '"' : ""
    }]
}), CLASS({
    package: "foam.ui",
    name: "FloatFieldView",
    extends: "foam.ui.AbstractNumberFieldView",
    properties: [{name: "precision", defaultValue: ""}],
    methods: [function formatNumber(val) {
        if (!val)return "0"
        val = val.toFixed(this.precision)
        for (var i = val.length - 1; i > 0 && "0" === val.charAt(i); i--);
        return val.substring(0, "." === val.charAt(i) ? i : i + 1)
    }, function valueToText(val) {
        return this.hasOwnProperty("precision") ? this.formatNumber(val) : "" + val
    }, function textToValue(text) {
        return parseFloat(text) || 0
    }]
}), CLASS({
    package: "foam.ui",
    name: "DAOController",
    label: "DAO Controller",
    extends: "foam.ui.View",
    properties: [{model_: "ModelProperty", name: "model", type: "Model"}, {
        name: "subType", setter: function (v) {
            this.model = v
        }
    }, {name: "dao", view: "foam.ui.TableView"}, {
        name: "data", getter: function () {
            return this.dao
        }, setter: function (v) {
            this.dao = v
        }
    }, {name: "selection"}, {model_: "BooleanProperty", name: "useSearchView", type: "Boolean", defaultValue: !1}],
    actions: [{
        name: "new", help: "Create a new record.", code: function () {
            var createView = this.X.DAOCreateController.create({model: this.model, dao: this.dao, showActions: !0})
            createView.parentController = this, this.X.stack.pushView(createView, "New")
        }
    }, {
        name: "edit", help: "Edit the current record.", default: !0, code: function () {
            this.selection = this.daoView.selection
            for (var obj = this.selection, actions = this.X.DAOUpdateController.actions.slice(0), i = 0; i < this.model.actions.length; i++) {
                var action = this.model.actions[i], newAction = this.X.Action.create(action)
                newAction.action = function (oldAction) {
                    return function () {
                        oldAction.call(obj)
                    }
                }(action.action), actions.push(newAction)
            }
            console.log(["selection: ", this.selection])
            var updateView = this.X.DAOUpdateController.create({
                data: this.selection,
                model: this.model,
                dao: this.dao,
                showActions: !0
            })
            this.X.stack.pushView(updateView, "Edit")
        }
    }, {
        name: "delete", help: "Delete the current record.", code: function () {
            this.selection = this.daoView.selection
            var self = this
            this.dao.remove(this.selection)
        }
    }],
    methods: [function init() {
        this.SUPER(), this.showActions = !0
    }, function initHTML() {
        this.SUPER(), this.daoView.subscribe(this.daoView.DOUBLE_CLICK, this.onDoubleClick), this.daoView.selection$.addListener(this.onSelection)
    }],
    listeners: [{
        name: "onDoubleClick", code: function (evt) {
            for (var i = 0; i < this.model_.getRuntimeActions().length; i++) {
                var action = this.model_.getRuntimeActions()[i]
                if (action.default) {
                    action.action.call(this)
                    break
                }
            }
        }
    }, {
        name: "onSelection", code: function (evt) {
            var obj = this.daoView.selection
            obj && this.X.stack.setPreview(this.X.SummaryView.create({model: this.model, data: this.daoView.selection}))
        }
    }],
    templates: [{
        name: "toInnerHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out(" ", self.createTemplateView("dao", {model: this.model}), " "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "ActionButton",
    extends: "foam.ui.BaseView",
    traits: ["foam.ui.HTMLViewTrait"],
    properties: [{
        name: "action", postSet: function (old, nu) {
            old && old.removeListener(this.render), nu.addListener(this.render)
        }
    }, {name: "data"}, {
        name: "className", factory: function () {
            return "actionButton actionButton-" + this.action.name
        }
    }, {name: "tagName", defaultValue: "button"}, {
        name: "showLabel", defaultValueFn: function () {
            return this.action.showLabel
        }
    }, {
        name: "label", defaultValueFn: function () {
            return this.data ? this.action.labelFn.call(this.data, this.action) : this.action.label
        }, postSet: function () {
            this.updateHTML()
        }
    }, {
        name: "iconUrl", defaultValueFn: function () {
            return this.data ? this.action.iconUrlFn.call(this.data, this.action) : this.action.iconUrl
        }
    }, {
        name: "tooltip", defaultValueFn: function () {
            return this.action.help
        }
    }],
    methods: [function toHTML() {
        var superResult = this.SUPER(), self = this
        return this.on("click", function () {
            self.action.maybeCall(self.X, self.data)
        }, this.id), this.setAttribute("disabled", function () {
            return self.closeTooltip(), self.action.isEnabled.call(self.data, self.action) ? void 0 : "disabled"
        }, this.id), this.setClass("available", function () {
            return self.closeTooltip(), self.action.isAvailable.call(self.data, self.action)
        }, this.id), this.X.dynamicFn(function () {
            self.action.labelFn.call(self.data, self.action), self.updateHTML()
        }), this.X.dynamicFn(function () {
            self.action.iconUrlFn.call(self.data, self.action), self.updateHTML()
        }), superResult
    }, function toInnerHTML() {
        var out = ""
        return this.iconUrl && (out += '<img src="' + XMLUtil.escapeAttr(this.iconUrl) + '">'), this.showLabel && (out += this.label), out
    }, function initKeyboardShortcuts() {
    }],
    listeners: [{
        name: "render", code: function () {
            this.updateHTML()
        }, isFramed: !0
    }]
})

function FEATURE_ENABLED(labels) {
    for (var i = 0; i < labels.length; i++)if (FLAGS[labels[i]])return !0
}
function MODEL(model) {
    function defineProperty(proto, key, map) {
        map.value && proto !== Object.prototype && proto !== Array.prototype ? proto[key] = map.value : Object.defineProperty.apply(this, arguments)
    }

    var proto
    if (model.name ? (GLOBAL[model.name] || (model.extends ? GLOBAL[model.name] = {__proto__: GLOBAL[model.extends]} : GLOBAL[model.name] = {}), proto = GLOBAL[model.name]) : proto = model.extendsProto ? GLOBAL[model.extendsProto].prototype : GLOBAL[model.extendsObject], model.properties)for (var i = 0; i < model.properties.length; i++) {
        var p = model.properties[i]
        defineProperty(proto, p.name, {get: p.getter, enumerable: !1})
    }
    for (key in model.constants)defineProperty(proto, key, {value: model.constants[key], writable: !0, enumerable: !1})
    if (Array.isArray(model.methods))for (var i = 0; i < model.methods.length; i++) {
        var m = model.methods[i]
        defineProperty(proto, m.name, {value: m, writable: !0, enumerable: !1})
    } else for (var key in model.methods)defineProperty(proto, key, {
        value: model.methods[key],
        writable: !0,
        enumerable: !1
    })
}
function prep(arg) {
    return "string" == typeof arg ? literal(arg) : arg
}
function prepArgs(args) {
    for (var i = 0; i < args.length; i++)args[i] = prep(args[i])
    return args
}
function range(c1, c2) {
    var f = function (ps) {
        if (ps.head && !(ps.head < c1 || ps.head > c2))return ps.tail.setValue(ps.head)
    }
    return f.toString = function () {
        return "range(" + c1 + ", " + c2 + ")"
    }, f
}
function literal_ic(str, opt_value) {
    str = str.toLowerCase()
    var f = function (ps) {
        for (var i = 0; i < str.length; i++, ps = ps.tail)if (!ps.head || str.charAt(i) !== ps.head.toLowerCase())return
        return ps.setValue(opt_value || str)
    }
    return f.toString = function () {
        return '"' + str + '"'
    }, f
}
function anyChar(ps) {
    return ps.head ? ps.tail : void 0
}
function fail(ps) {
}
function notChar(c) {
    return function (ps) {
        return ps.head && ps.head !== c ? ps.tail.setValue(ps.head) : void 0
    }
}
function notChars(s) {
    return function (ps) {
        return ps.head && s.indexOf(ps.head) == -1 ? ps.tail.setValue(ps.head) : void 0
    }
}
function not(p, opt_else) {
    p = prep(p), opt_else = prep(opt_else)
    var f = function (ps) {
        return this.parse(p, ps) ? void 0 : opt_else ? this.parse(opt_else, ps) : ps
    }
    return f.toString = function () {
        return "not(" + p + ")"
    }, f
}
function optional(p) {
    p = prep(p)
    var f = function (ps) {
        return this.parse(p, ps) || ps.setValue(void 0)
    }
    return f.toString = function () {
        return "optional(" + p + ")"
    }, f
}
function copyInput(p) {
    p = prep(p)
    var f = function (ps) {
        var res = this.parse(p, ps)
        return res ? res.setValue(ps.str_.toString().substring(ps.pos, res.pos)) : res
    }
    return f.toString = function () {
        return "copyInput(" + p + ")"
    }, f
}
function lookahead(p) {
    p = prep(p)
    var f = function (ps) {
        return this.parse(p, ps) && ps
    }
    return f.toString = function () {
        return "lookahead(" + p + ")"
    }, f
}
function repeat(p, opt_delim, opt_min, opt_max) {
    p = prep(p), opt_delim = prep(opt_delim)
    var f = function (ps) {
        for (var ret = [], i = 0; !opt_max || i < opt_max; i++) {
            var res
            if (opt_delim && 0 != ret.length) {
                if (!(res = this.parse(opt_delim, ps)))break
                ps = res
            }
            if (!(res = this.parse(p, ps)))break
            ret.push(res.value), ps = res
        }
        if (!(opt_min && ret.length < opt_min))return ps.setValue(ret)
    }
    return f.toString = function () {
        return "repeat(" + p + ", " + opt_delim + ", " + opt_min + ", " + opt_max + ")"
    }, f
}
function plus(p, opt_delim) {
    return repeat(p, opt_delim, 1)
}
function noskip(p) {
    return function (ps) {
        return this.skip_ = !1, ps = this.parse(p, ps), this.skip_ = !0, ps
    }
}
function repeat0(p) {
    p = prep(p)
    var f = function (ps) {
        for (var res; res = this.parse(p, ps);)ps = res
        return ps.setValue("")
    }
    return f.toString = function () {
        return "repeat0(" + p + ")"
    }, f
}
function plus0(p) {
    p = prep(p)
    var f = function (ps) {
        var res
        if (res = this.parse(p, ps)) {
            for (ps = res; res = this.parse(p, ps);)ps = res
            return ps.setValue("")
        }
    }
    return f.toString = function () {
        return "repeat0(" + p + ")"
    }, f
}
function seq() {
    var args = prepArgs(arguments), f = function (ps) {
        for (var ret = [], i = 0; i < args.length; i++) {
            if (!(ps = this.parse(args[i], ps)))return
            ret.push(ps.value)
        }
        return ps.setValue(ret)
    }
    return f.toString = function () {
        return "seq(" + argsToArray(args).join(",") + ")"
    }, f
}
function seq1(n) {
    var args = prepArgs(argsToArray(arguments).slice(1)), f = function (ps) {
        for (var ret, i = 0; i < args.length; i++) {
            if (!(ps = this.parse(args[i], ps)))return
            i == n && (ret = ps.value)
        }
        return ps.setValue(ret)
    }
    return f.toString = function () {
        return "seq1(" + n + ", " + argsToArray(args).join(",") + ")"
    }, f
}
function invalidateParsers() {
    parserVersion_++
}
function simpleAlt() {
    var args = prepArgs(arguments)
    if (1 == args.length)return args[0]
    var f = function (ps) {
        for (var i = 0; i < args.length; i++) {
            var res = this.parse(args[i], ps)
            if (res)return res
        }
    }
    return f.toString = function () {
        return "simpleAlt(" + argsToArray(args).join(" | ") + ")"
    }, f
}
function alt() {
    function nullParser() {
    }

    function testParser(p, ps) {
        var trapPS = TrapPStream.create(ps)
        return this.parse(p, trapPS), trapPS.goodChar
    }

    function getParserForChar(ps) {
        var c = ps.head, p = map[c]
        if (!p) {
            for (var alts = [], i = 0; i < args.length; i++) {
                var parser = args[i]
                testParser.call(this, parser, ps) && alts.push(parser)
            }
            p = 0 == alts.length ? nullParser : 1 == alts.length ? alts[0] : simpleAlt.apply(null, alts), map[c] = p
        }
        return p
    }

    var SIMPLE_ALT = simpleAlt.apply(null, arguments), args = prepArgs(arguments), map = {}, parserVersion = parserVersion_, f = function (ps) {
        parserVersion !== parserVersion_ && (map = {}, parserVersion = parserVersion_)
        var r1 = this.parse(getParserForChar.call(this, ps), ps)
        return r1
    }
    return f.toString = function () {
        return "alt(" + argsToArray(args).join(" | ") + ")"
    }, f
}
function str(p) {
    p = prep(p)
    var f = function (ps) {
        var ps = this.parse(p, ps)
        return ps ? ps.setValue(ps.value.join("")) : void 0
    }
    return f.toString = function () {
        return "str(" + p + ")"
    }, f
}
function pick(as, p) {
    p = prep(p)
    var f = function (ps) {
        var ps = this.parse(p, ps)
        if (ps) {
            for (var ret = [], i = 0; i < as.length; i++)ret.push(ps.value[as[i]])
            return ps.setValue(ret)
        }
    }
    return f.toString = function () {
        return "pick(" + as + ", " + p + ")"
    }, f
}
function parsedebug(p) {
    return function (ps) {
        var old = DEBUG_PARSE
        DEBUG_PARSE = !0
        var ret = this.parse(p, ps)
        return DEBUG_PARSE = old, ret
    }
}
function sym(name) {
    var f = function (ps) {
        var p = this[name]
        return p || console.log("PARSE ERROR: Unknown Symbol <" + name + ">"), this.parse(p, ps)
    }
    return f.toString = function () {
        return "<" + name + ">"
    }, f
}
function defineTTLProperty(obj, name, ttl, f) {
    obj.__defineGetter__(name, function () {
        var accessed, value = void 0
        return this.__defineGetter__(name, function () {
            function scheduleTimer() {
                var ref = setTimeout(function () {
                    accessed ? scheduleTimer() : value = void 0, accessed = !1
                }, ttl)
                ref && ref.unref && ref.unref()
            }

            return value ? accessed = !0 : (accessed = !1, value = f(), scheduleTimer()), value
        }), this[name]
    })
}
function lookup(key) {
    if (key) {
        if ("string" != typeof key)return key
        var root = this, cache
        cache = this.lookupCache_
        var ret = cache[key]
        if (void 0 === ret && key.indexOf(".") == -1 && (ret = GLOBAL[key]), void 0 === ret) {
            for (var path = key.split("."), i = 0; root && i < path.length; i++)root = root[path[i]]
            ret = root, cache[key] = ret ? ret : null
        }
        return ret
    }
}
function set(key, value) {
    Object.defineProperty(this, key, {
        value: value,
        writable: "window" !== key,
        configurable: !0
    }), GLOBAL.SimpleReadOnlyValue && "$" !== key && "$$" !== key && (this[key + "$"] = SimpleReadOnlyValue.create({value: value}))
}
function setValue(key, value) {
    var X = this
    Object.defineProperty(this, key, {
        get: function () {
            return value.get()
        }, configurable: !0
    }), "$" !== key && "$$" !== key && (this[key + "$"] = value)
}
function sub(opt_args, opt_name) {
    var sub = Object.create(this)
    if (opt_args)for (var key in opt_args)if (opt_args.hasOwnProperty(key)) {
        var asValue = "$" !== key && "$$" != key && "$" == key.charAt(key.length - 1)
        asValue ? sub.setValue(key.substring(0, key.length - 1), opt_args[key]) : sub.set(key, opt_args[key])
    }
    return opt_name && (sub.NAME = opt_name), sub
}
function subWindow(w, opt_name, isBackground) {
    return w ? foam.ui.Window.create({window: w, name: opt_name, isBackground: isBackground}, this).Y : this.sub()
}
function elementFromString(str) {
    return str.element || (str.element = HTMLParser.create().parseString(str).children[0])
}
function $addWindow(w) {
    w.window.$WID = $WID__++, $documents.push(w.document)
}
function $removeWindow(w) {
    for (var i = $documents.length - 1; i >= 0; i--)$documents[i].defaultView && $documents[i].defaultView !== w || $documents.splice(i, 1)
}
function packagePath(X, path) {
    function packagePath_(Y, path, i) {
        return i === path.length ? Y : (Y[path[i]] || (Y[path[i]] = {}, 0 == i && (GLOBAL[path[i]] = Y[path[i]])), packagePath_(Y[path[i]], path, i + 1))
    }

    return path ? packagePath_(X, path.split("."), 0) : GLOBAL
}
function registerModel(model, opt_name, fastMode) {
    var root = model.package ? this : GLOBAL, name = model.name, pack = model.package
    if (opt_name) {
        var a = opt_name.split(".")
        name = a.pop(), pack = a.join(".")
    }
    var modelRegName = (pack ? pack + "." : "") + name
    if (root === GLOBAL || root === X) {
        var path = packagePath(root, pack)
        fastMode ? path[name] = model : Object.defineProperty(path, name, {
            value: model,
            configurable: !0
        }), path === GLOBAL && (path = X, fastMode ? path[name] = model : Object.defineProperty(path, name, {
            value: model,
            configurable: !0
        }))
    }
    Object.hasOwnProperty.call(this, "lookupCache_") || (this.lookupCache_ = Object.create(this.lookupCache_ || Object.prototype)), this.lookupCache_[modelRegName] = model, this.onRegisterModel(model)
}
function INTERFACE(imodel) {
    var i = JSONUtil.mapToObj(X, imodel, Interface)
    packagePath(X, i.package)[i.name] = i
    var id = i.package ? i.package + "." + i.name : i.name
    NONMODEL_INSTANCES[id] = !0
}
function __DATA(obj) {
    var pkg = obj.package ? obj.package : obj.id.substring(0, obj.id.lastIndexOf(".")), name = obj.name ? obj.name : obj.id.substring(obj.id.lastIndexOf(".") + 1), path = packagePath(X, pkg), triggered = !1
    Object.defineProperty(path, name, {
        get: function triggerDataLatch() {
            if (triggered)return null
            triggered = !0
            var object = JSONUtil.mapToObj(X, obj)
            return X.registerModel(object), object
        }, configurable: !0
    })
}
function onRegisterModel(m) {
    m.package || (GLOBAL[m.name] = m)
}
function defineLocalProperty(cls, name, factory) {
    Object.defineProperty(cls, name, {
        get: function () {
            console.assert(this !== cls, "Called property getter from prototype: " + name)
            var value = factory.call(this)
            return Object.defineProperty(this, name, {configurable: !0, value: value}), value
        }, configurable: !0
    })
}
function override(cls, methodName, method) {
    var super_ = cls[methodName]
    if (method.toString().indexOf("SUPER") == -1)return cls[methodName] = method, void 0
    var SUPER = function () {
        return super_.apply(this, arguments)
    }, slowF = function (OLD_SUPER, args) {
        try {
            return method.apply(this, args)
        } finally {
            this.SUPER = OLD_SUPER
        }
    }, f = function () {
        var OLD_SUPER = this.SUPER
        if (this.SUPER = SUPER, OLD_SUPER)return slowF.call(this, OLD_SUPER, arguments)
        var ret = method.apply(this, arguments)
        return this.SUPER = null, ret
    }
    f.toString = function () {
        return method.toString()
    }, f.super_ = super_, cls[methodName] = f
}
function recopyModelFeatures(m) {
    GLOBAL[m.name] = X[m.name] = m, m.model_ = Model, m.methods = m.methods, m.relationships = m.relationships, m.properties = m.properties, m.models = m.models, DEBUG && (m.tests = m.tests, m.issues = m.issues), m.properties && m.properties[0] && "Model" !== m.properties[0].__proto__.model_.name_ && m.properties.forEach(function (p) {
        "Property" === p.__proto__.model_.name && (p.__proto__ = Property.getPrototype())
    }), DEBUG && BootstrapModel.saveDefinition(m)
}
function or$(values, factory, opt_X) {
    return OrValue.create({values: values, valueFactory: factory}, opt_X)
}
function toNum(p) {
    return p.replace ? parseInt(p.replace("px", "")) : p
}
function elementForName(nodeName) {
    nodeName = nodeName ? nodeName : "div"
    var modelName = this.__element_map__[nodeName.toUpperCase()]
    if (modelName) {
        var model = this.lookup(modelName)
        return console.assert(model, 'Missing Model, Add "' + modelName + '" to your requires: block.'), model.create(null, this)
    }
    var i = nodeName.indexOf(":")
    return i != -1 ? this.elementForFeature(nodeName.substring(0, i), nodeName.substring(i + 1)) : null
}
function elementForFeature(objName, featureName) {
    var data = this[objName || "data"], X = objName ? this.sub({data: this[objName]}) : this
    return data.model_.getFeature(featureName).toE(X)
}
function registerE(name, model) {
    var m = {__proto__: this.__element_map__}
    return m[name.toUpperCase()] = model, this.set("__element_map__", m), this
}
function E(opt_nodeName) {
    this !== X && this !== window || console.log("Deprecated global E() call", new Error)
    var e = this.elementForName && this.elementForName(opt_nodeName)
    return e || (e = this.lookup("foam.u2.Element").create(null, this), opt_nodeName && (e.nodeName = opt_nodeName)), e
}
function start(opt_nodeName) {
    return this.E(opt_nodeName)
}
function compile_(a) {
    return a.f ? a : a === !0 ? TRUE : a === !1 ? FALSE : ConstantExpr.create({arg1: a})
}
function compileArray_(args) {
    for (var b = [], i = 0; i < args.length; i++) {
        var a = args[i]
        null !== a && void 0 !== a && b.push(compile_(a))
    }
    return b
}
function COUNT() {
    return CountExpr.create()
}
function EQ(arg1, arg2) {
    var eq = EqExpr.create()
    return eq.instance_.arg1 = compile_(arg1), eq.instance_.arg2 = compile_(arg2), eq
}
function AND() {
    return AndExpr.create({args: compileArray_.call(null, arguments)})
}
function NEQ(arg1, arg2) {
    return NeqExpr.create({arg1: compile_(arg1), arg2: compile_(arg2)})
}
function UPPER(arg1) {
    return UpperExpr.create({arg1: compile_(arg1)})
}
function EQ_IC(arg1, arg2) {
    return EQ(UPPER(arg1), UPPER(arg2))
}
function IN_IC(arg1, arg2) {
    return IN(UPPER(arg1), arg2.map(UPPER))
}
function atxn(afunc) {
    return function (ret) {
        if (GLOBAL.__TXN__)afunc.apply(this, arguments)
        else {
            GLOBAL.__TXN__ = {}
            var a = argsToArray(arguments)
            a[0] = function () {
                GLOBAL.__TXN__ = void 0, ret()
            }, afunc.apply(this, a)
        }
    }
}
function dump(o) {
    return Array.isArray(o) ? "[" + o.map(dump).join(",") + "]" : o ? o.toString() : "<undefined>"
}
function deferJsonP(X) {
    var future = afuture()
    return X.ajsonp = function () {
        var args = arguments
        return function (ret) {
            future.get(function (f) {
                f.apply(void 0, args)(ret)
            })
        }
    }, future
}
navigator && navigator.userAgent.indexOf("Firefox") != -1 && (console.log("Loading Firefox Support."), Object.defineProperties(MouseEvent.prototype, {
    offsetX: {
        get: function () {
            return this.clientX - this.target.getBoundingClientRect().left
        }
    }, offsetY: {
        get: function () {
            return this.clientY - this.target.getBoundingClientRect().top
        }
    }
})), Number.name || (console.log("Polyfilling Function.prototype.name"), Object.defineProperty(Function.prototype, "name", {
    get: function () {
        var text = this.toString()
        return text.substring(text.indexOf("function") + 9, text.indexOf("(")).trim()
    }, configurable: !0, enumerable: !0
})), function () {
    if ("undefined" == typeof window.performance && (window.performance = {}), !window.performance.now) {
        var nowOffset = Date.now()
        performance.timing && performance.timing.navigationStart && (nowOffset = performance.timing.navigationStart), window.performance.now = function now() {
            return Date.now() - nowOffset
        }
    }
}(), "function" != typeof Number.isFinite && (Number.isFinite = function isFinite(value) {
    return "number" == typeof value && (value === value && value !== 1 / 0 && value !== -(1 / 0))
}), "function" != typeof Number.isNaN && (Number.isNaN = function (value) {
    return "number" == typeof value && value !== value
}), "function" != typeof Number.isInteger && (Number.isInteger = function (value) {
    return "number" == typeof value && Math.round(value) === value
})
var DEBUG = DEBUG || !1, _DOC_ = _DOC_ || !1, FLAGS = FLAGS || {}
FLAGS.javascript = !0, FLAGS.debug = DEBUG, FLAGS.documentation = _DOC_
var GLOBAL = GLOBAL || this, MODEL0 = MODEL
MODEL({
    extendsObject: "GLOBAL", methods: [function memoize(f) {
        var cache = {}, g = function () {
            var key = argsToArray(arguments).toString()
            return cache.hasOwnProperty(key) || (cache[key] = f.apply(this, arguments)), cache[key]
        }
        return g.name = f.name, g
    }, function memoize1(f) {
        var cache = {}, g = function (arg) {
            var key = arg ? arg.toString() : ""
            return cache.hasOwnProperty(key) || (cache[key] = f.call(this, arg)), cache[key]
        }
        return g.name = f.name, g
    }, function constantFn(v) {
        return function () {
            return v
        }
    }, function latchFn(f) {
        var tripped = !1, val
        return function () {
            return tripped || (tripped = !0, val = f(), f = void 0), val
        }
    }, function argsToArray(args) {
        for (var array = new Array(args.length), i = 0; i < args.length; i++)array[i] = args[i]
        return array
    }, function StringComparator(s1, s2) {
        return s1 == s2 ? 0 : s1 < s2 ? -1 : 1
    }, function equals(a, b) {
        return a === b || !(!a || !b) && (a.equals ? a.equals(b) : a.compareTo ? 0 === a.compareTo(b) : b.compareTo ? 0 === b.compareTo(a) : a == b)
    }, function compare(a, b) {
        return a === b ? 0 : null == a ? -1 : null == b ? 1 : a.compareTo ? a.compareTo(b) : b.compareTo ? -b.compareTo(a) : a > b ? 1 : -1
    }, function toCompare(c) {
        return Array.isArray(c) ? CompoundComparator.apply(null, c) : c.compare ? c.compare.bind(c) : c
    }, function CompoundComparator() {
        for (var args = argsToArray(arguments), cs = [], i = 0; i < args.length; i++)cs[i] = toCompare(args[i])
        var f = function (o1, o2) {
            for (var i = 0; i < cs.length; i++) {
                var r = cs[i](o1, o2)
                if (0 != r)return r
            }
            return 0
        }
        return f.toSQL = function () {
            return args.map(function (s) {
                return s.toSQL()
            }).join(",")
        }, f.toMQL = function () {
            return args.map(function (s) {
                return s.toMQL()
            }).join(" ")
        }, f.toBQL = function () {
            return args.map(function (s) {
                return s.toBQL()
            }).join(" ")
        }, f.toString = f.toSQL, f
    }, function randomAct() {
        for (var totalWeight = 0, i = 0; i < arguments.length; i += 2)totalWeight += arguments[i]
        for (var r = Math.random(), i = 0, weight = 0; i < arguments.length; i += 2)if (weight += arguments[i], r <= weight / totalWeight)return arguments[i + 1](), void 0
    }, function Object_forEach(obj, fn) {
        for (var key in obj)obj.hasOwnProperty(key) && fn(obj[key], key)
    }, function predicatedSink(predicate, sink) {
        return predicate !== TRUE && sink ? {
            __proto__: sink, $UID: sink.$UID, put: function (obj, s, fc) {
                !sink.put || obj && !predicate.f(obj) || sink.put(obj, s, fc)
            }, remove: function (obj, s, fc) {
                !sink.remove || obj && !predicate.f(obj) || sink.remove(obj, s, fc)
            }, reset: function () {
                sink.reset && sink.reset()
            }, toString: function () {
                return "PredicatedSink(" + sink.$UID + ", " + predicate + ", " + sink + ")"
            }
        } : sink
    }, function limitedSink(count, sink) {
        var i = 0
        return {
            __proto__: sink, $UID: sink.$UID, put: function (obj, s, fc) {
                i++ >= count && fc ? fc.stop() : sink.put(obj, s, fc)
            }
        }
    }, function skipSink(skip, sink) {
        var i = 0
        return {
            __proto__: sink, $UID: sink.$UID, put: function (obj, s, fc) {
                i++ >= skip && sink.put(obj, s, fc)
            }
        }
    }, function orderedSink(comparator, sink) {
        return comparator = toCompare(comparator), {
            __proto__: sink,
            $UID: sink.$UID,
            i: 0,
            arr: [],
            put: function (obj, s, fc) {
                this.arr.push(obj)
            },
            eof: function () {
                this.arr.sort(comparator), this.arr.select(sink)
            }
        }
    }, function defineLazyProperty(target, name, definitionFn) {
        Object.defineProperty(target, name, {
            get: function () {
                var definition = definitionFn.call(this)
                return Object.defineProperty(this, name, definition), definition.get ? definition.get.call(this) : definition.value
            }, configurable: !0
        })
    }, function multiline(f) {
        if ("string" == typeof f)return f
        var s = f.toString(), start = s.indexOf("/*"), end = s.lastIndexOf("*/")
        return s.substring(start + 2, end)
    }, function findPageXY(node) {
        for (var x = 0, y = 0, parent; node;)parent = node, x += node.offsetLeft, y += node.offsetTop, node = node.offsetParent
        return [x, y, parent]
    }, function findViewportXY(node) {
        var rect = node.getBoundingClientRect()
        return [rect.left, rect.top]
    }, function nop() {
    }, function stringtoutf8(str) {
        for (var res = [], i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i), count = 0
            code < 128 && res.push(code)
        }
        return res
    }, function createGUID() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            var r = 16 * Math.random() | 0, v = "x" === c ? r : 3 & r | 8
            return v.toString(16)
        })
    }]
})
var labelize = memoize1(function (str) {
    return "" === str ? str : capitalize(str.replace(/[a-z][A-Z]/g, function (a) {
        return a.charAt(0) + " " + a.charAt(1)
    }))
}), constantize = memoize1(function (str) {
    return "x" === str ? "X_" : "y" === str ? "Y_" : "$" === str ? "$_" : str.replace(/[a-z][^0-9a-z_]/g, function (a) {
        return a.substring(0, 1) + "_" + a.substring(1, 2)
    }).toUpperCase()
}), capitalize = memoize1(function (str) {
    return str[0].toUpperCase() + str.substring(1)
}), camelize = memoize1(function (str) {
    var ret = str.replace(/(?:[-\s_])(\w)/g, function (_, a) {
        return a ? a.toUpperCase() : ""
    })
    return ret[0].toLowerCase() + ret.substring(1)
}), daoize = memoize1(function (str) {
    return str[0].toLowerCase() + str.substring(1) + "DAO"
}), cssClassize = memoize1(function (str) {
    return str.replace(/\./g, "-")
})
MODEL({
    extendsProto: "Object", properties: [{
        name: "$UID", getter: function () {
            var id = 1
            return function () {
                return Object.hasOwnProperty.call(this, "$UID__") ? this.$UID__ : (this.$UID__ = id, id++, this.$UID__)
            }
        }()
    }], methods: [function become(other) {
        for (var local = Object.getOwnPropertyNames(this), i = 0; i < local.length; i++)delete this[local[i]]
        var remote = Object.getOwnPropertyNames(other)
        for (i = 0; i < remote.length; i++)Object.defineProperty(this, remote[i], Object.getOwnPropertyDescriptor(other, remote[i]))
        this.__proto__ = other.__proto__
    }]
}), MODEL({
    extendsProto: "Array", constants: {oldForEach_: Array.prototype.forEach}, methods: [function clone() {
        return this.slice()
    }, function deepClone() {
        for (var a = this.clone(), i = 0; i < a.length; i++) {
            var o = a[i]
            o && (o.deepClone ? a[i] = o.deepClone() : o.clone && (a[i] = o.clone()))
        }
        return a
    }, function forEach(f, opt_this) {
        if (!this || !f || opt_this)return this.oldForEach_.call(this, f, opt_this)
        for (var l = this.length, i = 0; i < l; i++)f(this[i], i, this)
    }, function diff(other) {
        for (var added = other.slice(0), removed = [], i = 0; i < this.length; i++) {
            for (var j = 0; j < added.length; j++)if (0 == this[i].compareTo(added[j])) {
                added.splice(j, 1), j--
                break
            }
            j == added.length && removed.push(this[i])
        }
        return {added: added, removed: removed}
    }, function binaryInsert(item) {
        for (var start = 0, end = this.length - 1; end >= start;) {
            var m = start + Math.floor((end - start) / 2), c = item.compareTo(this[m])
            if (0 == c)return this
            c < 0 ? end = m - 1 : start = m + 1
        }
        return this.splice(start, 0, item), this
    }, function union(other) {
        return this.concat(other.filter(function (o) {
            return this.indexOf(o) == -1
        }.bind(this)))
    }, function intersection(other) {
        return this.filter(function (o) {
            return other.indexOf(o) != -1
        })
    }, function intern() {
        for (var i = 0; i < this.length; i++)this[i].intern && (this[i] = this[i].intern())
        return this
    }, function compareTo(other) {
        if (this.length !== other.length)return -1
        for (var i = 0; i < this.length; i++) {
            var result = this[i].compareTo(other[i])
            if (0 !== result)return result
        }
        return 0
    }, function deleteF(v) {
        for (var a = this.clone(), i = 0; i < a.length; i++)if (a[i] === v) {
            a.splice(i, 1)
            break
        }
        return a
    }, function deleteI(v) {
        for (var i = 0; i < this.length; i++)if (this[i] === v)return this.splice(i, 1), !0
        return !1
    }, function removeF(p) {
        for (var a = [], i = 0; i < a.length; i++)if (p.f(a[i]))for (i++; i < a.length; i++)a.push(a[i])
        return a
    }, function removeI(p) {
        for (var i = 0; i < this.length; i++)if (p.f(this[i]))return this.splice(i, 1), !0
        return !1
    }, function pushF(obj) {
        var a = this.clone()
        return a.push(obj), a
    }, function spliceF(start, end) {
        var r = [], i
        for (i = 0; i < start; i++)r.push(this[i])
        for (i = 2; i < arguments.length; i++)r.push(arguments[i])
        for (i = start + end; i < this.length; i++)r.push(this[i])
        return r
    }, function fReduce(comparator, arr) {
        compare = toCompare(comparator)
        for (var result = [], i = 0, j = 0, k = 0; i < this.length && j < arr.length;) {
            var a = compare(this[i], arr[j])
            a < 0 ? result[k++] = this[i++] : 0 != a ? result[k++] = arr[j++] : (result[k++] = this[i++], result[k++] = arr[j++])
        }
        return i != this.length && (result = result.concat(this.slice(i))), j != arr.length && (result = result.concat(arr.slice(j))), result
    }, function pushAll(arr) {
        return this.push.apply(this, arr), this.length
    }, function mapFind(map) {
        for (var i = 0; i < this.length; i++) {
            var result = map(this[i], i)
            if (result)return result
        }
    }, function mapProp(prop) {
        return this.map(function (x) {
            return x[prop]
        })
    }, function mapCall() {
        var args = Array.prototype.slice.call(arguments, 0), func = args.shift()
        return this.map(function (x) {
            return x[func] && x[func].apply(x[func], args)
        })
    }], properties: [{
        name: "memento", getter: function () {
            throw"Array's can not be memorized properly as a memento."
        }
    }]
}), MODEL({
    extendsProto: "String", methods: [function indexOfIC(a) {
        return a.length > this.length ? -1 : this.toUpperCase().indexOf(a.toUpperCase())
    }, function equals(other) {
        return 0 === this.compareTo(other)
    }, function equalsIC(other) {
        return other && this.toUpperCase() === other.toUpperCase()
    }, function capitalize() {
        return this.charAt(0).toUpperCase() + this.slice(1)
    }, function labelize() {
        return this.replace(/[a-z][A-Z]/g, function (a) {
            return a.charAt(0) + " " + a.charAt(1)
        }).capitalize()
    }, function compareTo(o) {
        return o == this ? 0 : this < o ? -1 : 1
    }, String.prototype.startsWith || function startsWith(a) {
        return 0 == this.lastIndexOf(a, 0)
    }, String.prototype.endsWith || function endsWith(a) {
        return this.length - a.length == this.lastIndexOf(a)
    }, function startsWithIC(a) {
        if (a.length > this.length)return !1
        for (var l = a.length, i = 0; i < l; i++)if (this[i].toUpperCase() !== a[i].toUpperCase())return !1
        return !0
    }, function put(obj) {
        return this + obj.toJSON()
    }, function () {
        var map = {}
        return function intern() {
            return map[this] || (map[this] = this.toString())
        }
    }(), function hashCode() {
        var hash = 0
        if (0 == this.length)return hash
        for (i = 0; i < this.length; i++) {
            var code = this.charCodeAt(i)
            hash = (hash << 5) - hash + code, hash &= hash
        }
        return hash
    }]
}), MODEL({
    extendsProto: "Function", methods: [function () {
        var oldBind = Function.prototype.bind, simpleBind = function (f, self) {
            return function () {
                return f.apply(self, arguments)
            }
        }
        return function bind(arg) {
            if (1 == arguments.length)return simpleBind(this, arg)
            for (var args = new Array(arguments.length), i = 0; i < arguments.length; i++)args[i] = arguments[i]
            return oldBind.apply(this, args)
        }
    }(), function equals(o) {
        return this === o
    }, function compareTo(o) {
        return this === o ? 0 : this.name.compareTo(o.name) || 1
    }, function o(f2) {
        var f1 = this
        return function () {
            return f1.call(this, f2.apply(this, argsToArray(arguments)))
        }
    }]
}), MODEL({
    extendsObject: "Math", methods: [function sign(n) {
        return n > 0 ? 1 : -1
    }]
}), MODEL({
    extendsProto: "Date", methods: [function toRelativeDateString() {
        var seconds = Math.floor((Date.now() - this.getTime()) / 1e3)
        if (seconds < 60)return "moments ago"
        var minutes = Math.floor(seconds / 60)
        if (1 == minutes)return "1 minute ago"
        if (minutes < 60)return minutes + " minutes ago"
        var hours = Math.floor(minutes / 60)
        if (1 == hours)return "1 hour ago"
        if (hours < 24)return hours + " hours ago"
        var days = Math.floor(hours / 24)
        if (1 == days)return "1 day ago"
        if (days < 7)return days + " days ago"
        if (days < 365) {
            var year = 1900 + this.getYear(), noyear = this.toDateString().replace(" " + year, "")
            return noyear.substring(4)
        }
        return this.toDateString().substring(4)
    }, function equals(o) {
        return !!o && (!!o.getTime && this.getTime() === o.getTime())
    }, function compareTo(o) {
        if (o === this)return 0
        if (!o)return 1
        var d = this.getTime() - o.getTime()
        return 0 == d ? 0 : d > 0 ? 1 : -1
    }, function toMQL() {
        return this.getFullYear() + "/" + (this.getMonth() + 1) + "/" + this.getDate()
    }, function toBQL() {
        var str = this.toISOString()
        return str.substring(0, str.indexOf("."))
    }]
}), MODEL({
    extendsProto: "Number", methods: [function compareTo(o) {
        return o == this ? 0 : this < o ? -1 : 1
    }]
}), MODEL({
    extendsProto: "Boolean", methods: [function compareTo(o) {
        return (this.valueOf() ? 1 : 0) - (o ? 1 : 0)
    }]
}), MODEL({
    extendsProto: "RegExp", methods: [function quote(str) {
        return (str + "").replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1")
    }]
}), console.log.json = function () {
    for (var args = [], i = 0; i < arguments.length; i++) {
        var arg = arguments[i]
        args.push(arg && arg.toJSON ? arg.toJSON() : arg)
    }
    console.log.apply(console, args)
}, console.log.str = function () {
    for (var args = [], i = 0; i < arguments.length; i++) {
        var arg = arguments[i]
        args.push(arg && arg.toString ? arg.toString() : arg)
    }
    console.log.apply(console, args)
}, console.log.put = console.log.bind(console), console.log.remove = console.log.bind(console, "remove: "), console.log.error = console.log.bind(console, "error: "), console.log.json.put = console.log.json.bind(console), console.log.json.reduceI = console.log.json.bind(console, "reduceI: "), console.log.json.remove = console.log.json.bind(console, "remove: "), console.log.json.error = console.log.json.bind(console, "error: "), console.log.str.put = console.log.str.bind(console), console.log.str.remove = console.log.str.bind(console, "remove: "), console.log.str.error = console.log.str.bind(console, "error: "), document.put = function (obj) {
    obj.write ? obj.write(this.X) : this.write(obj.toString())
}, window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.setImmediate, window.Blob && (Blob.prototype.slice = Blob.prototype.slice || Blob.prototype.webkitSlice), window.XMLHttpRequest && (XMLHttpRequest.prototype.asend = function (ret, opt_data) {
    var xhr = this
    xhr.onerror = function () {
        console.log("XHR Error: ", arguments)
    }, xhr.onloadend = function () {
        ret(xhr.response, xhr)
    }, xhr.send(opt_data)
}), String.fromCharCode = function () {
    var oldLookup = String.fromCharCode, lookupTable = []
    return function (a) {
        if (1 == arguments.length)return lookupTable[a] || (lookupTable[a] = oldLookup(a))
        for (var result = "", i = 0; i < arguments.length; i++)result += lookupTable[arguments[i]] || (lookupTable[arguments[i]] = oldLookup(arguments[i]))
        return result
    }
}()
var MementoProto = {}
Object.defineProperty(MementoProto, "equals", {
    enumerable: !1, configurable: !0, value: function (o) {
        var keys = Object.keys(this), otherKeys = Object.keys(o)
        if (keys.length != otherKeys.length)return !1
        for (var i = 0; i < keys.length; i++)if (!equals(this[keys[i]], o[keys[i]]))return !1
        return !0
    }
}), MODEL({
    extendsProto: "Function", methods: [function abind(self) {
        return function (ret) {
            this.apply(self, arguments), ret()
        }.bind(this)
    }, function ao(f2) {
        var f1 = this
        return function (ret) {
            var args = argsToArray(arguments)
            args[0] = f1.bind(this, ret), f2.apply(this, args)
        }
    }, function aseq(f2) {
        return f2.ao(this)
    }]
}), MODEL({
    extendsObject: "GLOBAL", methods: [function anop(ret) {
        ret && ret(void 0)
    }, function alog() {
        var args = arguments
        return function (ret) {
            console.log.apply(console, args), ret && ret.apply(this, [].slice.call(arguments, 1))
        }
    }, function aprofile(afunc) {
        return function (ret) {
            var a = argsToArray(arguments)
            console.profile("aprofile")
            var ret2 = function () {
                console.profileEnd(), ret && ret(arguments)
            }
            aapply_(afunc, ret2, a)
        }
    }, function aconstant(v) {
        return function (ret) {
            ret && ret(v)
        }
    }, function arepeat(n, afunc) {
        return n ? function (ret) {
            var a = argsToArray(arguments)
            a.splice(1, 0, 0, n)
            var next = atramp(function () {
                return a[1] == n - 1 ? (a[0] = ret, afunc.apply(this, a), void 0) : (afunc.apply(this, a), a[1]++, void 0)
            })
            a[0] = next, next.apply(this, a)
        } : anop
    }, function aforEach(arr, afunc) {
    }, function awhile(cond, afunc) {
        return function (ret) {
            var a = argsToArray(arguments), g = function () {
                return cond() ? (afunc.apply(this, a), void 0) : (ret.apply(void 0, arguments), void 0)
            }
            a[0] = g, g.apply(this, a)
        }
    }, function aif(cond, afunc, aelse) {
        return function (ret) {
            ("function" == typeof cond ? cond.apply(this, argsToArray(arguments).slice(1)) : cond) ? afunc.apply(this, arguments) : aelse ? aelse.apply(this, arguments) : ret()
        }
    }, function aaif(acond, afunc, aelse) {
        return function (ret) {
            var args = argsToArray(arguments)
            args[0] = function (c) {
                args[0] = ret, c ? afunc.apply(null, args) : aelse ? aelse.apply(null, args) : ret()
            }, acond.apply(null, args)
        }
    }, function () {
        var id = 1, activeOps = {}
        return function atime(str, afunc, opt_endCallback, opt_startCallback) {
            var name = str
            return aseq(function (ret) {
                activeOps[str] ? (name += "-" + id++, activeOps[str]++) : activeOps[str] = 1
                var start = performance.now()
                opt_startCallback && opt_startCallback(name), opt_endCallback || console.time(name), ret.apply(null, [].slice.call(arguments, 1))
            }, afunc, function (ret) {
                if (activeOps[str]--, opt_endCallback) {
                    var end = performance.now()
                    opt_endCallback(name, end - start)
                } else console.timeEnd(name)
                ret && ret.apply(null, [].slice.call(arguments, 1))
            })
        }
    }(), function ametric() {
        return this.atime.apply(this, arguments)
    }, function asleep(ms) {
        return function (ret) {
            window.setTimeout(ret, ms)
        }
    }, function ayield() {
        return function (ret) {
            window.setTimeout(ret, 0)
        }
    }, function afuture() {
        var set = !1, values = void 0, waiters = []
        return {
            isSet: function () {
                return set
            }, set: function () {
                if (set)return console.log("ERROR: redundant set on future"), void 0
                values = arguments, set = !0
                for (var i = 0; i < waiters.length; i++)waiters[i].apply(null, values)
                return waiters = void 0, this
            }, get: function (ret) {
                return set ? (ret.apply(null, values), void 0) : (waiters.push(ret), void 0)
            }
        }
    }, function aapply_(f, ret, args) {
        args.unshift(ret), f.apply(this, args)
    }, function arequestqueue(f, opt_lock, opt_max) {
        var lock = opt_lock || {}
        lock.q || (lock.q = [], lock.active = null)
        var onExit = function () {
            var next = lock.active = lock.q.pop()
            next && setTimeout(function () {
                f(onExit, next)
            }, 0)
        }, reduceDown = function (o, q) {
            for (var i = q.length - 1; i >= 0; i--) {
                var result = o.reduce(q[i])
                if (result) {
                    q.splice(i, 1), reduceDown(result, q)
                    break
                }
            }
            q.push(o)
        }
        return function (o) {
            if (lock.active) {
                var first = o.reduce(lock.active)
                if (first && first.equals(lock.active))return
            }
            reduceDown(o, lock.q, lock.q.length - 1), lock.q.length > opt_max && (lock.q.length = opt_max), lock.active || onExit()
        }
    }, function asynchronized(f, opt_lock) {
        function onExit(ret) {
            return function () {
                var next = lock.q.shift()
                next ? setTimeout(next, 0) : lock.active = !1, ret()
            }
        }

        var lock = opt_lock || {}
        return lock.q || (lock.q = [], lock.active = !1), function (ret) {
            return lock.active ? (lock.q.push(function () {
                f(onExit(ret))
            }), void 0) : (lock.active = !0, f(onExit(ret)), void 0)
        }
    }, function atimeout(delay, f, opt_timeoutF) {
        return function (ret) {
            var timedOut = !1, completed = !1
            setTimeout(function () {
                completed || (timedOut = !0, console.log("timeout"), opt_timeoutF && opt_timeoutF())
            }, delay), f(aseq(function (ret) {
                timedOut || (completed = !0), completed && ret()
            }, ret))
        }
    }, function amemo(f, opt_ttl) {
        var memoized = !1, values, waiters, age = 0, pending = !1
        return function (ret) {
            if (memoized)return ret.apply(null, values), void 0 != opt_ttl && !pending && Date.now() > age + opt_ttl && (pending = !0, f(function () {
                values = arguments, age = Date.now(), pending = !1
            })), void 0
            var first = !waiters
            first && (waiters = []), waiters.push(ret), first && f(function () {
                values = arguments, age = Date.now()
                for (var i = 0; i < waiters.length; i++)waiters[i] && waiters[i].apply(null, values)
                void 0 == opt_ttl && (f = void 0), memoized = !0, waiters = void 0
            })
        }
    }, function amemo1(afunc) {
        var cache = {}
        return function (ret, arg) {
            var key = arg ? arg.toString() : ""
            cache[key] || (cache[key] = afuture(), afunc(cache[key].set, arg)), cache[key].get(ret)
        }
    }, function amerged(f) {
        var waiters
        return function (ret) {
            var first = !waiters
            if (first) {
                waiters = []
                var args = argsToArray(arguments)
            }
            waiters.push(ret), first && (args[0] = function () {
                var calls = waiters
                waiters = void 0
                for (var i = 0; i < calls.length; i++)calls[i] && calls[i].apply(null, arguments)
            }, f.apply(null, args))
        }
    }, function mergeAsync(f) {
        var active = !1, args
        return function () {
            if (active)return args = argsToArray(arguments), void 0
            active = !0
            var ret = function () {
                args ? (args.unshift(ret), f.apply(null, args), args = void 0) : active = !1
            }, a = argsToArray(arguments)
            a.unshift(ret), f.apply(null, a)
        }
    }, function ao() {
        for (var ret = arguments[arguments.length - 1], i = 0; i < arguments.length - 1; i++)ret = arguments[i].ao(ret)
        return ret
    }, function aseq() {
        if (0 == arguments.lenth)return anop
        for (var f = arguments[arguments.length - 1], i = arguments.length - 2; i >= 0; i--)f = arguments[i].aseq(i % 100 == 99 ? atramp(f) : f)
        return f
    }, function apar() {
        var aargs = [], count = 0, fs = arguments
        return function (ret) {
            if (0 == fs.length)return ret && ret(), void 0
            for (var opt_args = Array.prototype.splice.call(arguments, 1), ajoin = function (i) {
                if (aargs[i] = Array.prototype.splice.call(arguments, 1), ++count == fs.length) {
                    for (var a = [], j = 0; j < fs.length; j++)for (var k = 0; k < aargs[j].length; k++)a.push(aargs[j][k])
                    ret && ret.apply(null, a)
                }
            }, i = 0; i < fs.length; i++)fs[i].apply(null, [ajoin.bind(null, i)].concat(opt_args))
        }
    }, function () {
        var active = !1, jobs = []
        return function atramp(afunc) {
            return function () {
                if (jobs.push([afunc, arguments]), !active) {
                    console.assert(jobs.length <= 1, "atramp with multiple jobs"), active = !0
                    for (var job; null != (job = jobs.pop());)job[0].apply(this, job[1])
                    active = !1
                }
            }
        }
    }(), function arepeatpar(n, afunc) {
        return function (ret) {
            if (0 === n)return ret && ret(), void 0
            for (var aargs = [], count = 0, opt_args = Array.prototype.splice.call(arguments, 1), ajoin = function (i) {
                if (++count == n) {
                    var a = []
                    ret && ret.apply(null, a)
                }
            }, i = 0; i < n; i++)afunc.apply(null, [ajoin.bind(null, i)].concat([i, n]).concat(opt_args))
        }
    }, function axhr(url, opt_op, opt_params) {
        var op = opt_op || "GET", params = opt_params || []
        return function (ret) {
            var xhr = new XMLHttpRequest
            xhr.open(op, url), xhr.asend(function (json) {
                ret(JSON.parse(json))
            }, params && params.join("&"))
        }
    }, function futurefn(future) {
        return function () {
            var args = arguments
            future.get(function (f) {
                f.apply(void 0, args)
            })
        }
    }, function adelay(afunc, delay) {
        function pump() {
            if (!timeout && queue.length) {
                var top = queue.shift(), f = top[0], args = top[1], ret = args[0]
                args[0] = function () {
                    ret.apply(null, arguments), pump()
                }, timeout = setTimeout(function () {
                    timeout = 0, f.apply(null, args)
                }, delay)
            }
        }

        var queue = [], timeout
        return function () {
            var args = arguments
            queue.push([afunc, args]), pump()
        }
    }, function adebugger(fn) {
        return function (ret) {
            fn.apply(null, arguments)
        }
    }]
})
var __JSONP_CALLBACKS__ = {}, wrapJsonpCallback = function () {
    var nextID = 0
    return function (ret, opt_nonce) {
        var id = "c" + nextID++
        opt_nonce && (id += Math.floor(16777215 * Math.random()).toString(16))
        var cb = __JSONP_CALLBACKS__[id] = function (data) {
            delete __JSONP_CALLBACKS__[id], ret && ret.call(this, data)
        }
        return cb.id = id, cb
    }
}(), ajsonp = function (url, params) {
    return function (ret) {
        var cb = wrapJsonpCallback(ret), script = document.createElement("script")
        script.src = url + "?callback=__JSONP_CALLBACKS__." + cb.id + (params ? "&" + params.join("&") : ""), script.onload = function () {
            document.body.removeChild(this)
        }, script.onerror = function () {
            cb(null), document.body.removeChild(this)
        }, document.body.appendChild(script)
    }
}, StringPS = {
    create: function (str) {
        var o = Object.create(this)
        return o.pos = 0, o.str_ = [str], o.tail_ = [], o
    }, set str(str) {
        this.str_[0] = str
    }, get head() {
        return this.pos >= this.str_[0].length ? null : this.str_[0].charAt(this.pos)
    }, get value() {
        return this.hasOwnProperty("value_") ? this.value_ : this.str_[0].charAt(this.pos - 1)
    }, get tail() {
        if (!this.tail_[0]) {
            var tail = Object.create(this.__proto__)
            tail.str_ = this.str_, tail.pos = this.pos + 1, tail.tail_ = [], this.tail_[0] = tail
        }
        return this.tail_[0]
    }, setValue: function (value) {
        var ret = Object.create(this.__proto__)
        return ret.str_ = this.str_, ret.pos = this.pos, ret.tail_ = this.tail_, ret.value_ = value, ret
    }, toString: function () {
        return this.str_[0].substring(this.pos)
    }
}, literal = function () {
    var cache = {}
    return function (str, opt_value) {
        if (!opt_value && cache[str])return cache[str]
        var f
        return f = 1 === str.length ? function (ps) {
            return str === ps.head ? ps.tail.setValue(opt_value || str) : void 0
        } : function (ps) {
            for (var i = 0; i < str.length; i++, ps = ps.tail)if (str.charAt(i) !== ps.head)return
            return ps.setValue(opt_value || str)
        }, f.toString = function () {
            return '"' + str + '"'
        }, opt_value ? f : cache[str] = f
    }
}(), alphaChar = alt(range("a", "z"), range("A", "Z")), alphaNumChar = alt(alphaChar, range("0", "9")), wordChar = alt(alphaNumChar, "_"), parserVersion_ = 1, TrapPStream = {
    create: function (ps) {
        return {__proto__: this, head: ps.head, value: ps.value, goodChar: !1}
    }, getValue: function () {
        return this.value
    }, setValue: function (v) {
        return this.value = v, this
    }, get tail() {
        return this.goodChar = !0, {
            value: this.value, getValue: function () {
                return this.value
            }, setValue: function (v) {
                this.value = v
            }
        }
    }
}, DEBUG_PARSE = !1, grammar = {
    parseString: function (str, opt_start) {
        var ps = this.stringPS
        ps.str = str
        var res = this.parse(opt_start || this.START, ps)
        return res && res.value
    }, parse: function (parser, pstream) {
        DEBUG_PARSE && pstream.str_ && (console.log(new Array(pstream.pos).join("."), pstream.head), console.log(pstream.pos + "> " + pstream.str_[0].substring(0, pstream.pos) + "(" + pstream.head + ")"))
        var ret = parser.call(this, pstream)
        return DEBUG_PARSE && console.log(parser + " ==> " + !!ret + "  " + (ret && ret.value)), ret
    }, export: function (str) {
        return this[str].bind(this)
    }, addAction: function (sym, action) {
        var p = this[sym]
        this[sym] = function (ps) {
            var val = ps.value, ps2 = this.parse(p, ps)
            return ps2 && ps2.setValue(action.call(this, ps2.value, val))
        }, this[sym].toString = function () {
            return "<<" + sym + ">>"
        }
    }, addActions: function (map) {
        for (var key in map)this.addAction(key, map[key])
        return this
    }
}
defineTTLProperty(grammar, "stringPS", 3e4, function () {
    return StringPS.create("")
})
var SkipGrammar = {
    create: function (gramr, skipp) {
        return {
            __proto__: gramr, skip_: !0, parse: function (parser, pstream) {
                return this.skip_ && (pstream = this.skip.call(grammar, pstream) || pstream), this.__proto__.parse.call(this, parser, pstream)
            }, skip: skipp
        }
    }
}, __ROOT__ = {}
MODEL({
    name: "EventService",
    extends: "__ROOT__",
    constants: {UNSUBSCRIBE_EXCEPTION: "unsubscribe", WILDCARD: "*"},
    methods: {
        oneTime: function (listener) {
            return function () {
                throw listener.apply(this, argsToArray(arguments)), EventService.UNSUBSCRIBE_EXCEPTION
            }
        }, consoleLog: function (listener) {
            return function () {
                var args = argsToArray(arguments)
                console.log(args), listener.apply(this, args)
            }
        }, merged: function (listener, opt_delay, opt_X) {
            var setTimeoutX = opt_X && opt_X.setTimeout || setTimeout, delay = opt_delay || 16
            return function () {
                var triggered = !1, unsubscribed = !1, lastArgs = null, f = function () {
                    if (lastArgs = arguments, unsubscribed)throw EventService.UNSUBSCRIBE_EXCEPTION
                    if (!triggered) {
                        triggered = !0
                        try {
                            setTimeoutX(function () {
                                triggered = !1
                                var args = argsToArray(lastArgs)
                                lastArgs = null
                                try {
                                    listener.apply(this, args)
                                } catch (x) {
                                    x === EventService.UNSUBSCRIBE_EXCEPTION && (unsubscribed = !0)
                                }
                            }, delay)
                        } catch (e) {
                            throw EventService.UNSUBSCRIBE_EXCEPTION
                        }
                    }
                }
                return DEBUG && (f.toString = function () {
                    return "MERGED(" + delay + ", " + listener.$UID + ", " + listener + ")"
                }), f
            }()
        }, framed: function (listener, opt_X) {
            opt_X = opt_X || this.X
            var requestAnimationFrameX = opt_X && opt_X.requestAnimationFrame || requestAnimationFrame
            return function () {
                var triggered = !1, unsubscribed = !1, lastArgs = null, f = function () {
                    if (lastArgs = arguments, unsubscribed)throw EventService.UNSUBSCRIBE_EXCEPTION
                    triggered || (triggered = !0, requestAnimationFrameX(function () {
                        triggered = !1
                        var args = argsToArray(lastArgs)
                        lastArgs = null
                        try {
                            listener.apply(this, args)
                        } catch (x) {
                            x === EventService.UNSUBSCRIBE_EXCEPTION && (unsubscribed = !0)
                        }
                    }))
                }
                return DEBUG && (f.toString = function () {
                    return "FRAMED(" + listener.$UID + ", " + listener + ")"
                }), f
            }()
        }, async: function (listener, opt_X) {
            return this.delay(0, listener, opt_X)
        }, delay: function (delay, listener, opt_X) {
            return opt_X = opt_X || this.X, function () {
                var args = argsToArray(arguments);
                (opt_X && opt_X.setTimeout ? opt_X.setTimeout : setTimeout)(function () {
                    listener.apply(this, args)
                }, delay)
            }
        }, hasListeners: function (opt_topic) {
            return opt_topic ? (console.log("TODO: haslisteners"), !0) : !!this.subs_
        }, publish: function (topic) {
            return this.subs_ ? this.pub_(this.subs_, 0, topic, this.appendArguments([this, topic], arguments, 1)) : 0
        }, publishAsync: function (topic) {
            var args = argsToArray(arguments), me = this
            setTimeout(function () {
                me.publish.apply(me, args)
            }, 0)
        }, deepPublish: function (topic) {
            return this.publish.apply(this, arguments)
        }, lazyPublish: function (topic, fn) {
            return this.hasListeners(topic) ? this.publish.apply(this, fn()) : 0
        }, subscribe: function (topic, listener) {
            this.subs_ || (this.subs_ = {}), this.sub_(this.subs_, 0, topic, listener)
        }, unsubscribe: function (topic, listener) {
            this.subs_ && this.unsub_(this.subs_, 0, topic, listener)
        }, unsubscribeAll: function () {
            this.sub_ = {}
        }, pub_: function (map, topicIndex, topic, msg) {
            var count = 0
            if (null == map)return 0
            if (topicIndex < topic.length) {
                var t = topic[topicIndex]
                if (t == this.WILDCARD)return this.notifyListeners_(topic, map, msg)
                t && (count += this.pub_(map[t], topicIndex + 1, topic, msg))
            }
            return count += this.notifyListeners_(topic, map[null], msg), count
        }, sub_: function (map, topicIndex, topic, listener) {
            if (topicIndex == topic.length)map[null] || (map[null] = []), map[null].push(listener)
            else {
                var key = topic[topicIndex]
                map[key] || (map[key] = {}), this.sub_(map[key], topicIndex + 1, topic, listener)
            }
        }, unsub_: function (map, topicIndex, topic, listener) {
            if (topicIndex == topic.length) {
                if (!map[null])return !0
                var i = map[null].indexOf(listener)
                i == -1 || (map[null] = map[null].spliceF(i, 1)), map[null].length || delete map[null]
            } else {
                var key = topic[topicIndex]
                if (!map[key])return !1
                this.unsub_(map[key], topicIndex + 1, topic, listener) && delete map[key]
            }
            return 0 == Object.keys(map).length
        }, notifyListener_: function (topic, listener, msg) {
            try {
                listener.apply(null, msg)
            } catch (err) {
                return err !== this.UNSUBSCRIBE_EXCEPTION && (console.error("Error delivering event (removing listener): ", topic.join("."), err), DEBUG && console.error(err.stack)), !1
            }
            return !0
        }, notifyListeners_: function (topic, listeners, msg) {
            if (null == listeners)return 0
            if (Array.isArray(listeners)) {
                for (var i = 0; i < listeners.length; i++) {
                    var listener = listeners[i]
                    this.notifyListener_(topic, listener, msg) || this.unsubscribe(topic, listener)
                }
                return listeners.length
            }
            var count = 0
            for (var key in listeners)count += this.notifyListeners_(topic, listeners[key], msg)
            return count
        }, appendArguments: function (a, args, start) {
            for (var i = start; i < args.length; i++)a.push(args[i])
            return a
        }
    }
}), MODEL({
    name: "PropertyChangeSupport", extends: "EventService", constants: {PROPERTY_TOPIC: "property"}, methods: {
        propertyTopic: memoize1(function (property) {
            return [this.PROPERTY_TOPIC, property]
        }), propertyChange: function (property, oldValue, newValue) {
            this.subs_ && (null != property && (oldValue === newValue || oldValue !== oldValue && newValue !== newValue) || this.publish(this.propertyTopic(property), oldValue, newValue))
        }, propertyChange_: function (propertyTopic, oldValue, newValue) {
            this.subs_ && (oldValue === newValue || oldValue !== oldValue && newValue !== newValue || this.publish(propertyTopic, oldValue, newValue))
        }, globalChange: function () {
            this.publish(this.propertyTopic(this.WILDCARD), null, null)
        }, addListener: function (listener) {
            console.assert(listener, "Listener cannot be null."), this.addPropertyListener(null, listener)
        }, removeListener: function (listener) {
            this.removePropertyListener(null, listener)
        }, addPropertyListener: function (property, listener) {
            this.subscribe(this.propertyTopic(property), listener)
        }, removePropertyListener: function (property, listener) {
            this.unsubscribe(this.propertyTopic(property), listener)
        }, propertyValue: function (prop) {
            if (!prop)throw"Property Name required for propertyValue()."
            var props = this.props_ || (this.props_ = {})
            return Object.hasOwnProperty.call(props, prop) ? props[prop] : props[prop] = PropertyValue.create(this, prop)
        }
    }
})
var FunctionStack = {
    create: function () {
        var stack = [!1]
        return {
            stack: stack, push: function (f) {
                stack.unshift(f)
            }, pop: function () {
                stack.shift()
            }
        }
    }
}, Value = {
    __isValue__: !0, isInstance: function (o) {
        return o && o.__isValue__
    }, follow: function (srcValue) {
        Events.follow(srcValue, this)
    }
}, PropertyValue = {
    __proto__: Value, create: function (obj, prop) {
        var o = Object.create(this)
        return o.$UID = obj.$UID + "." + prop, o.obj = obj, o.prop = prop, o
    }, get: function () {
        return this.obj[this.prop]
    }, set: function (val) {
        this.obj[this.prop] = val
    }, get value() {
        return this.get()
    }, set value(val) {
        this.set(val)
    }, addListener: function (listener) {
        this.obj.addPropertyListener(this.prop, listener)
    }, removeListener: function (listener) {
        this.obj.removePropertyListener(this.prop, listener)
    }, toString: function () {
        return "PropertyValue(" + this.prop + ")"
    }
}, Events = {
    listeners_: new WeakMap, recordListener: function (src, dst, listener, opt_dontCallListener) {
        var srcMap = this.listeners_.get(src)
        srcMap || (srcMap = new WeakMap, this.listeners_.set(src, srcMap)), console.assert(!srcMap.get(dst), "recordListener: duplicate follow"), srcMap.set(dst, listener), src.addListener(listener), opt_dontCallListener || listener()
    }, identity: function (x) {
        return x
    }, follow: function (srcValue, dstValue) {
        srcValue && dstValue && this.recordListener(srcValue, dstValue, function () {
            var sv = srcValue.get(), dv = dstValue.get()
            equals(sv, dv) || dstValue.set(sv)
        })
    }, unfollow: function (src, dst) {
        if (src && dst) {
            var srcMap = this.listeners_.get(src)
            if (srcMap) {
                var listener = srcMap.get(dst)
                listener && (srcMap.delete(dst), src.removeListener(listener))
            }
        }
    }, map: function (srcValue, dstValue, f) {
        srcValue && dstValue && this.recordListener(srcValue, dstValue, function () {
            var s = f(srcValue.get()), d = dstValue.get()
            equals(s, d) || dstValue.set(s)
        })
    }, link: function (srcValue, dstValue) {
        this.follow(srcValue, dstValue), this.follow(dstValue, srcValue)
    }, relate: function (srcValue, dstValue, f, fprime, removeFeedback) {
        if (srcValue && dstValue) {
            var feedback = !1, l = function (sv, dv, f) {
                return function () {
                    if (!removeFeedback || !feedback) {
                        var s = f(sv.get()), d = dv.get()
                        equals(s, d) || (feedback = !0, dv.set(s), feedback = !1)
                    }
                }
            }, l1 = l(srcValue, dstValue, f), l2 = l(dstValue, srcValue, fprime)
            this.recordListener(srcValue, dstValue, l1, !0), this.recordListener(dstValue, srcValue, l2, !0), l1()
        }
    }, unlink: function (value1, value2) {
        this.unfollow(value1, value2), this.unfollow(value2, value1)
    }, dynamicFn: function (fn, opt_fn, opt_X) {
        var fn2 = opt_fn ? function () {
            opt_fn(fn())
        } : fn, listener = EventService.framed(fn2, opt_X), propertyValues = []
        fn(), Events.onGet.push(function (obj, name, value) {
            var l = obj.propertyValue(name)
            propertyValues.indexOf(l) == -1 && (obj.propertyValue(name).addListener(listener), propertyValues.push(l))
        })
        var ret = fn()
        return Events.onGet.pop(), opt_fn && opt_fn(ret), {
            destroy: function () {
                propertyValues.forEach(function (p) {
                    p.removeListener(listener)
                })
            }
        }
    }, onSet: FunctionStack.create(), onGet: FunctionStack.create()
}
MODEL({
    name: "Movement", methods: {
        distance: function (x, y) {
            return Math.sqrt(x * x + y * y)
        }, o: function (f1, f2) {
            return function (x) {
                return f1(f2(x))
            }
        }, avg: function (f1, f2) {
            return function (x) {
                return (f1(x) + f2(x)) / 2
            }
        }, spline: function (f1, f2) {
            return function (x) {
                return (1 - x) * f1(x) + x * f2(x)
            }
        }, linear: function (x) {
            return x
        }, back: function (x) {
            return x < .5 ? 2 * x : 2 - 2 * x
        }, accelerate: function (x) {
            return (Math.sin(x * Math.PI - Math.PI / 2) + 1) / 2
        }, easeIn: function (a) {
            var v = 1 / (1 - a / 2)
            return function (x) {
                var x1 = Math.min(x, a), x2 = Math.max(x - a, 0)
                return (a ? .5 * x1 * (x1 / a) * v : 0) + x2 * v
            }
        }, reverse: function (f) {
            return function (x) {
                return 1 - f(1 - x)
            }
        }, easeOut: function (b) {
            return Movement.reverse(Movement.easeIn(b))
        }, oscillate: function (b, a, opt_c) {
            var c = opt_c || 3
            return function (x) {
                if (x < 1 - b)return x / (1 - b)
                var t = (x - 1 + b) / b
                return 1 + 2 * (1 - t) * a * Math.sin(2 * c * Math.PI * t)
            }
        }, bounce: function (b, a, opt_c) {
            var c = opt_c || 3
            return function (x) {
                if (x < 1 - b)return x / (1 - b)
                var t = (x - 1 + b) / b
                return 1 - 2 * (1 - t) * a * Math.abs(Math.sin(2 * c * Math.PI * t))
            }
        }, bounce2: function (a) {
            var v = 1 / (1 - a)
            return function (x) {
                if (x < 1 - a)return v * x
                var p = (x - 1 + a) / a
                return 1 - (x - 1 + a) * v / 2
            }
        }, stepBack: function (a) {
            return function (x) {
                return x < a ? -x : -2 * a + (1 + 2 * a) * x
            }
        }, ease: function (a, b) {
            return Movement.o(Movement.easeIn(a), Movement.easeOut(b))
        }, seq: function (f1, f2) {
            return f1 && f2 ? function () {
                f1.apply(this, argsToArray(arguments)), f2()
            } : f1 ? f1 : f2
        }, liveAnimations_: 0, animate: function (duration, fn, opt_interp, opt_onEnd, opt_X) {
            var requestAnimationFrameX = opt_X && opt_X.requestAnimationFrame || requestAnimationFrame
            if (0 == duration)return Movement.seq(fn, opt_onEnd)
            var interp = opt_interp || Movement.linear
            return function () {
                function stop() {
                    var onEnd = opt_onEnd
                    if (!stopped && (Movement.liveAnimations_--, stopped = !0, onEnd && onEnd(), onEnd = null, 0 === Movement.liveAnimations_)) {
                        var tasks = Movement.idleTasks_
                        tasks && tasks.length > 0 && (Movement.idleTasks_ = [], setTimeout(function () {
                            var i
                            if (Movement.liveAnimations_ > 0)for (i = 0; i < tasks.length; i++)Movement.idleTasks_.push(tasks[i])
                            else for (i = 0; i < tasks.length; i++)tasks[i]()
                        }, 20))
                    }
                }

                function go() {
                    if (!stopped) {
                        for (var now = Date.now(), p = interp((Math.min(now, startTime + duration) - startTime) / duration), last = now >= startTime + duration, i = 0; i < ranges.length; i++) {
                            var r = ranges[i], obj = r[0], name = r[1], value1 = r[2], value2 = r[3]
                            obj[name] = last ? value2 : value1 + (value2 - value1) * p
                        }
                        last ? stop() : requestAnimationFrameX(go)
                    }
                }

                var ranges = [], stopped = !1
                fn && (Events.onSet.push(function (obj, name, value2) {
                    ranges.push([obj, name, obj[name], value2])
                }), fn.apply(this, argsToArray(arguments)), Events.onSet.pop())
                var startTime = Date.now()
                if (ranges.length > 0)Movement.liveAnimations_++, requestAnimationFrameX(go)
                else {
                    var setTimeoutX = opt_X && opt_X.setTimeout || setTimeout
                    setTimeoutX(stop, duration)
                }
                return stop
            }
        }, whenIdle: function (fn) {
            return function () {
                if (Movement.liveAnimations_ > 0) {
                    Movement.idleTasks_ || (Movement.idleTasks_ = [])
                    var args = arguments
                    Movement.idleTasks_.push(function () {
                        fn.apply(fn, args)
                    })
                } else fn.apply(fn, arguments)
            }
        }, compile: function (a, opt_rest) {
            function noop() {
            }

            function isPause(op) {
                return Array.isArray(op) && 0 == op[0]
            }

            function compilePause(op, rest) {
                return function () {
                    var l = function () {
                        document.removeEventListener("click", l), rest()
                    }
                    document.addEventListener("click", l)
                }
            }

            function isSimple(op) {
                return Array.isArray(op) && "number" == typeof op[0]
            }

            function compileSimple(op, rest) {
                return op[3] = Movement.seq(op[3], rest), function () {
                    Movement.animate.apply(null, op)()
                }
            }

            function isParallel(op) {
                return Array.isArray(op) && Array.isArray(op[0])
            }

            function compileParallel(op, rest) {
                var join = function (num) {
                    return function () {
                        --num || rest()
                    }
                }(op.length)
                return function () {
                    for (var i = 0; i < op.length; i++)isSimple(op[i]) ? Movement.animate(op[i][0], op[i][1], op[i][2], Movement.seq(op[i][3], join))() : Movement.compile(op[i], join)()
                }
            }

            function compileFn(fn, rest) {
                return Movement.seq(fn, rest)
            }

            function compile_(a, i) {
                if (i >= a.length)return opt_rest || noop
                var rest = compile_(a, i + 1), op = a[i]
                return isPause(op) ? compilePause(op, rest) : isSimple(op) ? compileSimple(op, rest) : isParallel(op) ? compileParallel(op, rest) : compileFn(op, rest)
            }

            return compile_(a, 0)
        }, onIntersect: function (o1, o2, fn) {
            o1.model_.R ? Events.dynamicFn(function () {
                o1.x, o1.y, o2.x, o2.y
            }, function () {
                var dx = o1.x - o2.x, dy = o1.y - o2.y, d = dx * dx + dy * dy, r2 = o1.r + o2.r
                d < r2 * r2 && fn.call(null, o1, o2)
            }) : Events.dynamicFn(function () {
                o1.x, o1.y, o2.x, o2.y
            }, function () {
                (o1.x <= o2.x && o1.x + o1.width > o2.x && o1.y <= o2.y && o1.y + o1.height > o2.y || o2.x <= o1.x && o2.x + o2.width > o1.x && o2.y <= o1.y && o2.y + o2.height > o1.y) && fn.call(null, o1, o2)
            })
        }, stepTowards: function (src, dst, maxStep) {
            var dx = src.x - dst.x, dy = src.y - dst.y, theta = Math.atan2(dy, dx), r = Math.sqrt(dx * dx + dy * dy)
            r = r < 0 ? Math.max(-maxStep, r) : Math.min(maxStep, r), dst.x += r * Math.cos(-theta), dst.y -= r * Math.sin(-theta)
        }, moveTowards: function (t, body, sat, v) {
            var bodyX = body.propertyValue("x"), bodyY = body.propertyValue("y"), satX = sat.propertyValue("x"), satY = sat.propertyValue("y")
            t.addListener(function () {
                var dx = bodyX.get() - satX.get(), dy = bodyY.get() - satY.get(), theta = Math.atan2(dy, dx), r = Math.sqrt(dx * dx + dy * dy)
                r = r < 0 ? Math.max(-v, r) : Math.min(v, r), satX.set(satX.get() + r * Math.cos(-theta)), satY.set(satY.get() - r * Math.sin(-theta))
            })
        }, orbit: function (t, body, sat, r, p, opt_start) {
            var bodyX = body.x$, bodyY = body.y$, satX = sat.x$, satY = sat.y$, start = opt_start || 0
            t.addListener(EventService.framed(function () {
                var time = t.time
                satX.set(bodyX.get() + r * Math.sin(time / p * Math.PI * 2 + start)), satY.set(bodyY.get() + r * Math.cos(time / p * Math.PI * 2 + start))
            }))
        }, strut: function (mouse, c, dx, dy) {
            Events.dynamicFn(function () {
                mouse.x, mouse.y
            }, function () {
                c.x = mouse.x + dx, c.y = mouse.y + dy
            })
        }, gravity: function (c, opt_a, opt_theta) {
            var a = opt_a || 1, theta = opt_theta || 1.5 * Math.PI
            Events.dynamicFn(function () {
                c.vx, c.vy
            }, function () {
                c.vy += a
            })
        }, friction: function (c, opt_coef) {
            var coef = opt_coef || .9
            Events.dynamicFn(function () {
                c.vx, c.vy
            }, function () {
                c.vx = Math.abs(c.vx) < .001 ? 0 : c.vx * coef, c.vy = Math.abs(c.vy) < .001 ? 0 : c.vy * coef
            })
        }, inertia: function (c) {
            var last = Date.now()
            Events.dynamicFn(function () {
                c.vx, c.vy, c.x, c.y
            }, function () {
                var now = Date.now(), time = Math.min(Math.max(16, now - last), 64) / 16
                Math.abs(c.vx) > .001 && (c.x += c.vx * time), Math.abs(c.vy) > .001 && (c.y += c.vy * time), last = now
            })
        }, spring: function (mouse, c, dx, dy, opt_strength) {
            var strength = opt_strength || 6, d = Movement.distance(dx, dy)
            Events.dynamicFn(function () {
                mouse.x, mouse.y, c.x, c.y, c.vx, c.vy
            }, function () {
                if (0 === dx && 0 === dy)c.x = mouse.x, c.y = mouse.y
                else {
                    var dx2 = mouse.x + dx - c.x, dy2 = mouse.y + dy - c.y, d2 = Movement.distance(dx2, dy2), dv = strength * d2 / d
                    if (Math.abs(dv) < .01)return
                    var a = Math.atan2(dy2, dx2)
                    c.vx += dv * Math.cos(a), c.vy += dv * Math.sin(a)
                }
            })
        }, spring2: function (c1, c2, length, opt_strength) {
            var strength = opt_strength || 4
            Events.dynamicFn(function () {
                c1.x, c1.y, c2.x, c2.y
            }, function () {
                var d = c1.distanceTo(c2), a = Math.atan2(c2.y - c1.y, c2.x - c1.x)
                d > length ? (c1.applyMomentum(strength * (d / length - 1), a), c2.applyMomentum(-strength * (d / length - 1), a)) : d < length && (c1.applyMomentum(-strength * (length / d - 1), a), c2.applyMomentum(strength * (length / d - 1), a))
            })
        }, createAnimatedPropertyInstallFn: function (duration, interpolation) {
            return function (prop) {
                this.defineProperty({
                    name: prop.name + "$AnimationLatch",
                    defaultValue: 0,
                    hidden: !0,
                    documentation: function () {
                    }
                })
                var actualSetter = this.__lookupSetter__(prop.name)
                this.defineProperty({
                    name: prop.name + "$AnimationSetValue",
                    defaultValue: 0,
                    hidden: !0,
                    documentation: function () {
                    },
                    postSet: function (_, nu) {
                        actualSetter.call(this, nu)
                    }
                }), this.__defineSetter__(prop.name, function (nu) {
                    var latch = this[prop.name + "$AnimationLatch"]
                    latch && latch()
                    var anim = Movement.animate(duration, function () {
                        this[prop.name + "$AnimationSetValue"] = nu
                    }.bind(this), interpolation)
                    this[prop.name + "$AnimationLatch"] = anim()
                })
            }
        }
    }
}), Movement.easy = Movement.spline(Movement.spline(constantFn(0), Movement.linear), Movement.spline(Movement.linear, constantFn(1)))
var AbstractFormatter = {
    keyify: function (str) {
        return '"' + str + '"'
    }, stringify: function (obj) {
        var buf = ""
        return this.output(function () {
            for (var i = 0; i < arguments.length; i++)buf += arguments[i]
        }, obj), buf
    }, stringifyObject: function (obj, opt_defaultModel) {
        var buf = ""
        return this.outputObject_(function () {
            for (var i = 0; i < arguments.length; i++)buf += arguments[i]
        }, obj, opt_defaultModel), buf
    }, where: function (p) {
        return {__proto__: this, p: p.f && p.f.bind(p) || p}
    }, p: function () {
        return !0
    }
}, JSONUtil = {
    escape: function (str) {
        return str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/[\x00-\x1f]/g, function (c) {
            return "\\u00" + (c.charCodeAt(0) < 16 ? "0" + c.charCodeAt(0).toString(16) : c.charCodeAt(0).toString(16))
        })
    },
    parseToMap: function (str) {
        return eval("(" + str + ")")
    },
    aparse: function (ret, X, str) {
        var seq = [], res = this.parse(X, str, seq)
        return seq.length ? (apar.apply(null, seq)(function () {
            ret(res)
        }), void 0) : (ret(res), void 0)
    },
    amapToObj: function (ret, X, obj, opt_defaultModel) {
        var seq = [], res = this.mapToObj(X, obj, opt_defaultModel, seq)
        return seq.length ? (aseq.apply(null, seq)(function () {
            ret(res)
        }), void 0) : res
    },
    parse: function (X, str, seq) {
        return this.mapToObj(X, this.parseToMap(str), void 0, seq)
    },
    arrayToObjArray: function (X, a, opt_defaultModel, seq) {
        for (var i = 0; i < a.length; i++)a[i] = this.mapToObj(X, a[i], opt_defaultModel, seq)
        return a
    },
    mapToObj: function (X, obj, opt_defaultModel, seq) {
        if (!obj || "object" == typeof obj.model_)return obj
        if (Array.isArray(obj))return this.arrayToObjArray(X, obj, void 0, seq)
        if (obj instanceof Function)return obj
        if (obj instanceof Date)return obj
        if (obj instanceof Object) {
            if (("Model" === obj.model_ || "Model" === opt_defaultModel) && obj.properties)for (var i = 0; i < obj.properties.length; i++) {
                var p = obj.properties[i]
                p.type && !p.model_ && "Property" !== p.type && (p.model_ = p.type + "Property", X.arequire(p.model_)(function (obj, p) {
                    return function (m) {
                        Property && !Property.isSubModel(m) && console.log("ERROR: Use of non Property Sub-Model as Property type: ", obj.package + "." + obj.name, p.type)
                    }
                }(obj, p)))
            }
            for (var key in obj)"model_" != key && "prototype_" != key && (obj[key] = this.mapToObj(X, obj[key], null, seq))
            if (opt_defaultModel && !obj.model_)return opt_defaultModel.create(obj, X)
            if (obj.model_) {
                var newObj = X.lookup(obj.model_)
                if (!newObj || !newObj.finished__) {
                    var future = afuture()
                    return seq && seq.push(future.get), X.arequire(obj.model_)(function (model) {
                        if (!model)return FLAGS.debug && "Template" !== obj.model_ && "ArrayProperty" !== obj.model_ && "ViewFactoryProperty" !== obj.model_ && "Documentation" !== obj.model_ && "DocumentationProperty" !== obj.model_ && "CSSProperty" !== obj.model_ && "FunctionProperty" !== obj.model_ && console.warn("Failed to dynamically load: ", obj.model_), future.set(obj), void 0
                        if (!obj.instance_) {
                            var tmp = model.create(obj, X)
                            obj.become(tmp), future.set(obj)
                        }
                    }), obj
                }
                var ret = newObj ? newObj.create(obj, X) : obj
                return ret.readResolve ? ret.readResolve() : ret
            }
            return obj
        }
        return obj
    },
    compact: {
        __proto__: AbstractFormatter, output: function (out, obj, opt_defaultModel) {
            Array.isArray(obj) ? this.outputArray_(out, obj) : "string" == typeof obj ? (out('"'), out(JSONUtil.escape(obj)), out('"')) : obj instanceof Function ? this.outputFunction_(out, obj) : obj instanceof Date ? out(obj.getTime()) : obj instanceof RegExp ? out(obj.toString()) : obj instanceof Object ? obj.model_ && obj.model_.id ? this.outputObject_(out, obj, opt_defaultModel) : this.outputMap_(out, obj) : "number" == typeof obj ? (isFinite(obj) || (obj = null), out(obj)) : out(void 0 === obj ? null : obj)
        }, outputObject_: function (out, obj, opt_defaultModel) {
            var str = "", first = !0
            out("{"), obj.model_.id !== opt_defaultModel && (this.outputModel_(out, obj), first = !1)
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if (this.p(prop, obj) && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && !val.length)continue
                    first || out(","), out(this.keyify(prop.name), ": "), Array.isArray(val) && prop.subType ? this.outputArray_(out, val, prop.subType) : this.output(out, val), first = !1
                }
            }
            out("}")
        }, outputModel_: function (out, obj) {
            out('model_:"'), obj.model_.package && out(obj.model_.package, "."), out(obj.model_.name, '"')
        }, outputMap_: function (out, obj) {
            var str = "", first = !0
            out("{")
            for (var key in obj) {
                var val = obj[key]
                first || out(","), out(this.keyify(key), ": "), this.output(out, val), first = !1
            }
            out("}")
        }, outputArray_: function (out, a, opt_defaultModel) {
            if (0 == a.length)return out("[]"), out
            var str = "", first = !0
            out("[")
            for (var i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                first || out(","), this.output(out, obj, opt_defaultModel)
            }
            out("]")
        }, outputFunction_: function (out, obj) {
            out(obj)
        }
    },
    pretty: {
        __proto__: AbstractFormatter, output: function (out, obj, opt_defaultModel, opt_indent) {
            var indent = opt_indent || ""
            Array.isArray(obj) ? this.outputArray_(out, obj, null, indent) : "string" == typeof obj ? (out('"'), out(JSONUtil.escape(obj)), out('"')) : obj instanceof Function ? this.outputFunction_(out, obj, indent) : obj instanceof Date ? out(obj.getTime()) : obj instanceof RegExp ? out(obj.toString()) : obj instanceof Object ? obj.model_ ? this.outputObject_(out, obj, opt_defaultModel, indent) : this.outputMap_(out, obj, indent) : "number" == typeof obj ? (isFinite(obj) || (obj = null), out(obj)) : (void 0 === obj && (obj = null), out(obj))
        }, outputObject_: function (out, obj, opt_defaultModel, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "   ", str = "", first = !0
            out(indent, "{\n"), obj.model_.id && obj.model_.id !== opt_defaultModel && (this.outputModel_(out, obj, nestedIndent), first = !1)
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if (this.p(prop, obj) && "parent" !== prop.name && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && !val.length)continue
                    if (equals(val, prop.defaultValue))continue
                    first || out(",\n"), out(nestedIndent, this.keyify(prop.name), ": "), Array.isArray(val) && prop.subType ? this.outputArray_(out, val, prop.subType, nestedIndent) : this.output(out, val, null, nestedIndent), first = !1
                }
            }
            out("\n", indent, "}")
        }, outputModel_: function (out, obj, indent) {
            out(indent, '"model_": "', obj.model_.id, '"')
        }, outputMap_: function (out, obj, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "   ", str = "", first = !0
            out(indent, "{\n", nestedIndent)
            for (var key in obj) {
                var val = obj[key]
                first || out(",\n"), out(nestedIndent, this.keyify(key), ": "), this.output(out, val, null, nestedIndent), first = !1
            }
            out("\n", indent, "}")
        }, outputArray_: function (out, a, opt_defaultModel, opt_indent) {
            if (0 == a.length)return out("[]"), out
            var indent = opt_indent || "", nestedIndent = indent + "   ", str = "", first = !0
            out("[\n")
            for (var i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                first || out(",\n"), this.output(out, obj, opt_defaultModel, nestedIndent)
            }
            out("\n", indent, "]")
        }, outputFunction_: function (out, obj, indent) {
            var str = obj.toString(), lines = str.split("\n")
            if (1 == lines.length)return out(str), void 0
            for (var minIndent = 1e4, i = 0; i < lines.length; i++) {
                for (var j = 0; j < lines[i].length && " " === lines[i].charAt(j) && j < minIndent; j++);
                j > 0 && j < minIndent && (minIndent = j)
            }
            if (1e4 === minIndent)return out(str), void 0
            for (var i = 0; i < lines.length; i++)lines[i].length && " " === lines[i].charAt(0) && (lines[i] = indent + lines[i].substring(minIndent)), out(lines[i]), i < lines.length - 1 && out("\n")
        }
    },
    moreCompact: {__proto__: AbstractFormatter},
    compressed: {
        __proto__: AbstractFormatter, stringify: function (obj) {
            return Iuppiter.Base64.encode(Iuppiter.compress(JSONUtil.compact.stringify(obj), !0))
        }
    }
}
JSONUtil.prettyModel = {
    __proto__: JSONUtil.pretty, outputModel_: function (out, obj, indent) {
        out(indent, 'model_: "', obj.model_.id, '"')
    }, keys_: {}, keyify: function (str) {
        return this.keys_.hasOwnProperty(str) || (this.keys_[str] = /^[a-zA-Z\$_][0-9a-zA-Z$_]*$/.test(str) ? str : '"' + str + '"'), this.keys_[str]
    }
}, JSONUtil.stringify = JSONUtil.pretty.stringify.bind(JSONUtil.pretty), JSONUtil.stringifyObject = JSONUtil.pretty.stringifyObject.bind(JSONUtil.pretty), JSONUtil.output = JSONUtil.pretty.output.bind(JSONUtil.pretty), JSONUtil.where = JSONUtil.pretty.where.bind(JSONUtil.pretty)
var NOT_TRANSIENT = function (prop) {
    return !prop.transient
}, XMLParser = {
    __proto__: grammar,
    START: seq1(1, sym("whitespace"), sym("tag"), sym("whitespace")),
    tag: seq("<", sym("tagName"), sym("whitespace"), repeat(sym("attribute"), sym("whitespace")), sym("whitespace"), ">", repeat(alt(sym("tag"), sym("text"))), "</", sym("tagName"), ">"),
    label: str(plus(notChars(" =/\t\r\n<>'\""))),
    tagName: sym("label"),
    text: str(plus(notChar("<"))),
    attribute: seq(sym("label"), "=", sym("value")),
    value: str(alt(seq1(1, '"', repeat(notChar('"')), '"'), seq1(1, "'", repeat(notChar("'")), "'"))),
    whitespace: repeat(alt(" ", "\t", "\r", "\n"))
}
XMLParser.addActions({
    tag: function (xs) {
        if (xs[1] == xs[8]) {
            var obj = {tag: xs[1], attrs: {}, children: xs[6]}
            return xs[3].forEach(function (attr) {
                obj.attrs[attr[0]] = attr[2]
            }), obj
        }
    }
})
var XMLUtil = {
    escape: function (str) {
        return str && str.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    }, unescape: function (str) {
        return str && str.toString().replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&")
    }, escapeAttr: function (str) {
        return str && str.replace(/"/g, "&quot;")
    }, unescapeAttr: function (str) {
        return str && str.replace(/&quot;/g, '"')
    }, parse: function (str) {
        var result = XMLParser.parseString(str)
        return result ? this.parseArray(result.children) : result
    }, parseObject: function (tag) {
        var obj = {}, self = this
        if (tag.children.forEach(function (c) {
                if ("object" == typeof c && c.attrs && c.attrs.name) {
                    var result
                    if (c.attrs.type && "function" == c.attrs.type) {
                        var code = XMLUtil.unescape(c.children.join(""))
                        result = code.startsWith("function") ? eval("(" + code + ")") : new Function(code)
                    } else result = self.parseArray(c.children)
                    obj[self.unescapeAttr(c.attrs.name)] = result
                }
            }), !tag.attrs.model)return obj
        var model = this.unescapeAttr(tag.attrs.model)
        return GLOBAL[model] ? GLOBAL[model].create(obj) : obj
    }, parseArray: function (a) {
        var self = this, ret = []
        return a.forEach(function (x) {
            "object" == typeof x && ("i" == x.tag ? ret.push(XMLUtil.unescape(x.children[0])) : ret.push(self.parseObject(x)))
        }), ret.length ? ret : XMLUtil.unescape(a.join(""))
    }, compact: {
        stringify: function (obj) {
            var buf = []
            return this.output(buf.push.bind(buf), obj), "<foam>" + buf.join("") + "</foam>"
        }, output: function (out, obj) {
            Array.isArray(obj) ? this.outputArray_(out, obj) : "string" == typeof obj ? out(XMLUtil.escape(obj)) : obj instanceof Function ? this.outputFunction_(out, obj) : obj instanceof Date ? out(obj.getTime()) : obj instanceof Object ? obj.model_ ? this.outputObject_(out, obj) : this.outputMap_(out, obj) : out(obj)
        }, outputObject_: function (out, obj) {
            out('<object model="', XMLUtil.escapeAttr(obj.model_.name), '">')
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if ("parent" !== prop.name && obj.instance_ && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && 0 == val.length)continue
                    if (equals(val, prop.defaultValue))continue
                    out('<property name="', XMLUtil.escapeAttr(prop.name), '" ' + ("function" == typeof val ? 'type="function"' : "") + ">"), this.output(out, val), out("</property>")
                }
            }
            out("</object>")
        }, outputMap_: function (out, obj) {
            out("<object>")
            for (var key in obj) {
                var val = obj[key]
                out('<property name="', XMLUtil.escapeAttr(key), '">'), this.output(out, val), out("</property>")
            }
            out("</object>")
        }, outputArray_: function (out, a) {
            if (0 == a.length)return out
            for (var i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                "string" == typeof obj || "number" == typeof obj ? out("<i>", XMLUtil.escape(obj), "</i>") : this.output(out, obj)
            }
        }, outputFunction_: function (out, f) {
            out(XMLUtil.escape(f.toString()))
        }
    }, pretty: {
        stringify: function (obj) {
            var buf = []
            return this.output(buf.push.bind(buf), obj), "<foam>\n" + buf.join("") + "</foam>\n"
        }, output: function (out, obj, opt_indent) {
            var indent = opt_indent || ""
            if (Array.isArray(obj))this.outputArray_(out, obj, indent)
            else if ("string" == typeof obj)out(XMLUtil.escape(obj))
            else if (obj instanceof Function)this.outputFunction_(out, obj, indent)
            else if (obj instanceof Date)out(obj.getTime())
            else if (obj instanceof Object)try {
                obj.model_ && "string" != typeof obj.model_ ? this.outputObject_(out, obj, indent) : this.outputMap_(out, obj, indent)
            } catch (x) {
                console.log("toXMLError: ", x)
            } else out(obj)
        }, outputObject_: function (out, obj, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "  "
            out(indent, '<object model="', XMLUtil.escapeAttr(obj.model_.name), '">')
            var properties = obj.model_.getRuntimeProperties()
            for (var key in properties) {
                var prop = properties[key]
                if ("parent" !== prop.name && obj.instance_ && prop.name in obj.instance_) {
                    var val = obj[prop.name]
                    if (Array.isArray(val) && 0 == val.length)continue
                    if (val == prop.defaultValue)continue
                    var type = "function" == typeof obj[prop.name] ? ' type="function"' : ""
                    out("\n", nestedIndent, '<property name="', XMLUtil.escapeAttr(prop.name), '"', type, ">"), this.output(out, val, nestedIndent), out("</property>")
                }
            }
            out("\n", indent, "</object>"), out("\n")
        }, outputMap_: function (out, obj, opt_indent) {
            var indent = opt_indent || "", nestedIndent = indent + "  "
            out(indent, "<object>")
            for (var key in obj) {
                var val = obj[key]
                out("\n", nestedIndent, '<property name="', XMLUtil.escapeAttr(key), '">'), this.output(out, val, nestedIndent), out("</property>")
            }
            out("\n", indent, "</object>\n")
        }, outputArray_: function (out, a, opt_indent) {
            if (0 == a.length)return out
            for (var indent = opt_indent || "", nestedIndent = indent + "  ", i = 0; i < a.length; i++, first = !1) {
                var obj = a[i]
                out("\n"), "string" == typeof obj || "number" == typeof obj ? out(nestedIndent, "<i>", XMLUtil.escape(obj), "</i>") : this.output(out, obj, nestedIndent)
            }
            out("\n", indent)
        }, outputFunction_: function (out, f, opt_indent) {
            out(XMLUtil.escape(f.toString()) + "\n" + (opt_indent || ""))
        }
    }
}
XMLUtil.stringify = XMLUtil.pretty.stringify.bind(XMLUtil.pretty), XMLUtil.output = XMLUtil.pretty.output.bind(XMLUtil.pretty), GLOBAL.lookupCache_ = {}
var X = {
    lookupCache_: GLOBAL.lookupCache_,
    sub: sub,
    subWindow: subWindow,
    set: set,
    lookup: lookup,
    setValue: setValue,
    GLOBAL: GLOBAL
}, foam = X.foam = {}, registerFactory = function (model, factory) {
}, registerModelForModel = function (modelType, targetModel, model) {
}, registerFactoryForModel = function (factory, targetModel, model) {
}, JSONParser = SkipGrammar.create({
    __proto__: grammar, START: copyInput(sym("objAsString")),
    objAsString: copyInput(sym("obj")), obj: seq1(1, "{", repeat(sym("pair"), ","), "}"),
    pair: seq(sym("key"), ":", sym("value")), key: alt(sym("symbol"), sym("string")),
    symbol: noskip(str(seq(sym("char"), str(repeat(sym("alpha")))))),
    char: alt(range("a", "z"), range("A", "Z"), "_", "$"),
    alpha: alt(range("a", "z"), range("A", "Z"), "_", "$", range("0", "9")),
    value: simpleAlt(sym("null"), sym("undefined"), sym("function literal"), sym("expr"), sym("number"), sym("string"), sym("obj"), sym("bool"), sym("array")),
    null: literal("null"), undefined: literal("undefined"),
    expr: str(seq(sym("symbol"), optional(str(alt(seq(".", sym("expr")), seq("(", str(repeat(sym("value"), ",")), ")")))))),
    number: noskip(seq(optional("-"), repeat(range("0", "9"), null, 1), optional(seq(".", repeat(range("0", "9")))))),
    string: noskip(alt(sym("single quoted string"), sym("double quoted string"))),
    "double quoted string": seq1(1, '"', str(repeat(sym("double quoted char"))), '"'),
    "double quoted char": alt(sym("escape char"), literal('\\"', '"'), notChar('"')),
    "single quoted string": seq1(1, "'", str(repeat(sym("single quoted char"))), "'"),
    "single quoted char": alt(sym("escape char"), literal("\\'", "'"), notChar("'")),
    "escape char": alt(literal("\\\\", "\\"), literal("\\n", "\n")),
    bool: alt(literal("true", !0), literal("false", !1)), array: seq1(1, "[", repeat(sym("value"), ","), "]"),
    "function prototype": seq("function", optional(sym("symbol")), "(", repeat(sym("symbol"), ","), ")"),
    "function literal": seq(sym("function prototype"), "{", repeat(notChar("}")), "}")
}.addActions({
    obj: function (v) {
        for (var m = {}, i = 0; i < v.length; i++)m[v[i][0]] = v[i][2]
        return m
    }, null: function () {
        return null
    }, undefined: function () {
    }, number: function (v) {
        var str = ""
        return v[0] && (str += v[0]), str += v[1].join(""), v[2] && (str += v[2][0] + v[2][1].join("")), v[2] ? parseFloat(str) : parseInt(str)
    }
}), repeat0(alt(" ", "\t", "\n", "\r")))
MODEL({
    name: "TemplateParser",
    extends: "grammar",
    methods: {
        START: sym("markup"),
        markup: repeat0(alt(sym("comment"), sym("foamTag"), sym("create child"), sym("simple value"), sym("live value tag"), sym("raw values tag"), sym("values tag"), sym("code tag"), sym("ignored newline"), sym("newline"), sym("single quote"), sym("text"))),
        comment: seq1(1, "<!--", repeat0(not("-->", anyChar)), "-->"),
        foamTag: sym("foamTag_"),
        foamTag_: function () {
        },
        "create child": seq("$$", repeat(notChars(" $\r\n<{,.")), optional(JSONParser.export("objAsString"))),
        "simple value": seq("%%", repeat(notChars(' ()-"\r\n><:;,')), optional("()")),
        "live value tag": seq("<%#", repeat(not("%>", anyChar)), "%>"),
        "raw values tag": alt(seq("<%=", repeat(not("%>", anyChar)), "%>"), seq("{{{", repeat(not("}}}", anyChar)), "}}}")),
        "values tag": seq("{{", repeat(not("}}", anyChar)), "}}"),
        "code tag": seq("<%", repeat(not("%>", anyChar)), "%>"),
        "ignored newline": alt(literal("\\\r\\\n"), literal("\\\n")),
        newline: alt(literal("\r\n"), literal("\n")),
        "single quote": literal("'"),
        text: anyChar
    }
})
var TemplateOutput = {
    create: function (obj) {
        console.assert(obj, "Owner required when creating TemplateOutput.")
        var buf = [], f = function templateOut() {
            for (var i = 0; i < arguments.length; i++) {
                var o = arguments[i]
                if ("string" == typeof o)buf.push(o)
                else if (o && "Element" === o.name_) {
                    var s = o.createOutputStream()
                    o.output(s), buf.push(s.toString()), obj.addChild({initHTML: o.load.bind(o)})
                } else o && o.toView_ && (o = o.toView_()), null !== o && void 0 !== o && (o.appendHTML ? o.appendHTML(this) : o.toHTML ? buf.push(o.toHTML()) : buf.push(o), o.initHTML && obj && obj.addChild && obj.addChild(o))
            }
        }
        return f.toString = function () {
            return 0 === buf.length ? "" : (buf.length > 1 && (buf = [buf.join("")]), buf[0])
        }, f
    }
}, ConstantTemplate = function (str) {
    var TemplateOutputCreate = TemplateOutput.create.bind(TemplateOutput), f = function (opt_out) {
        var out = opt_out ? opt_out : TemplateOutputCreate(this)
        return out(str), out.toString()
    }
    return f.toString = function () {
        return 'ConstantTemplate("' + str.replace(/\n/g, "\\n").replace(/"/g, '\\"').replace(/\r/g, "") + '")'
    }, f
}, TemplateCompiler = {
    __proto__: TemplateParser, out: [], simple: !0, push: function () {
        this.simple = !1, this.pushSimple.apply(this, arguments)
    }, pushSimple: function () {
        this.out.push.apply(this.out, arguments)
    }
}.addActions({
    markup: function (v) {
        var wasSimple = this.simple, ret = wasSimple ? null : this.out.join("")
        return this.out = [], this.simple = !0, [wasSimple, ret]
    }, "create child": function (v) {
        var name = v[1].join("")
        this.push("', self.createTemplateView('", name, "'", v[2] ? ", " + v[2] : "", "),\n'")
    }, foamTag: function (e) {
        var fName = e.getAttribute("f")
        fName ? (this.push("', self.createTemplateView('", fName, "',{}).fromElement(FOAM("), this.push(JSONUtil.where(NOT_TRANSIENT).stringify(e)), this.push("))")) : (this.push("', (function() { var tagView = X.foam.ui.FoamTagView.create({element: FOAM("), this.push(JSONUtil.where(NOT_TRANSIENT).stringify(e)), this.push(")}, Y); self.addDataChild(tagView); return tagView; })() ")), this.push(",\n'")
    }, "simple value": function (v) {
        this.push("',\n self.", v[1].join(""), v[2], ",\n'")
    }, "raw values tag": function (v) {
        this.push("',\n", v[1].join(""), ",\n'")
    }, "values tag": function (v) {
        this.push("',\nescapeHTML(", v[1].join(""), "),\n'")
    }, "live value tag": function (v) {
        this.push("',\nself.dynamicTag('span', function() { return ", v[1].join(""), "; }.bind(this)),\n'")
    }, "code tag": function (v) {
        this.push("');\n", v[1].join(""), ";out('")
    }, "single quote": function () {
        this.pushSimple("\\'")
    }, newline: function () {
        this.pushSimple("\\n")
    }, text: function (v) {
        this.pushSimple(v)
    }
})
MODEL({
    name: "TemplateUtil",
    constants: {
        HEADER: "var self = this, X = this.X, Y = this.Y;var out = opt_out ? opt_out : TOC(this);out('",
        FOOTERS: {
            html: "');return out.toString();",
            css: "');return X.foam.grammars.CSSDecl.create({model:this.model_}).parser.parseString(out.toString());"
        }
    },
    methods: {
        lazyCompile: function (t) {
            var delegate, f = function () {
                if (!delegate) {
                    if (!t.template)throw"Must arequire() template model before use for " + this.name_ + "." + t.name
                    delegate = TemplateUtil.compile(Template.isInstance(t) ? t : Template.create(t), this.model_)
                }
                return delegate.apply(this, arguments)
            }
            return f.toString = function () {
                return delegate ? delegate.toString() : t.toString()
            }, f
        }, compile_: function (t, code, model) {
            for (var args = ["opt_out"], i = 0; i < t.args.length; i++)args.push(t.args[i].name)
            return eval("(function() { var escapeHTML = XMLUtil.escape, TOC = TemplateOutput.create.bind(TemplateOutput); return function(" + args.join(",") + "){" + code + "};})()" + (model && model.id ? "\n\n//# sourceURL=" + model.id.replace(/\./g, "/") + "." + t.name + "\n" : ""))
        }, parseCSS: function (t, model) {
            var parser = this.CSSParser_ || (this.CSSParser_ = X.foam.grammars.CSSDecl.create())
            return parser.model = model, parser.parser.parseString(t).toString()
        }, parseU2: function (template, t, model) {
            X.foam.u2.ElementParser.getPrototype()
            var parser = this.U2Parser_ || (this.U2Parser_ = X.foam.u2.ElementParser.parser__.create())
            parser.modelName_ = cssClassize(model.id)
            var out = parser.parseString(t.trim(), "initE" === template.name ? parser.initTemplate : parser.template)
            return out.toString()
        }, compile: function (t, model) {
            if ("CSS" !== t.name) {
                if (model.isSubModel(X.lookup("foam.u2.Element")))return eval("(function() { return " + this.parseU2(t, t.template, model) + "; })()")
                if (t.template.startsWith("#U2")) {
                    var code = "(function() { return " + this.parseU2(t, t.template.substring(3), model) + "; })()"
                    return eval(code)
                }
            }
            var parseResult = TemplateCompiler.parseString(t.template)
            if (parseResult[0])return ConstantTemplate("css" === t.language ? this.parseCSS(t.template, model) : t.template)
            var code = this.HEADER + parseResult[1] + this.FOOTERS[t.language]
            try {
                return this.compile_(t, code, model)
            } catch (err) {
                return console.log("Template Error: ", err), console.log(parseResult), function () {
                }
            }
        }, stringifyTemplate: function (template) {
            return function () {
                var buf = []
                return this.output(buf.push.bind(buf), obj), buf.join("")
            }
        }, expandTemplate: function (self, t, opt_X) {
            var X = opt_X || self.X
            if ("function" == typeof t)t = X.Template.create({
                name: t.name,
                args: t.toString().match(/\((.*?)\)/)[1].split(",").slice(1).map(function (a) {
                    return X.Arg.create({name: a.trim()})
                }),
                template: multiline(t)
            })
            else if ("string" == typeof t)t = docTemplate = X.Template.create({name: "body", template: t})
            else if (t.template || t.code)"function" == typeof t.template && (t.template = multiline(t.template))
            else {
                t = X.Template.create(t)
                var future = afuture(), path = self.sourcePath
                if (t.futureTemplate = future.get, path = path.substring(0, path.lastIndexOf("/") + 1), path += t.path ? t.path : self.name + "_" + t.name + ".ft", "undefined" != typeof vm && vm.runInThisContext) {
                    var fs = require("fs")
                    fs.readFile(path, function (err, data) {
                        t.template = data.toString(), future.set(Template.create(t))
                    })
                } else {
                    var xhr = new XMLHttpRequest
                    xhr.open("GET", path), xhr.asend(function (data) {
                        t.template = data, future.set(Template.create(t))
                    })
                }
            }
            return t.futureTemplate || (t.futureTemplate = aconstant(t)), t.template$ || (t = "undefined" != typeof X.Template ? JSONUtil.mapToObj(X, t, X.Template) : t), t
        }, expandModelTemplates: function (self) {
            for (var templates = self.templates, i = 0; i < templates.length; i++)templates[i] = TemplateUtil.expandTemplate(self, templates[i])
        }
    }
})
var aeval = function (src) {
    return aconstant(eval("(" + src + ")"))
}, aevalTemplate = function (t, model) {
    return aseq(t.futureTemplate, function (ret, t) {
        ret(TemplateUtil.lazyCompile(t))
    })
}, escapeHTML = XMLUtil.escape, TOC = TemplateOutput.create.bind(TemplateOutput), $documents = []
window && $documents.push(window.document)
var $WID__ = 0, $ = function (id) {
    console.log("Deprecated use of GLOBAL.$.")
    for (var i = 0; i < $documents.length; i++) {
        if (document.FOAM_OBJECTS && document.FOAM_OBJECTS[id])return document.FOAM_OBJECTS[id]
        var ret = $documents[i].getElementById(id)
        if (ret)return ret
    }
}, $$ = function (cls) {
    console.log("Deprecated use of GLOBAL.$$.")
    for (var i = 0; i < $documents.length; i++) {
        var ret = $documents[i].getElementsByClassName(cls)
        if (ret.length > 0)return ret
    }
    return []
}, FOAM = function (map, opt_X, seq) {
    var obj = JSONUtil.mapToObj(opt_X || X, map, void 0, seq)
    return obj
}
FOAM.putFactory = function (ctx, name, factory) {
    ctx.__defineGetter__(name, function () {
        return console.log("Bouncing Factory: ", name), delete ctx[name], ctx[name] = factory()
    })
}
var USED_MODELS = {}, UNUSED_MODELS = {}, NONMODEL_INSTANCES = {}
FOAM.browse = function (model, opt_dao, opt_X) {
    var Y = opt_X || X.sub(void 0, "FOAM BROWSER")
    "string" == typeof model && (model = Y[model])
    var dao = opt_dao || Y[model.name + "DAO"] || Y[model.plural]
    dao || (Y[model.name + "DAO"] = [].dao)
    var ctrl = Y.foam.ui.DAOController.create({model: model, dao: dao, useSearchView: !1})
    if (Y.stack)Y.stack.pushView(ctrl)
    else {
        var w = opt_X ? opt_X.window : window
        Y.stack = Y.foam.ui.StackView.create()
        var win = Y.foam.ui.layout.Window.create({window: w, data: Y.stack}, Y)
        document.body.insertAdjacentHTML("beforeend", win.toHTML()), win.initHTML(), Y.stack.setTopView(ctrl)
    }
}
var arequire = function (modelName) {
    var THIS = this === GLOBAL ? X : this, model = THIS.lookup(modelName)
    if (!model) {
        if (!THIS.ModelDAO)return aconstant()
        if (THIS.arequire$ModelLoadsInProgress) {
            if (THIS.arequire$ModelLoadsInProgress[modelName])return THIS.arequire$ModelLoadsInProgress[modelName]
        } else THIS.set("arequire$ModelLoadsInProgress", {})
        var future = afuture()
        return THIS.arequire$ModelLoadsInProgress[modelName] = future.get, THIS.ModelDAO.find(modelName, {
            put: function (m) {
                m.X = THIS
                var next_ = function (m) {
                    THIS.arequire$ModelLoadsInProgress[modelName] = !1, THIS.GLOBAL.X.registerModel(m), THIS.lookupCache_[m.id] || (THIS.lookupCache_[m.id] = m), future.set(m)
                }
                m.arequire ? m.arequire()(next_) : next_(m)
            }, error: function () {
                var args = argsToArray(arguments)
                "DocumentationProperty" !== modelName && console.warn.apply(console, ["Could not load model: ", modelName].concat(args)), THIS.arequire$ModelLoadsInProgress[modelName] = !1, future.set(void 0)
            }
        }), future.get
    }
    return model.arequire ? model.arequire() : aconstant(model)
}, FOAM_POWERED = '<a style="text-decoration:none;" href="https://github.com/foam-framework/foam/" target="_blank"><font size=+1 face="catull" style="text-shadow:rgba(64,64,64,0.3) 3px 3px 4px;"><font color="#3333FF">F</font><font color="#FF0000">O</font><font color="#FFCC00">A</font><font color="#33CC00">M</font><font color="#555555" > POWERED</font></font></a>', CLASS = function (m) {
    function registerModelLatch(path, m) {
        var id = m.package ? m.package + "." + m.name : m.name
        if (EAGER[id]) {
            USED_MODELS[id] = !0
            var work = [], model = JSONUtil.mapToObj(X, m, Model, work)
            return work.length > 0 && (model.extra__ = aseq.apply(null, work)), X.registerModel(model, void 0, !0), model
        }
        GLOBAL.lookupCache_[id] = void 0, UNUSED_MODELS[id] = !0
        var triggered = !1
        Object.defineProperty(m.package ? path : GLOBAL, m.name, {
            get: function triggerModelLatch() {
                if (triggered)return null
                triggered = !0, USED_MODELS[id] = !0, UNUSED_MODELS[id] = void 0
                var work = [], model = JSONUtil.mapToObj(X, m, Model, work)
                return work.length > 0 && (model.extra__ = aseq.apply(null, work)), X.registerModel(model), model
            }, configurable: !0
        })
    }

    var EAGER = {
        Method: !0,
        BooleanProperty: !0,
        Action: !0,
        FunctionProperty: !0,
        Constant: !0,
        Message: !0,
        ArrayProperty: !0,
        StringArrayProperty: !0,
        Template: !0,
        Arg: !0,
        Relationship: !0,
        ViewFactoryProperty: !0,
        FactoryProperty: !0,
        "foam.ui.Window": !0,
        StringProperty: !0,
        "foam.html.Element": !0,
        Expr: !0,
        AbstractDAO: !0
    }
    document && document.currentScript && (m.sourcePath = document.currentScript.src), registerModelLatch(packagePath(X, m.package), m)
}, MODEL = CLASS
X.$ = $, X.$$ = $$, X.registerModel = registerModel, X.arequire = arequire, X.onRegisterModel = onRegisterModel
var FObject = {
    __proto__: PropertyChangeSupport, name_: "FObject", get Y() {
        return Object.prototype.hasOwnProperty.call(this, "Y_") ? this.Y_ : this.Y_ = DEBUG ? this.X.sub({}, (this.X.NAME ? this.X.NAME : "") + "_" + this.name_) : this.X.sub()
    }, replaceModel_: function (feature, dataModel, X) {
        replacementName = (dataModel.package ? dataModel.package + "." : "") + (dataModel.name ? dataModel.name : dataModel) + feature.name
        var replacementModel = X.lookup(replacementName)
        if (replacementModel)return replacementModel
    }, create_: function () {
        return Object.create(this)
    }, create: function (args, opt_X) {
        var dataModel = args ? args.model ? args.model : args.data ? args.data.model_ : void 0 : void 0
        if (dataModel && (opt_X || X).Model.isInstance(dataModel)) {
            var ret = this.replaceModel_(this.model_, dataModel, opt_X || X)
            if (ret)return ret.create(args, opt_X)
        }
        var o = this.create_(this)
        for (o.instance_ = {}; !o.instance_;)o.instance_ = {}
        if (o.X = opt_X || X, this.model_.instance_.imports_ && this.model_.instance_.imports_.length) {
            Object.prototype.hasOwnProperty.call(this, "imports__") || (this.imports__ = this.model_.instance_.imports_.map(function (e) {
                var s = e.split(" as ")
                return [s[0], s[1] || s[0]]
            }))
            for (var i = 0; i < this.imports__.length; i++) {
                var im = this.imports__[i]
                args && args.hasOwnProperty(im[1]) || "undefined" == typeof o.X[im[0]] || (o[im[1]] = o.X[im[0]])
            }
        }
        if (o.model_)for (var agents = this.initAgents(), i = 0; i < agents.length; i++)agents[i][1](o, o.X, args)
        return o.init(args), o
    }, init: nop, xbind: function (map) {
        var newModel = {
            __proto__: this, create: function (args, X) {
                var createArgs = {}, key
                args = args ? args.instance_ || args : {}
                for (key in args)args.hasOwnProperty(key) && (createArgs[key] = args[key])
                for (key in map)createArgs.hasOwnProperty(key) || (createArgs[key] = map[key])
                return this.__proto__.create(createArgs, X)
            }, xbind: function (m2) {
                for (var key in map)m2.hasOwnProperty(key) || (m2[key] = map[key])
                return this.__proto__.xbind(m2)
            }
        }
        return this.required__ && (newModel.required__ = aseq(this.required__, aconstant(newModel))), newModel
    }, X: X, addInitAgent: function (priority, desc, agent) {
        agent.toString = function () {
            return desc
        }, this.initAgents_.push([priority, agent])
    }, initAgents: function () {
        if (this.model_) {
            if (!Object.hasOwnProperty.call(this, "initAgents_")) {
                var agents = this.initAgents_ = [], self = this
                Object_forEach(this.model_.instance_.exports_, function (e) {
                    var exp = e.split("as ")
                    if (0 != exp.length) {
                        var key = exp[0].trim(), alias = exp[1] || exp[0]
                        if (key) {
                            var asValue = "$" !== key && "$$" != key && "$" == key.charAt(key.length - 1)
                            asValue && console.warn("Deprecated use of value$ export. Just remove the $. ", self.model_.id, this.name, key, alias), asValue && (key = key.slice(0, key.length - 1))
                            var prop = self.model_.getProperty(key)
                            prop ? asValue ? self.addInitAgent(1, "export property value " + key, function (o, X) {
                                o.Y.set(alias, o[prop.name$_])
                            }) : self.addInitAgent(1, "export property " + key, function (o, X) {
                                o.Y.setValue(alias, o[prop.name$_])
                            }) : self.addInitAgent(0, "export other " + key, function (o, X) {
                                var out = "function" == typeof o[key] ? o[key].bind(o) : o[key]
                                o.Y.set(alias, out)
                            })
                        } else self.addInitAgent(0, "export this", function (o, X) {
                            o.Y.set(alias, o)
                        })
                    }
                })
                var fastInit = {Property: !0, Method: !0}[this.name_]
                if (fastInit) {
                    for (var keys = {}, ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
                        var prop = ps[i]
                        keys[prop.name] = keys[prop.name$_] = !0
                    }
                    this.addInitAgent(0, "fast copy args", function fastCopyArgs(o, X, m) {
                        if (m)if (m.instance_) {
                            m = m.instance_
                            for (var key in m)o[key] = m[key]
                        } else for (var key in m)keys[key] && (o[key] = m[key])
                    })
                }
                for (var ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
                    var prop = ps[i]
                    prop.initPropertyAgents ? prop.initPropertyAgents(self, fastInit) : !function (name) {
                        self.addInitAgent(0, "set proto-property " + name, function setProtoProperty(o, X, m) {
                            m && m.hasOwnProperty(name) && (o[name] = m[name])
                        })
                    }(prop.name)
                }
                self.addInitAgent(0, "Add create() to Model", function (o, X) {
                    Model.isInstance(o) && "Model" != o.name && (o.create = BootstrapModel.create)
                })
                for (var i = 0; i < agents.length; i++)agents[i][2] = i
                agents.sort(CompoundComparator(function (o1, o2) {
                    return o1[0] - o2[0]
                }, function (o1, o2) {
                    return o1[2] - o2[2]
                }))
            }
            return this.initAgents_
        }
    }, fromElement: function (e) {
        var RESERVED_ATTRS = {id: !0, model: !0, view: !0, showactions: !0, oninit: !0}, elements = this.elementMap_
        if (!elements) {
            elements = {}
            for (var properties = this.model_.getRuntimeProperties(), i = 0; i < properties.length; i++) {
                var p = properties[i]
                RESERVED_ATTRS[p.name] || (elements[p.name] = p, elements[p.name.toUpperCase()] = p), elements["p:" + p.name] = p, elements["P:" + p.name.toUpperCase()] = p
            }
            this.elementMap_ = elements
        }
        for (var i = 0; i < e.attributes.length; i++) {
            var attr = e.attributes[i], p = elements[attr.name] || elements[attr.name.toUpperCase()], val = attr.value
            if (p)if (val.startsWith("#")) {
                val = val.substring(1)
                var $val = this.X.$(val)
                $val ? this[attr.name] = this.X.$(val) : this[p.name] = p.fromString(val)
            } else this[p.name] = p.fromString(val)
            else RESERVED_ATTRS[attr.name] || console.warn('Unknown attribute name: "' + attr.name + '"')
        }
        for (var i = 0; i < e.children.length; i++) {
            var c = e.children[i], p = elements[c.nodeName]
            p ? p.fromElement.call(this, c, p) : console.warn('Unknown element name: "' + c.nodeName + '"')
        }
        return this
    }, createFOAMGetter: function (name, getter) {
        var stack = Events.onGet.stack
        return function FOAMGetter() {
            var value = getter.call(this, name), f = stack[0]
            return f && f(this, name, value), value
        }
    }, createFOAMSetter: function (name, setter) {
        var stack = Events.onSet.stack
        return function FOAMSetter(newValue) {
            var f = stack[0]
            f && !f(this, name, newValue) || setter.call(this, newValue, name)
        }
    }, toString: function () {
        return this.model_.name + "Prototype"
    }, hasOwnProperty: function (name) {
        return "undefined" != typeof this.instance_[name]
    }, writeActions: function (other, out) {
        for (var properties = this.model_.getRuntimeProperties(), i = 0, property; property = properties[i]; i++)if (property.actionFactory)for (var actions = property.actionFactory(this, property.f(this), property.f(other)), j = 0; j < actions.length; j++)out(actions[j])
    }, validateObject: function () {
        for (var ret = null, ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
            var p = ps[i]
            if (p.validate) {
                var e = p.validate.call(this)
                e && (ret || (ret = [])).push([p, e])
            }
        }
        return ret
    }, isValid: function () {
        return !this.validateObject()
    }, equals: function (other) {
        return 0 == this.compareTo(other)
    }, compareTo: function (other) {
        if (other === this)return 0
        if (this.model_ !== other.model_)return this.model_.id.compareTo(other.model_ && other.model_.id) || 1
        for (var ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
            var r = ps[i].compare(this, other)
            if (r)return r
        }
        return 0
    }, diff: function (other) {
        for (var diff = {}, properties = this.model_.getRuntimeProperties(), i = 0, property; property = properties[i]; i++)if (Array.isArray(property.f(this))) {
            var subdiff = property.f(this).diff(property.f(other))
            0 === subdiff.added.length && 0 === subdiff.removed.length || (diff[property.name] = subdiff)
        } else 0 !== property.compare(this, other) && (diff[property.name] = property.f(other))
        return diff
    }, clearProperty: function (name) {
        delete this.instance_[name]
    }, defineProperty: function (prop) {
        var name = prop.name
        prop.name$_ = name + "$", this[constantize(prop.name)] = prop
        var obj = DEBUG ? this : __ROOT__
        obj.__lookupGetter__(prop.name$_) || Object.defineProperty(obj, prop.name$_, {
            get: function getValue() {
                return this.propertyValue(name)
            }, set: function setValue(value) {
                Events.link(value, this.propertyValue(name))
            }, configurable: !0
        })
        var pgetter, psetter
        if (prop.getter)pgetter = this.createFOAMGetter(name, prop.getter)
        else {
            if (prop.lazyFactory || prop.factory) {
                var f = prop.lazyFactory || prop.factory
                getter = function factory() {
                    if ("undefined" == typeof this.instance_[name]) {
                        this.instance_[name] = null
                        var val = f.call(this, prop)
                        "undefined" == typeof val && (val = null), this[name] = val
                    }
                    return this.instance_[name]
                }
            } else if (prop.defaultValueFn) {
                var f = prop.defaultValueFn
                getter = function defaultValueFn() {
                    return "undefined" != typeof this.instance_[name] ? this.instance_[name] : f.call(this, prop)
                }
            } else {
                var defaultValue = prop.defaultValue
                getter = function getInstanceVar() {
                    return "undefined" != typeof this.instance_[name] ? this.instance_[name] : defaultValue
                }
            }
            pgetter = this.createFOAMGetter(name, getter)
        }
        if (prop.setter)psetter = this.createFOAMSetter(name, prop.setter)
        else {
            var setter = function setInstanceValue(oldValue, newValue) {
                this.instance_[name] = newValue
            }
            "int" !== prop.type && "float" !== prop.type || (setter = function (setter) {
                return function numberSetter(oldValue, newValue) {
                    setter.call(this, oldValue, "number" != typeof newValue ? Number(newValue) : newValue)
                }
            }(setter)), prop.onDAOUpdate && (setter = "string" == typeof prop.onDAOUpdate ? function (setter, onDAOUpdate, listenerName) {
                return function onDAOUpdateSetter(oldValue, newValue) {
                    setter.call(this, oldValue, newValue)
                    var listener = this[listenerName] || (this[listenerName] = this[onDAOUpdate].bind(this))
                    oldValue && oldValue.unlisten(listener), newValue && (newValue.listen(listener), listener())
                }
            }(setter, prop.onDAOUpdate, prop.name + "_onDAOUpdate") : function (setter, onDAOUpdate, listenerName) {
                return function onDAOUpdateSetter2(oldValue, newValue) {
                    setter.call(this, oldValue, newValue)
                    var listener = this[listenerName] || (this[listenerName] = onDAOUpdate.bind(this))
                    oldValue && oldValue.unlisten(listener), newValue && (newValue.listen(listener), listener())
                }
            }(setter, prop.onDAOUpdate, prop.name + "_onDAOUpdate")), prop.postSet && (setter = function (setter, postSet) {
                return function postSetSetter(oldValue, newValue) {
                    setter.call(this, oldValue, newValue), postSet.call(this, oldValue, newValue, prop)
                }
            }(setter, prop.postSet))
            var propertyTopic = PropertyChangeSupport.propertyTopic(name)
            setter = function (setter) {
                return function propertyChangeSetter(oldValue, newValue) {
                    setter.call(this, oldValue, newValue), this.propertyChange_(propertyTopic, oldValue, newValue)
                }
            }(setter), prop.preSet && (setter = function (setter, preSet) {
                return function preSetSetter(oldValue, newValue) {
                    setter.call(this, oldValue, preSet.call(this, oldValue, newValue, prop))
                }
            }(setter, prop.preSet)), prop.adapt && (setter = function (setter, adapt) {
                return function adaptSetter(oldValue, newValue) {
                    setter.call(this, oldValue, adapt.call(this, oldValue, newValue, prop))
                }
            }(setter, prop.adapt)), prop.regex && (setter = function (setter, name, regex) {
                return function regexValidator(oldValue, newValue) {
                    if (!newValue || "string" != typeof newValue || !newValue.match(regex))throw'Invalid Property value for "' + name + '", "' + newValue + '" violates regex: ' + regex
                    setter.call(this, oldValue, newValue)
                }
            }(setter, prop.name, prop.regex)), setter = function (setter, defaultValue) {
                return function setInstanceVar(newValue) {
                    setter.call(this, "undefined" == typeof this.instance_[name] ? defaultValue : this.instance_[name], newValue)
                }
            }(setter, prop.defaultValue), psetter = this.createFOAMSetter(name, setter)
        }
        Object.defineProperty(this, name, {
            get: pgetter,
            set: psetter,
            configurable: !0
        }), prop.install && prop.install.call(this, prop)
    }, addMethod: function (name, method) {
        this.__proto__[name] ? override(this, name, method) : this[name] = method
    }, hashCode: function () {
        for (var hash = 17, properties = this.model_.getRuntimeProperties(), i = 0; i < properties.length; i++) {
            var prop = this[properties[i].name], code = prop ? prop.hashCode ? prop.hashCode() : prop.toString().hashCode() : 0
            hash = (hash << 5) - hash + code, hash &= hash
        }
        return hash
    }, toProtobuf: function () {
        var out = ProtoWriter.create()
        return this.outProtobuf(out), out.value
    }, outProtobuf: function (out) {
        for (var proprties = this.model_getRuntimeProperties(), i = 0; i < properties.length; i++) {
            var prop = properties[i]
            Number.isFinite(prop.prototag) && prop.outProtobuf(this, out)
        }
    }, clone: function () {
        var m = {}
        for (var key in this.instance_) {
            var value = this[key]
            if (void 0 !== value) {
                var prop = this.model_.getProperty(key)
                prop && prop.cloneProperty ? prop.cloneProperty.call(prop, value, m) : prop.model_ || (m[key] = value)
            }
        }
        return this.model_.create(m, this.X)
    }, deepClone: function () {
        var m = {}
        for (var key in this.instance_) {
            var value = this[key]
            if (void 0 !== value) {
                var prop = this.model_.getProperty(key)
                prop && prop.deepCloneProperty && prop.deepCloneProperty.call(prop, value, m)
            }
        }
        return this.model_.create(m, this.X)
    }, copyFrom: function (src) {
        if (src && this.model_)for (var ps = this.model_.getRuntimeProperties(), i = 0; i < ps.length; i++) {
            var prop = ps[i]
            src.hasOwnProperty(prop.name) && (this[prop.name] = src[prop.name]), src.hasOwnProperty(prop.name$_) && (this[prop.name$_] = src[prop.name$_])
        }
        return this
    }, output: function (out) {
        return JSONUtil.output(out, this)
    }, toJSON: function () {
        return JSONUtil.stringify(this)
    }, toXML: function () {
        return XMLUtil.stringify(this)
    }, write: function (opt_X, opt_view) {
        (opt_X || this.X).writeView(this.defaultView(opt_view))
    }, defaultView: function (opt_view) {
        return (opt_view || X.foam.ui.DetailView).create({model: this.model_, data: this, showActions: !0})
    }, decorate: function (name, func, that) {
        var delegate = this[name]
        return this[name] = function () {
            return func.call(this, that, delegate.bind(this), arguments)
        }, this
    }, addDecorator: function (decorator) {
        decorator.decorateObject && decorator.decorateObject(this)
        for (var i = 0; i < decorator.model_.methods.length; i++) {
            var method = decorator.model_.methods[i]
            "decorateObject" !== method.name && this.decorate(method.name, method.code, decorator)
        }
        return this
    }
}
this.Constant = null, this.Method = null, this.Action = null, this.Relationship = null
var CCC = 0, BootstrapModel = {
    __proto__: PropertyChangeSupport,
    name_: "BootstrapModel <startup only, error if you see this>",
    addTraitToModel_: function (traitModel, parentModel) {
        var parentName = parentModel && parentModel.id ? parentModel.id.replace(/\./g, "__") : "", traitName = traitModel.id ? traitModel.id.replace(/\./g, "__") : "", name = parentName + "_ExtendedWith_" + traitName
        if (!lookup(name)) {
            var models = traitModel.models
            traitModel = traitModel.clone(), traitModel.package = "", traitModel.name = name, traitModel.extends = parentModel && parentModel.id, traitModel.models = models, traitModel.X.registerModel(traitModel)
        }
        var ret = traitModel.X.lookup(name)
        return console.assert(ret, "Error adding Trait to Model, unknown name: ", name), ret
    },
    createMethod_: function (X, name, fn) {
        var method = Method.create({name: name, code: fn})
        if (FEATURE_ENABLED(["debug"]) && Arg) {
            var str = fn.toString(), match = str.match(/^function[ _$\w]*\(([ ,\w]+)/)
            match && (method.args = match[1].split(",").map(function (name) {
                return Arg.create({name: name.trim()})
            }))
        }
        return method
    },
    buildProtoImports_: function (props) {
        Object_forEach(this.instance_.imports_, function (i) {
            var imp = i.split(" as "), key = imp[0], alias = imp[1] || imp[0]
            if (alias.length && "$" == alias.charAt(alias.length - 1) && (alias = alias.slice(0, alias.length - 1)), !this.getProperty(alias)) {
                var prop = ImportedProperty.create({name: alias})
                props.push(prop)
            }
        }.bind(this))
    },
    buildProtoProperties_: function (cls, extendsModel, props) {
        for (var i = 0; i < props.length; i++) {
            var p = props[i]
            if (extendsModel) {
                var superProp = extendsModel.getProperty(p.name)
                if (superProp) {
                    var p0 = p
                    p = superProp.clone().copyFrom(p), p0.adapt && superProp.adapt && (p.adapt = function (a1, a2) {
                        return function (oldValue, newValue, prop) {
                            return a2.call(this, oldValue, a1.call(this, oldValue, newValue, prop), prop)
                        }
                    }(p0.adapt, superProp.adapt)), p0.preSet && superProp.preSet && (p.preSet = function (a1, a2) {
                        return function (oldValue, newValue, prop) {
                            return a2.call(this, oldValue, a1.call(this, oldValue, newValue, prop), prop)
                        }
                    }(p0.preSet, superProp.preSet)), p0.postSet && superProp.postSet && (p.postSet = function (a1, a2) {
                        return function (oldValue, newValue, prop) {
                            a2.call(this, oldValue, newValue, prop), a1.call(this, oldValue, newValue, prop)
                        }
                    }(p0.postSet, superProp.postSet)), props[i] = p, this[constantize(p.name)] = p
                }
            }
            cls.defineProperty(p)
        }
        this.propertyMap_ = null
    },
    buildProtoMethods_: function (cls) {
        if (Array.isArray(this.methods))for (var i = 0; i < this.methods.length; i++) {
            var m = this.methods[i]
            "function" == typeof m ? cls.addMethod(m.name, m) : cls.addMethod(m.name, m.code)
        } else for (key in this.methods) {
            var m = this.methods[key]
            Method && Method.isInstance(m) ? cls.addMethod(m.name, m.generateFunction()) : cls.addMethod(key, m)
        }
    },
    buildPrototype: function () {
        if (_DOC_ && BootstrapModel.saveDefinition(this), this.extends && !this.X.lookup(this.extends))throw new Error("Unknown Model in extends: " + this.extends)
        var extendsModel = this.extends && this.X.lookup(this.extends)
        if (this.traits)for (var i = 0; i < this.traits.length; i++) {
            var trait = this.traits[i], traitModel = this.X.lookup(trait)
            console.assert(traitModel, "Unknown trait: " + trait), traitModel ? extendsModel = this.addTraitToModel_(traitModel, extendsModel) : console.warn("Missing trait: ", trait, ", in Model: ", this.name)
        }
        var proto = extendsModel ? extendsModel.getPrototype() : FObject, cls = Object.create(proto)
        cls.model_ = this, cls.name_ = this.name, this.models && Object_forEach(this.models, function (m) {
            if (this[m.name]) {
                var model = this[m.name]
                defineLocalProperty(cls, m.name, function () {
                    var Y = this.Y
                    return {
                        __proto__: model, create: function (args, opt_X) {
                            return model.create(args, opt_X || Y)
                        }
                    }
                })
            }
        }.bind(this)), Object_forEach(this.requires, function (i) {
            var imp = i.split(" as "), m = imp[0], path = m.split("."), key = imp[1] || path[path.length - 1]
            defineLocalProperty(cls, key, function () {
                var Y = this.Y, model = this.X.lookup(m)
                return console.assert(model, "Unknown Model: " + m + " in " + this.name_), {
                    __proto__: model,
                    create: function (args, X) {
                        return model.create(args, X || Y)
                    }
                }
            })
        })
        var props = this.instance_.properties_ = this.properties ? this.properties.clone() : []
        if (this.instance_.imports_ = this.imports, extendsModel && (this.instance_.imports_ = this.instance_.imports_.concat(extendsModel.instance_.imports_)), this.buildProtoImports_(props), this.buildProtoProperties_(cls, extendsModel, props), extendsModel) {
            for (var i = 0; i < extendsModel.instance_.properties_.length; i++) {
                var p = extendsModel.instance_.properties_[i], name = constantize(p.name)
                this[name] || (this[name] = p)
            }
            for (i = 0; i < extendsModel.relationships.length; i++) {
                var r = extendsModel.relationships[i], name = constantize(r.name)
                this[name] || (this[name] = r)
            }
        }
        if (this.instance_.exports_ = this.exports ? this.exports.clone() : [], extendsModel && (this.instance_.exports_ = this.instance_.exports_.concat(extendsModel.instance_.exports_)), this.templates && Object_forEach(this.templates, function (t) {
                cls.addMethod(t.name, t.code ? t.code : TemplateUtil.lazyCompile(t))
            }), this.instance_.actions_ = this.actions ? this.actions.clone() : [], this.actions)for (var i = 0; i < this.actions.length; i++)(function (a) {
            if (extendsModel) {
                var superAction = extendsModel.getAction(a.name)
                superAction && (a = superAction.clone().copyFrom(a))
            }
            this.instance_.actions_[i] = a, Object.prototype.hasOwnProperty.call(cls, constantize(a.name)) || (cls[constantize(a.name)] = a), this[constantize(a.name)] = a, cls.addMethod(a.name, function (opt_x) {
                a.maybeCall(opt_x || this.X, this)
            })
        }).bind(this)(this.actions[i])
        var key
        if (this.constants)for (var i = 0; i < this.constants.length; i++) {
            var c = this.constants[i]
            cls[c.name] = this[c.name] = c.value
        }
        this.messages && this.messages.length > 0 && GLOBAL.Message && Object_forEach(this.messages, function (m, key) {
            Message.isInstance(m) || (m = this.messages[key] = Message.create(m))
            var clsProps = {}, mdlProps = {}, constName = constantize(m.name)
            clsProps[m.name] = {
                get: function () {
                    return m.value
                }
            }, clsProps[constName] = {value: m}, mdlProps[constName] = {value: m}, Object.defineProperties(cls, clsProps), Object.defineProperties(this, mdlProps)
        }.bind(this)), this.buildProtoMethods_(cls)
        var self = this
        this.instance_.relationships_ = this.relationships, extendsModel && (this.instance_.relationships_ = this.instance_.relationships_.concat(extendsModel.instance_.relationships_)), this.relationships && this.relationships.forEach(function (r) {
            var name = constantize(r.name)
            self[name] || (self[name] = r), defineLazyProperty(cls, r.name, function () {
                var m = this.X.lookup(r.relatedModel), name = daoize(m.name), dao = this.X[name]
                return dao || console.error("Relationship " + r.name + " needs " + name + " in the context, and it was not found."), dao = RelationshipDAO.create({
                    delegate: dao,
                    relatedProperty: m.getProperty(r.relatedProperty),
                    relativeID: this.id
                }), {
                    get: function () {
                        return dao
                    }, configurable: !0
                }
            })
        })
        var createListenerTrampoline = function (cls, name, fn, isMerged, isFramed, whenIdle) {
            console.assert(fn, "createListenerTrampoline: fn not defined"), fn.name = name, Object.defineProperty(cls, name, {
                get: function () {
                    var l = fn.bind(this)
                    return whenIdle && (l = Movement.whenIdle(l)), isFramed ? l = EventService.framed(l, this.X) : isMerged && (l = EventService.merged(l, isMerged === !0 ? void 0 : isMerged, this.X)), Object.defineProperty(this, name, {
                        configurable: !0,
                        value: l
                    }), l
                }, configurable: !0
            })
        }
        if (Array.isArray(this.listeners))for (var i = 0; i < this.listeners.length; i++) {
            var l = this.listeners[i]
            createListenerTrampoline(cls, l.name, l.code, l.isMerged, l.isFramed, l.whenIdle)
        } else this.listeners && Object_forEach(this.listeners, function (l, key) {
            createListenerTrampoline(cls, key, l)
        })
        if (this.topics && Object_forEach(this.topics, function (t) {
            }), extendsModel) {
            this.getProperty("")
            for (var ips = [], ps = extendsModel.instance_.properties_, i = 0; i < ps.length; i++) {
                var p = ps[i]
                this.getProperty(p.name) || (ips.push(p), this.propertyMap_[p.name] = p)
            }
            ips.length && (this.instance_.properties_ = ips.concat(this.instance_.properties_))
            for (var ias = [], as = extendsModel.instance_.actions_, i = 0; i < as.length; i++) {
                var a = as[i]
                this.getAction && this.getAction(a.name) || ias.push(a)
            }
            ias.length && (this.instance_.actions_ = ias.concat(this.instance_.actions_))
        }
        if (this.instance_.properties_.length > 0 && !cls.__lookupGetter__("id")) {
            var primaryKey = this.ids
            1 == primaryKey.length ? (cls.__defineGetter__("id", function () {
                return this[primaryKey[0]]
            }), cls.__defineSetter__("id", function (val) {
                this[primaryKey[0]] = val
            })) : primaryKey.length > 1 && (cls.__defineGetter__("id", function () {
                return primaryKey.map(function (key) {
                    return this[key]
                }.bind(this))
            }), cls.__defineSetter__("id", function (val) {
                primaryKey.map(function (key, i) {
                    this[key] = val[i]
                }.bind(this))
            }))
        }
        return cls
    },
    getAllRequires: function () {
        function setModel(o) {
            o && o.model_ && (requires[o.model_.id] = !0)
        }

        var requires = {}
        return this.requires.forEach(function (r) {
            requires[r.split(" ")[0]] = !0
        }), this.traits.forEach(function (t) {
            requires[t] = !0
        }), this.extends && (requires[this.extends] = !0), this.properties.forEach(setModel), this.actions.forEach(setModel), this.templates.forEach(setModel), this.listeners.forEach(setModel), Object.keys(requires)
    },
    getPrototype: function () {
        return this.instance_.prototype_ || (this.instance_.prototype_ = this.buildPrototype(), this.onLoad && this.onLoad()), this.instance_.prototype_
    },
    saveDefinition: function (self) {
        self.definition_ = {}, Array.isArray(self.methods) && (self.definition_.methods = [].concat(self.methods)), Array.isArray(self.templates) && (self.definition_.templates = [].concat(self.templates)), Array.isArray(self.relationships) && (self.definition_.relationships = [].concat(self.relationships)), Array.isArray(self.properties) && (self.definition_.properties = [].concat(self.properties)), Array.isArray(self.actions) && (self.definition_.actions = [].concat(self.actions)), Array.isArray(self.listeners) && (self.definition_.listeners = [].concat(self.listeners)), Array.isArray(self.models) && (self.definition_.models = [].concat(self.models)), Array.isArray(self.tests) && (self.definition_.tests = [].concat(self.tests)), Array.isArray(self.issues) && (self.definition_.issues = [].concat(self.issues)), self.definition_.__proto__ = FObject
    },
    create: function (args, opt_X) {
        return "Model" === this.name ? FObject.create.call(this.getPrototype(), args, opt_X) : this.getPrototype().create(args, opt_X)
    },
    isSubModel: function (model) {
        if (!model || !model.getPrototype)return !1
        var subModels_ = this.subModels_ || (this.subModels_ = {})
        return subModels_.hasOwnProperty(model.id) || (subModels_[model.id] = model.getPrototype() === this.getPrototype() || this.isSubModel(model.getPrototype().__proto__.model_)), subModels_[model.id]
    },
    getRuntimeProperties: function () {
        return this.instance_.properties_ || this.getPrototype(), this.instance_.properties_
    },
    getRuntimeActions: function () {
        return this.instance_.actions_ || this.getPrototype(), this.instance_.actions_
    },
    getRuntimeRelationships: function () {
        return this.instance_.relationships_ || this.getPrototype(), this.instance_.relationships_
    },
    getProperty: function (name) {
        if (!this.propertyMap_) {
            for (var m = this.propertyMap_ = {}, properties = this.getRuntimeProperties(), i = 0; i < properties.length; i++) {
                var prop = properties[i]
                m[prop.name] = prop
            }
            this.propertyMap_ = m
        }
        return this.propertyMap_[name]
    },
    getAction: function (name) {
        for (var i = 0; i < this.instance_.actions_.length; i++)if (this.instance_.actions_[i].name === name)return this.instance_.actions_[i]
    },
    hashCode: function () {
        var string = "", properties = this.getRuntimeProperties()
        for (var key in properties)string += properties[key].toString()
        return string.hashCode()
    },
    isInstance: function (obj) {
        return obj && obj.model_ && this.isSubModel(obj.model_)
    },
    toString: function () {
        return "BootstrapModel(" + this.name + ")"
    },
    arequire: function () {
        if (this.required__)return this.required__
        var future = afuture()
        this.required__ = future.get
        var go = function () {
            var args = [], model = this, i
            if (this.extends && args.push(this.X.arequire(this.extends)), this.models)for (i = 0; i < this.models.length; i++)args.push(this.models[i].arequire())
            if (this.traits)for (i = 0; i < this.traits.length; i++)args.push(this.X.arequire(this.traits[i]))
            if (this.templates)for (i = 0; i < this.templates.length; i++) {
                var t = this.templates[i]
                args.push(aif(!t.code, aseq(aevalTemplate(this.templates[i], this), function (t) {
                    return function (ret, m) {
                        t.code = m, ret()
                    }
                }(t))))
            }
            if (args.length && (args = [aseq.apply(null, args)]), this.requires)for (var i = 0; i < this.requires.length; i++) {
                var r = this.requires[i], m = r.split(" as ")
                m[0] == this.id ? console.warn("Model requires itself: " + this.id) : args.push(this.X.arequire(m[0]))
            }
            args.push(function (ret) {
                this.X.i18nModel ? this.X.i18nModel(ret, this, this.X) : ret()
            }.bind(this)), aseq.apply(null, args)(function () {
                this.finished__ = !0, future.set(this)
            }.bind(this))
        }.bind(this)
        return this.extra__ ? this.extra__(go) : go(), this.required__
    },
    getMyFeature: function (featureName) {
        function add(a) {
            if (a)for (var i = 0; i < a.length; i++) {
                var f = a[i]
                map[f.name.toUpperCase()] = f
            }
        }

        if (!Object.prototype.hasOwnProperty.call(this, "featureMap_")) {
            var map = this.featureMap_ = {}
            add(this.getRuntimeProperties()), add(this.instance_.actions_), add(this.methods), add(this.listeners), add(this.templates), add(this.models), add(this.tests), add(this.relationships), add(this.issues)
        }
        return this.featureMap_[featureName.toUpperCase()]
    },
    getRawFeature: function (featureName) {
        function add(a) {
            if (a)for (var i = 0; i < a.length; i++) {
                var f = a[i]
                map[f.name.toUpperCase()] = f
            }
        }

        if (!Object.prototype.hasOwnProperty.call(this, "rawFeatureMap_")) {
            var map = this.featureMap_ = {}
            add(this.properties), add(this.actions), add(this.methods), add(this.listeners), add(this.templates), add(this.models), add(this.tests), add(this.relationships), add(this.issues)
        }
        return this.featureMap_[featureName.toUpperCase()]
    },
    getAllMyRawFeatures: function () {
        var featureList = [], arrayOrEmpty = function (arr) {
            return arr && Array.isArray(arr) ? arr : []
        }
        return [arrayOrEmpty(this.properties), arrayOrEmpty(this.actions), arrayOrEmpty(this.methods), arrayOrEmpty(this.listeners), arrayOrEmpty(this.templates), arrayOrEmpty(this.models), arrayOrEmpty(this.tests), arrayOrEmpty(this.relationships), arrayOrEmpty(this.issues)].map(function (list) {
            featureList = featureList.concat(list)
        }), featureList
    },
    getFeature: function (featureName) {
        var feature = this.getMyFeature(featureName)
        if (feature || !this.extends)return feature
        var ext = this.X.lookup(this.extends)
        return ext ? ext.getFeature(featureName) : void 0
    },
    getAllRawFeatures: function () {
        var featureList = this.getAllMyRawFeatures()
        if (this.extends) {
            var ext = this.X.lookup(this.extends)
            ext && ext.getAllFeatures().map(function (subFeat) {
                var subName = subFeat.name.toUpperCase()
                featureList.mapFind(function (myFeat) {
                    return myFeat && myFeat.name && myFeat.name.toUpperCase() === subName
                }) || featureList.push(subFeat)
            })
        }
        return featureList
    },
    atest: function () {
        for (var seq = [], allPassed = !0, i = 0; i < this.tests.length; i++)seq.push(function (test, model) {
            return function (ret) {
                test.atest(model)(function (passed) {
                    passed || (allPassed = !1), ret()
                })
            }
        }(this.tests[i], this))
        return seq.push(function (ret) {
            ret(allPassed)
        }), aseq.apply(null, seq)
    }
}, BinaryProtoGrammar, DocumentationBootstrap = {
    name: "documentation",
    type: "Documentation",
    labels: ["javascript"],
    help: "Documentation associated with this entity.",
    documentation: "The developer documentation for this $$DOC{ref:'.'}. Use a $$DOC{ref:'DocModelView'} to view documentation.",
    setter: function (nu) {
        _DOC_ && (this.instance_.documentation = nu)
    },
    getter: function () {
        if (!_DOC_)return ""
        var doc = this.instance_.documentation
        return !doc || "undefined" == typeof Documentation || !Documentation || doc.model_ && doc.model_.getPrototype && Documentation.isInstance(doc) || (doc.body ? this.instance_.documentation = Documentation.create(doc) : this.instance_.documentation = Documentation.create({body: doc})), this.instance_.documentation
    }
}, Model = {
    __proto__: BootstrapModel,
    instance_: {},
    name: "Model",
    plural: "Models",
    help: "Describes the attributes and properties of an entity.",
    documentation: {
        body: function () {
        }
    },
    tableProperties: ["package", "name", "label", "plural"],
    properties: [{name: "id", hidden: !0, transient: !0}, {
        name: "sourcePath",
        help: "Source location of this Model.",
        defaultValue: "",
        mode: "read-only",
        transient: !0
    }, {
        name: "abstract", defaultValue: !1, help: "If the java class is abstract.", documentation: function () {
        }
    }, {
        name: "package",
        help: "Package that this Model belongs to.",
        defaultValue: "",
        javaType: "String",
        postSet: function (_, p) {
            return this.id = p ? p + "." + this.name : this.name
        },
        documentation: function () {
        }
    }, {
        name: "name",
        type: "String",
        javaType: "String",
        postSet: function (_, n) {
            return this.id = this.package ? this.package + "." + n : n
        },
        required: !0,
        displayWidth: 30,
        displayHeight: 1,
        defaultValue: "",
        help: "The coding identifier for the entity.",
        documentation: function () {
        }
    }, {
        name: "label", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return labelize(this.name)
        }, help: "The display label for the entity.", documentation: function () {
        }
    }, {
        name: "javaClassName", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return (this.abstract ? "Abstract" : "") + this.name
        }, help: "The Java classname of this Model.", documentation: function () {
        }
    }, {
        name: "javaClassImports", type: "Array[String]", labels: ["java"], defaultValueFn: function () {
            return []
        }, help: "Imports to add at the top of the generated java class."
    }, {
        name: "swiftClassName", type: "String", labels: ["swift"], defaultValueFn: function () {
            return (this.abstract ? "Abstract" : "") + this.name
        }, help: "The Swift classname of this model."
    }, {
        name: "extends",
        label: "Extends",
        type: "String",
        displayWidth: 70,
        displayHeight: 1,
        defaultValue: "",
        help: "The parent model of this model.",
        documentation: function () {
        }
    }, {
        name: "extendsModel", hidden: !0, compareProperty: constantFn(0), getter: function () {
            return null
        }, setter: function (e) {
            console.warn("Deprecated use of 'extendsModel'. Use 'extends' instead."), e && (this.extends = e)
        }
    }, {
        name: "traits", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Traits to mix-into this Model.", documentation: function () {
        }
    }, {
        name: "plural", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return this.name + "s"
        }, help: "The plural form of this model's name.", documentation: function () {
        }
    }, {
        name: "version", defaultValue: 1, help: "Version number of model.", documentation: function () {
        }
    }, {
        name: "ids",
        label: "Key Properties",
        type: "Array[String]",
        view: "foam.ui.StringArrayView",
        defaultValueFn: function () {
            var id = this.getProperty("id")
            if (id)return ["id"]
            var props = this.getRuntimeProperties()
            return props.length ? [props[0].name] : []
        },
        help: "Properties which make up unique id.",
        documentation: function () {
        }
    }, {
        name: "requires", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Model imports.", documentation: function () {
        }
    }, {
        name: "imports", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Context imports.", documentation: function () {
        }
    }, {
        name: "exports", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Context exports.", documentation: function () {
        }
    }, {
        name: "implements", type: "Array[String]", view: "foam.ui.StringArrayView", defaultValueFn: function () {
            return []
        }, help: "Interfaces implemented by this Model.", documentation: function () {
        }
    }, {
        name: "swiftImplements", type: "Array[String]", labels: ["compiletime", "swift"], defaultValueFn: function () {
            return this.implements
        }, help: "Swift interfaces implemented by this Model."
    }, {
        name: "javaImplements", type: "Array[String]", labels: ["compiletime", "java"], defaultValueFn: function () {
            return this.implements
        }, help: "Java interfaces implemented by this Model."
    }, {
        name: "swiftClassImports",
        type: "Array[String]",
        labels: ["compiletime", "swift"],
        defaultValueFn: function () {
            return []
        },
        help: "Imports to add at the top of the generated swift class."
    }, {
        name: "swiftCode",
        type: "String",
        labels: ["compiletime", "swift"],
        defaultValue: "",
        help: "Swift code to drop in when generating the swift class for this model."
    }, {
        name: "javaCode",
        type: "String",
        labels: ["compiletime", "java"],
        defaultValue: "",
        help: "Java code to drop in when generating the java class for this model."
    }, {
        name: "onLoad",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A function which is called when a Model's prototype is built.",
        documentation: function () {
        }
    }, {
        name: "tableProperties",
        type: "Array[String]",
        view: "foam.ui.StringArrayView",
        displayWidth: 70,
        lazyFactory: function () {
            return (this.properties || this.properties_).filter(function (o) {
                return !o.hidden
            }).map(function (o) {
                return o.name
            })
        },
        help: "Properties to be displayed in table view. Defaults to all properties.",
        documentation: function () {
        }
    }, {
        name: "searchProperties",
        type: "Array[String]",
        view: "foam.ui.StringArrayView",
        displayWidth: 70,
        defaultValueFn: function () {
            return this.tableProperties
        },
        help: "Properties display in a search view. Defaults to table properties.",
        documentation: function () {
        }
    }, {
        name: "properties",
        type: "Array[Property]",
        subType: "Property",
        javaType: "java.util.List<foam.core.Property>",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        help: "Properties associated with the entity.",
        preSet: function (oldValue, newValue) {
            for (var i = 0; i < newValue.length; i++) {
                var p = newValue[i]
                "string" == typeof p ? newValue[i] = p = {name: p} : Array.isArray(p) && (newValue[i] = p = {
                    name: p[0],
                    defaultValue: p[1]
                }), !p.labels || FEATURE_ENABLED(p.labels) ? (p.model_ ? "string" == typeof p.model_ && (p = newValue[i] = JSONUtil.mapToObj(this.X, p)) : p.type && this.X.lookup(p.type + "Property") ? (p.model_ = p.type + "Property", p.type = void 0, p = newValue[i] = JSONUtil.mapToObj(this.X, p)) : p = newValue[i] = Property.create(p), this[constantize(p.name)] = newValue[i]) : (newValue.splice(i, 1), i--)
            }
            return this.propertyMap_ = null, newValue
        },
        postSet: function (_, newValue) {
            for (var i = 0; i < newValue.length; i++)newValue[i].modelId = this.id
        },
        documentation: function () {
        }
    }, {
        name: "actions", type: "Array[Action]", subType: "Action", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, help: "Actions associated with the entity.", adapt: function (_, a) {
            if (!Action)return a
            for (var i = 0; i < a.length; i++) {
                var p = a[i]
                "function" == typeof p ? a[i] = Action.create({
                    name: p.name,
                    code: p
                }) : p.model_ ? "string" == typeof p.model_ && (a[i] = FOAM(p)) : a[i] = Action.create(p), p.name && !this[constantize(p.name)] && (this[constantize(p.name)] = a[i])
            }
            return a
        }, documentation: function () {
        }
    }, {
        name: "constants",
        type: "Array[Constant]",
        subType: "Constant",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        help: "Constants associated with the entity.",
        preSet: function (_, newValue) {
            if (!Constant)return newValue
            if (Array.isArray(newValue))return JSONUtil.arrayToObjArray(this.X, newValue, Constant)
            var constants = []
            for (var key in newValue) {
                var oldValue = newValue[key], constant = Constant.create({name: key, value: oldValue})
                constants.push(constant)
            }
            return constants
        }
    }, {
        name: "messages", type: "Array[Message]", subType: "Constant", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, help: "Messages associated with the entity.", preSet: function (_, ms) {
            if (!GLOBAL.Message)return ms
            if (Array.isArray(ms))return JSONUtil.arrayToObjArray(this.X, ms, Message)
            var messages = []
            for (var key in ms) {
                var oldValue = ms[key], message = Message.create({name: key, value: oldValue})
                messages.push(message)
            }
            return messages
        }
    }, {
        name: "methods", subType: "Method", factory: function () {
            return []
        }, help: "Methods associated with the entity.", adapt: function (_, a) {
            if (!Method)return a
            if (Array.isArray(a)) {
                for (var i = 0; i < a.length; i++)a[i] = "function" == typeof a[i] ? this.createMethod_(this.X, a[i].name, a[i]) : JSONUtil.mapToObj(this.X, a[i], Method, seq)
                return a
            }
            var methods = []
            for (var key in a)methods.push(this.createMethod_(this.X, key, a[key]))
            return methods
        }, documentation: function () {
        }
    }, {
        name: "listeners", type: "Array[Method]", subType: "Method", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, adapt: function (_, a) {
            if (!Method)return a
            if (Array.isArray(a)) {
                for (var i = 0; i < a.length; i++)a[i] = "function" == typeof a[i] ? this.createMethod_(this.X, a[i].name, a[i]) : JSONUtil.mapToObj(this.X, a[i], Method, seq)
                return a
            }
            console.error("Expecting array of listeners.")
        }, help: "Event listeners associated with the entity.", documentation: function () {
        }
    }, {
        name: "templates",
        type: "Array[Template]",
        subType: "Template",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        preSet: function (_, templates) {
            for (var i = 0; i < templates.length; i++)!templates[i].labels || FEATURE_ENABLED(templates[i].labels) || (templates.splice(i, 1), i--)
            return templates
        },
        postSet: function (_, templates) {
            TemplateUtil.expandModelTemplates(this)
        },
        help: "Templates associated with this entity.",
        documentation: function () {
        }
    }, {
        name: "models", type: "Array[Model]", subType: "Model", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, adapt: function (_, newValue) {
            if (!Model)return newValue
            if (!Array.isArray(newValue))return newValue
            var id = this.id
            return JSONUtil.arrayToObjArray(this.X, newValue, Model).map(function (m) {
                return m.package = id, m
            })
        }, postSet: function (_, models) {
            for (var i = 0; i < models.length; i++)this[models[i].name] = models[i]
        }, help: "Sub-models embedded within this model.", documentation: function () {
        }
    }, {
        name: "tests",
        label: "Unit Tests",
        type: "Array[Unit Test]",
        subType: "UnitTest",
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        adapt: function (_, a) {
            if (!a)return a
            for (var i = 0; i < a.length; i++)"function" == typeof a[i] && (a[i] = UnitTest.create({
                name: a[i].name,
                code: a[i]
            }))
            return a
        },
        help: "Unit tests associated with this model.",
        documentation: function () {
        }
    }, {
        name: "relationships", subType: "Relationship", view: "foam.ui.ArrayView", factory: function () {
            return []
        }, propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        }, help: "Relationships of this model to other models.", preSet: function (_, newValue) {
            if (!Relationship)return newValue
            for (var i = 0; i < newValue.length; i++) {
                var p = newValue[i]
                p.model_ ? "string" == typeof p.model_ && (p = newValue[i] = FOAM(p)) : p = newValue[i] = Relationship.create(p), this[constantize(p.name)] = newValue[i]
            }
            return newValue
        }, documentation: function () {
        }
    }, {
        name: "issues",
        type: "Array[Issue]",
        subType: "Issue",
        labels: ["debug"],
        view: "foam.ui.ArrayView",
        factory: function () {
            return []
        },
        propertyToJSON: function (visitor, output, o) {
            o[this.name].length && visitor.visitArray(o[this.name])
        },
        help: "Issues associated with this model.",
        documentation: function () {
        }
    }, {
        name: "help",
        label: "Help Text",
        type: "String",
        displayWidth: 70,
        displayHeight: 6,
        view: "foam.ui.TextAreaView",
        defaultValue: "",
        help: "Help text associated with the entity.",
        documentation: function () {
        }
    }, {name: "i18nComplete_", defaultValue: !1, hidden: !0, transient: !0}, {
        name: "translationHint",
        label: "Description for Translation",
        type: "String",
        defaultValueFn: function () {
            return this.name
        }
    }, DocumentationBootstrap, {
        name: "notes",
        type: "String",
        displayWidth: 70,
        displayHeight: 6,
        view: "foam.ui.TextAreaView",
        defaultValue: "",
        help: "Internal documentation associated with this entity.",
        documentation: function () {
        }
    }],
    templates: [],
    toString: function () {
        return "Model"
    }
}
GLOBAL.Property = {
    __proto__: BootstrapModel,
    instance_: {},
    name: "Property",
    swiftImplements: ["ExprProtocol"],
    javaImplements: ["foam.core2.ExprInterface"],
    plural: "Properties",
    help: "Describes a properties of a modelled entity.",
    ids: ["name"],
    tableProperties: ["name", "label", "type", "required", "defaultValue"],
    documentation: function () {
    },
    properties: [{
        name: "name",
        swiftType: "String",
        javaType: "String",
        required: !0,
        displayWidth: 30,
        displayHeight: 1,
        defaultValue: "",
        mode: "read-only",
        help: "The coding identifier for the property.",
        documentation: function () {
        }
    }, {name: "labels", type: "Array", subType: "String", labels: ["debug", "javascript"]}, {
        name: "label",
        swiftType: "String",
        javaType: "String",
        required: !1,
        displayWidth: 70,
        displayHeight: 1,
        defaultValueFn: function () {
            return labelize(this.name)
        },
        help: "The display label for the property.",
        documentation: function () {
        }
    }, {
        name: "translationHint",
        type: "String",
        required: !1,
        documentation: "Used to describe the property for translators."
    }, {
        name: "speechLabel",
        type: "String",
        swiftType: "String",
        required: !1,
        displayWidth: 70,
        displayHeight: 1,
        defaultValueFn: function () {
            return this.label
        },
        help: "The speech label for the property.",
        documentation: function () {
        }
    }, {
        name: "speechLabelTranslationHint",
        type: "String",
        required: !1,
        documentation: "Used to describe the speech label for translators.",
        defaultValueFn: function () {
            return this.translationHint
        }
    }, {
        name: "tableLabel", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
            return this.label
        }, help: "The table display label for the entity.", documentation: function () {
        }
    }, {
        name: "type",
        type: "String",
        required: !0,
        view: {
            factory_: "foam.ui.ChoiceView",
            choices: ["Array", "Boolean", "Color", "Date", "DateTime", "Email", "Enum", "Float", "Function", "Image", "Int", "Object", "Password", "String", "String[]", "URL"]
        },
        defaultValue: "String",
        help: "The type of the property.",
        documentation: function () {
        }
    }, {
        name: "swiftDefaultValue", labels: ["swift", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "swiftDefaultValueFn", labels: ["swift", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "javaDefaultValue", labels: ["java", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "javaDefaultValueFn", labels: ["java", "compiletime"], adapt: function (_, n) {
            return multiline(n)
        }
    }, {
        name: "protobufType",
        type: "String",
        required: !1,
        help: "The protobuf type that represents the type of this property.",
        defaultValueFn: function () {
            return this.type.toLowerCase()
        },
        documentation: function () {
        }
    }, {
        name: "javaType",
        type: "String",
        labels: ["compiletime", "java"],
        required: !1,
        defaultValue: "Object",
        help: "The java type that represents the type of this property.",
        documentation: function () {
        }
    }, {
        name: "javascriptType",
        type: "String",
        labels: ["compiletime", "javascript"],
        required: !1,
        defaultValueFn: function () {
            return this.type
        },
        help: "The javascript type that represents the type of this property.",
        documentation: function () {
        }
    }, {
        name: "swiftType",
        type: "String",
        required: !1,
        labels: ["compiletime", "swift"],
        defaultValue: "AnyObject?",
        help: "The Swift type that represents this type of property."
    }, {
        name: "swiftNSCoderEncode",
        type: "String",
        required: !1,
        labels: ["compiletime", "swift"],
        defaultValue: "// <%= this.name %> is unsupported for coding."
    }, {
        name: "swiftNSCoderDecode",
        type: "String",
        required: !1,
        labels: ["compiletime", "swift"],
        defaultValue: "// <%= this.name %> is unsupported for coding."
    }, {
        name: "shortName",
        type: "String",
        required: !0,
        displayWidth: 10,
        displayHeight: 1,
        defaultValue: "",
        help: "A short alternate name to be used for compact encoding.",
        documentation: "A short alternate $$DOC{ref:'.name'} to be used for compact encoding."
    }, {name: "singular", type: "String", required: !1, displayWidth: 70}, {
        name: "aliases",
        labels: ["javascript"],
        view: "foam.ui.StringArrayView",
        factory: function () {
            return []
        },
        help: "Alternate names for this property.",
        documentation: function () {
        }
    }, {
        name: "mode",
        type: "String",
        defaultValue: "read-write",
        view: {factory_: "foam.ui.ChoiceView", choices: ["read-only", "read-write", "final"]},
        documentation: function () {
        }
    }, {
        name: "subType",
        label: "Sub-Type",
        type: "String",
        displayWidth: 30,
        help: "The type of the property.",
        documentation: function () {
        }
    }, {
        name: "subKey",
        labels: ["javascript"],
        displayWidth: 20,
        defaultValue: "ID",
        help: "The foreign key that this property references.",
        documentation: function () {
        }
    }, {
        name: "units",
        type: "String",
        required: !0,
        displayWidth: 70,
        displayHeight: 1,
        defaultValue: "",
        help: "The units of the property.",
        documentation: function () {
        }
    }, {
        name: "required",
        type: "Boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !0,
        help: "Indicates if the property is a required field.",
        documentation: function () {
        }
    }, {
        name: "visibility", choices: ["rw", "final", "ro", "hidden"], postSet: function (_, v) {
            "hidden" === v && (this.hidden = !0)
        }
    }, {
        name: "hidden",
        type: "Boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !1,
        postSet: function (old, hidden) {
            !old && hidden && (this.visibility = "hidden")
        },
        help: "Indicates if the property is hidden.",
        documentation: function () {
        }
    }, {
        name: "transient",
        type: "Boolean",
        swiftType: "Bool",
        javaType: "boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !1,
        help: "Indicates if the property is transient.",
        documentation: function () {
        }
    }, {
        name: "modelId",
        type: "String",
        view: "foam.ui.TextFieldView",
        help: "Id of the model that this is a property of",
        transient: !0
    }, {
        name: "displayWidth",
        type: "Int",
        displayWidth: 8,
        displayHeight: 1,
        defaultValue: 30,
        help: "The display width of the property.",
        documentation: function () {
        }
    }, {
        name: "displayHeight",
        type: "Int",
        displayWidth: 8,
        displayHeight: 1,
        defaultValue: 1,
        help: "The display height of the property.",
        documentation: function () {
        }
    }, {
        name: "view",
        labels: ["javascript"],
        defaultValue: "foam.ui.TextFieldView",
        help: "View component for the property.",
        documentation: function () {
        }
    }, {
        name: "toPropertyE", labels: ["javascript"], defaultValue: function toPropertyE(X) {
            var e = this.displayHeight > 1 ? X.lookup("foam.u2.MultiLineTextField").create(null, X) : X.lookup("foam.u2.TextField").create(null, X)
            return e.attrs({size: this.displayWidth}), e
        }, adapt: function (_, nu) {
            if ("string" == typeof nu) {
                var f = function (X) {
                    return X.lookup(nu).create(null, X)
                }
                return f.toString = function () {
                    return "'" + nu + "'"
                }, f
            }
            return nu
        }
    }, {
        name: "detailView", labels: ["javascript"], defaultValueFn: function () {
            return this.view
        }, help: "View component for the property when rendering within a DetailView.", documentation: function () {
        }
    }, {
        name: "citationView", labels: ["javascript"], defaultValueFn: function () {
            return this.view
        }, help: "View component for the property when rendering within a CitationView.", documentation: function () {
        }
    }, {
        name: "swiftView",
        type: "String",
        labels: ["compiletime", "swift"],
        help: "The default view name for this property in swift."
    }, {
        name: "detailViewPreRow", labels: ["javascript"], defaultValue: function () {
            return ""
        }, help: "Inject HTML before row in DetailView.", documentation: function () {
        }
    }, {
        name: "detailViewPostRow", labels: ["javascript"], defaultValue: function () {
            return ""
        }, help: "Inject HTML before row in DetailView.", documentation: function () {
        }
    }, {
        name: "defaultValue",
        type: "String",
        required: !1,
        labels: ["javascript"],
        displayWidth: 70,
        displayHeight: 1,
        defaultValue: "",
        postSet: function (old, nu) {
            nu && this.defaultValueFn && (this.defaultValueFn = void 0)
        },
        help: "The property's default value.",
        documentation: function () {
        }
    }, {
        name: "defaultValueFn",
        label: "Default Value Function",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        postSet: function (old, nu) {
            nu && this.defaultValue && (this.defaultValue = void 0)
        },
        help: "The property's default value function.",
        documentation: function () {
        }
    }, {
        name: "dynamicValue",
        label: "Value's Dynamic Function",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A dynamic function which computes the property's value.",
        documentation: function () {
        }
    }, {
        name: "factory",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Factory for creating initial value when new object instantiated.",
        documentation: function () {
        }
    }, {
        name: "lazyFactory",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        view: "foam.ui.FunctionView",
        help: "Factory for creating the initial value. Only called when the property is accessed for the first time.",
        documentation: function () {
        }
    }, {name: "regex", labels: ["javascript"]}, {
        name: "validate",
        type: "Function",
        swiftType: "FoamFunction?",
        javaType: "FoamFunction<String>",
        required: !1,
        view: "foam.ui.FunctionView",
        help: "Function for validating property value.",
        preSet: function (_, f) {
            if (!f.dependencies) {
                var str = f.toString(), deps = str.match(/^function[ _$\w]*\(([ ,\w]*)/)[1]
                deps = deps ? deps.split(",").map(function (name) {
                    return name.trim()
                }) : []
                var f2 = function () {
                    for (var args = [], i = 0; i < deps.length; i++)args.push(this[deps[i]])
                    return f.apply(this, args)
                }
                return f2.dependencies = deps, f2.toString = function () {
                    return f.toString()
                }, f2
            }
            return f
        },
        compareProperty: function (o1, o2) {
            return o1.toString() !== o2.toString()
        },
        documentation: function () {
        }
    }, {name: "swiftValidate", labels: ["swift", "compiletime"]}, {
        name: "javaValidate",
        labels: ["java", "compiletime"]
    }, {
        name: "javaAdapt", type: "String", labels: ["compiletime", "java"], defaultValue: function () {
        }
    }, {
        name: "javaPreSet", type: "String", labels: ["compiletime", "java"], defaultValue: function () {
        }
    }, {
        name: "javaPostSet",
        type: "String",
        labels: ["compiletime", "java"],
        defaultValue: "//javaPostSet goes here."
    }, {name: "javaGetter", type: "String", labels: ["compiletime", "java"]}, {
        name: "javaFactory",
        type: "String",
        labels: ["compiletime", "java"],
        adapt: function (_, n) {
            return "function" == typeof n ? multiline(n) : n
        }
    }, {
        name: "javaLazyFactory", type: "String", labels: ["compiletime", "java"], adapt: function (_, n) {
            return "function" == typeof n ? multiline(n) : n
        }
    }, {
        name: "swiftAdapt", type: "String", labels: ["compiletime", "swift"], defaultValue: function () {
        }
    }, {
        name: "swiftPreSet",
        type: "String",
        labels: ["compiletime", "swift"],
        defaultValue: "return newValue"
    }, {
        name: "swiftPostSet",
        type: "String",
        labels: ["compiletime", "swift"],
        defaultValue: "//swiftPostSet goes here."
    }, {name: "swiftGetter", type: "String", labels: ["compiletime", "swift"]}, {
        name: "swiftFactory",
        type: "String",
        labels: ["compiletime", "swift"]
    }, {name: "swiftLazyFactory", type: "String", labels: ["compiletime", "swift"]}, {
        name: "getter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "The property's default value function.",
        documentation: function () {
        }
    }, {
        name: "adapt",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "An adapter function called before preSet.",
        documentation: function () {
        }
    }, {
        name: "preSet",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "An adapter function called before normal setter logic.",
        documentation: function () {
        }
    }, {
        name: "postSet",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A function called after normal setter logic, but before property change event fired.",
        documentation: function () {
        }
    }, {
        name: "setter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "The property's default value function.",
        documentation: function () {
        }
    }, {
        name: "tableFormatter",
        label: "Table Cell Formatter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Function to format value for display in TableView.",
        documentation: "A function to format the value for display in a $$DOC{ref:'foam.ui.TableView'}."
    }, {
        name: "summaryFormatter",
        label: "Summary Formatter",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Function to format value for display in SummaryView.",
        documentation: "A function to format the value for display in a $$DOC{ref:'SummaryView'}."
    }, {
        name: "tableWidth",
        type: "String",
        required: !1,
        defaultValue: "",
        help: "Table View Column Width.",
        documentation: "A Suggestion for $$DOC{ref:'foam.ui.TableView'} column width."
    }, {
        name: "help",
        label: "Help Text",
        type: "String",
        swiftType: "String",
        swiftDefaultValue: '""',
        required: !1,
        displayWidth: 70,
        displayHeight: 6,
        view: "foam.ui.TextAreaView",
        defaultValue: "",
        help: "Help text associated with the property.",
        documentation: function () {
        }
    }, {
        name: "helpTranslationHint",
        type: "String",
        help: "The translation hint for the help property."
    }, DocumentationBootstrap, {
        name: "prototag",
        label: "Protobuf tag",
        type: "Int",
        defaultValue: 0,
        required: !1,
        help: "The protobuf tag number for this field.",
        documentation: "The protobuf tag number for this field."
    }, {
        name: "actionFactory",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "Factory to create the action objects for taking this property from value A to value B",
        documentation: "Factory to create the $$DOC{ref:'Action'} objects for taking this $$DOC{ref:'Property'} from value A to value B"
    }, {
        name: "compareProperty",
        type: "Function",
        swiftType: "FoamFunction",
        javaType: "FoamFunction<Integer>",
        view: "foam.ui.FunctionView",
        displayWidth: 70,
        displayHeight: 5,
        defaultValue: function (o1, o2) {
            return o1 === o2 ? 0 : o1 || o2 ? o1 ? o2 ? o1.localeCompare ? o1.localeCompare(o2) : o1.compareTo ? o1.compareTo(o2) : o1.$UID.compareTo(o2.$UID) : 1 : -1 : 0
        },
        swiftDefaultValue: function () {
        },
        javaDefaultValue: function () {
        },
        help: "Comparator function.",
        documentation: "A comparator function two compare two instances of this $$DOC{ref:'Property'}."
    }, {
        name: "fromString", labels: ["javascript"], defaultValue: function (s) {
            return s
        }, help: "Function to extract value from a String."
    }, {
        name: "fromElement",
        labels: ["javascript"],
        defaultValue: function propertyFromElement(e, p) {
            if (!p.subType || !this.X.lookup || "String" === p.subType)return this[p.name] = p.fromString(e.innerHTML), void 0
            var model = this.X.lookup(p.subType)
            if (!model)return this[p.name] = p.fromString(e.innerHTML), void 0
            var o = model.create()
            return o.fromElement ? (this[p.name] = o.fromElement(e), void 0) : (this[p.name] = p.fromString(e.innerHTML), void 0)
        },
        help: "Function to extract from a DOM Element.",
        documentation: "Function to extract a value from a DOM Element."
    }, {
        name: "propertyToJSON",
        labels: ["javascript"],
        defaultValue: function (visitor, output, o) {
            this.transient || (output[this.name] = visitor.visit(o[this.name]))
        },
        help: "Function to extract from a DOM Element.",
        documentation: "Function to extract a value from a DOM Element."
    }, {
        name: "autocompleter",
        subType: "Autocompleter",
        labels: ["javascript"],
        help: "Name or model for the autocompleter for this property.",
        documentation: function () {
        }
    }, {
        name: "install",
        type: "Function",
        labels: ["javascript"],
        required: !1,
        displayWidth: 70,
        displayHeight: 3,
        rows: 3,
        view: "foam.ui.FunctionView",
        defaultValue: "",
        help: "A function which installs additional features into the Model's prototype.",
        documentation: function () {
        }
    }, {
        name: "exclusive",
        type: "Boolean",
        view: "foam.ui.BooleanView",
        defaultValue: !0,
        help: "Indicates if the property can only have a single value.",
        documentation: function () {
        }
    }, {
        name: "memorable",
        type: "Boolean",
        help: "True if this value should be included in a memento for this object.",
        defaultValue: !1
    }, {
        name: "attribute",
        type: "Boolean",
        help: "True if this property is settable as an element attribute.",
        defaultValue: !1
    }, {
        name: "javaJsonParser", labels: ["java"], javaType: "foam.lib.parse.Parser", javaFactory: function () {
        }
    }, {
        name: "javaOutputJson", javaType: "FoamFunction<Void>", labels: ["java"], javaFactory: function () {
        }
    }],
    methods: [function partialEval() {
        return this
    }, {
        name: "f",
        code: function (obj) {
            return obj[this.name]
        },
        args: [{name: "obj", swiftType: "AnyObject?", javaType: "Object"}],
        swiftReturnType: "AnyObject?",
        javaReturnType: "Object",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "compare",
        code: function (o1, o2) {
            return this.compareProperty(this.f(o1), this.f(o2))
        },
        args: [{name: "o1", swiftType: "AnyObject?", javaType: "Object"}, {
            name: "o2",
            swiftType: "AnyObject?",
            javaType: "Object"
        }],
        returnType: "Int",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, function readResolve() {
        return this.modelId ? this.X.lookup(this.modelId)[constantize(this.name)] : this
    }, function toSQL() {
        return this.name
    }, function toMQL() {
        return this.name
    }, function toBQL() {
        return this.name
    }, function cloneProperty(value, cloneArgs) {
        cloneArgs[this.name] = value && value.clone ? value.clone() : value
    }, function deepCloneProperty(value, cloneArgs) {
        cloneArgs[this.name] = value && value.deepClone ? value.deepClone() : value
    }, function exprClone() {
        return this
    }, function dot(nextProp) {
        var PropertySequence = this.X.lookup("foam.mlang.PropertySequence")
        return PropertySequence ? PropertySequence.isInstance(this) ? (this.next_ ? this.next_ = this.next_.dot(nextProp) : this.next_ = nextProp, this) : PropertySequence.xbind({next_: nextProp}).create(this, this.Y) : (console.warn("Missing foam.mlang.PropertySequence for Property.dot()"), this)
    }, function initPropertyAgents(proto, fastInit) {
        var prop = this, name = prop.name, name$_ = prop.name$_
        if (fastInit || proto.addInitAgent(this.postSet || this.setter ? 9 : 0, name + ": " + (this.postSet || this.setter ? "copy arg (postSet)" : "copy arg"), function (o, X, m) {
                m && (m.hasOwnProperty(name) && (o[name] = m[name]), m.hasOwnProperty(name$_) && (o[name$_] = m[name$_]))
            }), this.dynamicValue) {
            var dynamicValue = prop.dynamicValue
            Array.isArray(dynamicValue) ? proto.addInitAgent(10, name + ": dynamicValue", function (o, X) {
                Events.dynamicFn(dynamicValue[0].bind(o), function () {
                    o[name] = dynamicValue[1].call(o)
                }, X || this.X)
            }) : proto.addInitAgent(10, name + ": dynamicValue", function (o, X) {
                Events.dynamicFn(dynamicValue.bind(o), function (value) {
                    o[name] = value
                }, X || this.X)
            })
        }
        this.factory && proto.addInitAgent(11, name + ": factory", function (o, X) {
            o.hasOwnProperty(name) || o[name]
        })
    }, function toE(opt_X) {
        var X = opt_X || this.X
        return X.lookup("foam.u2.PropertyView").create({prop: this, view: this.toPropertyE(X)}, X)
    }],
    toString: function () {
        return "Property"
    }
}, Model.methods = {}, "createMethod_ getProperty getAction hashCode buildPrototype addTraitToModel_ buildProtoImports_ buildProtoProperties_ buildProtoMethods_ getPrototype isSubModel isInstance getAllRequires arequire getMyFeature getRawFeature getAllMyRawFeatures getFeature getAllRawFeatures atest getRuntimeProperties getRuntimeActions create".split(" ").forEach(function (k) {
    Model.methods[k] = BootstrapModel[k]
}), Model = Model.create(Model), Model.model_ = Model, Model.create = BootstrapModel.create, Property = Model.create(Property)
for (var ps = Property.getRuntimeProperties(), i = 0; i < ps.length; i++)Property[constantize(ps[i].name)] = ps[i] = Property.create(ps[i])
if (USED_MODELS.Property = !0, USED_MODELS.Model = !0, CLASS({
        name: "Message",
        plural: "messages",
        tableProperties: ["name", "value", "translationHint"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the message.",
            documentation: function () {
            }
        }, {name: "value", help: "The message itself."}, {
            name: "labels",
            type: "StringArray",
            labels: ["debug", "javascript"]
        }, {
            name: "meaning", help: "Linguistic clarification to resolve ambiguity.", documentation: function () {
            }
        }, {
            name: "placeholders", help: "Placeholders to inject into the message.", documentation: function () {
            }, factory: function () {
                return []
            }
        }, {
            name: "replaceValues", documentation: function () {
            }, defaultValue: function (unused_selectors, args) {
                for (var phs = this.placeholders || [], value = this.value, i = 0; i < phs.length; ++i) {
                    var name = phs[i].name, replacement = args.hasOwnProperty(name) ? args[name] : phs[i].example
                    value = value.replace(new RegExp("[$]" + name + "[$]", "g"), replacement)
                }
                return value
            }
        }, {
            name: "translationHint",
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this message and the context in which it used.",
            documentation: function () {
            }
        }]
    }), CLASS({
        name: "StringProperty",
        extends: "Property",
        help: "Describes a properties of type String.",
        label: "Text",
        messages: [{
            name: "errorPatternMismatch",
            value: "The text does not match the pattern."
        }, {
            name: "errorBelowMinLength",
            value: "The text is too short. Minimum: $min$",
            placeholders: [{name: "min"}]
        }, {name: "errorAboveMaxLength", value: "The text is too long. Maximum: $max$", placeholders: [{name: "max"}]}],
        properties: [{
            name: "displayHeight",
            displayWidth: 8,
            defaultValue: 1,
            help: "The display height of the property."
        }, {
            name: "adapt", labels: ["javascript"], defaultValue: function (_, v) {
                return void 0 === v || null === v ? "" : "function" == typeof v ? multiline(v) : v.toString()
            }
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaType",
            displayWidth: 70,
            defaultValue: "String",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "String"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                var defaultValue = this.defaultValue || ""
                return '"' + defaultValue + '"'
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                var defaultValue = this.defaultValue || ""
                return '"' + defaultValue + '"'
            }
        }, {name: "view", labels: ["javascript"], defaultValue: "foam.ui.TextFieldView"}, {
            name: "swiftView",
            defaultValue: "FoamUITextField"
        }, {name: "pattern", help: "Regex pattern for property."}, {
            name: "minChars",
            label: "Minimum characters",
            help: "The minimum number of characters required.",
            adapt: function (old, nu) {
                return "" === nu ? "" : parseInt(nu)
            }
        }, {
            name: "maxChars",
            label: "Maximum characters",
            help: "The maximum number of characters allowed.",
            adapt: function (old, nu) {
                return "" === nu ? "" : parseInt(nu)
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}, {
            name: "validate", lazyFactory: function () {
                var prop = this, ret = constantFn(""), min = prop.minChars
                "" !== min && (ret = function (result) {
                    return result || (this[prop.name].length < min ? prop.ERROR_BELOW_MIN_LENGTH.replaceValues(null, {min: min}) : "")
                }.o(ret), ret.dependencies = [prop.name])
                var max = prop.maxChars
                "" !== max && (ret = function (result) {
                    return result || (this[prop.name].length > max ? prop.ERROR_ABOVE_MAX_LENGTH.replaceValues(null, {max: max}) : "")
                }.o(ret), ret.dependencies = [prop.name])
                var pattern = prop.pattern
                if (pattern) {
                    var testable = pattern.test ? pattern : new RegExp(pattern.toString(), "i"), errMsg = pattern.errorMessage ? pattern.errorMessage() : prop.errorPatternMismatch
                    ret = function (result) {
                        return result || (testable.test(this[prop.name]) ? "" : errMsg)
                    }.o(ret), ret.dependencies = [prop.name]
                }
                return ret
            }
        }]
    }), CLASS({
        name: "BooleanProperty",
        extends: "Property",
        help: "Describes a properties of type Boolean.",
        label: "True or false",
        properties: [{
            name: "swiftType",
            type: "String",
            displayWidth: 70,
            defaultValue: "Bool"
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeBool(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {
            name: "javaType",
            type: "String",
            displayWidth: 70,
            defaultValue: "boolean",
            help: "The Java type of this property."
        }, {name: "view", labels: ["javascript"], defaultValue: "foam.ui.BooleanView"}, {
            name: "swiftView",
            defaultValue: "FoamUISwitch"
        }, {
            name: "toPropertyE", labels: ["javascript"], defaultValue: function (X) {
                return X.lookup("foam.u2.tag.Checkbox").create(null, X)
            }
        }, ["defaultValue", !1], {
            name: "adapt", defaultValue: function (_, v) {
                return !!v
            }, labels: ["javascript"]
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}, {
            name: "fromString", labels: ["javascript"], defaultValue: function (s) {
                var txt = s.trim()
                return txt.equalsIC("y") || txt.equalsIC("yes") || txt.equalsIC("true") || txt.equalsIC("t")
            }, help: "Function to extract value from a String."
        }, {
            name: "fromMemento", labels: ["javascript"], defaultValue: function (mem) {
                return (!mem || "false" !== mem.toLowerCase() && "0" !== mem) && !!mem
            }
        }]
    }), CLASS({
        name: "DateProperty",
        extends: "Property",
        help: "Describes a properties of type Date.",
        label: "Date",
        properties: [["displayWidth", 50], {name: "swiftType", defaultValue: "Date?"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "javaType",
            defaultValue: "java.util.Date",
            help: "The Java type of this property."
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, ["view", "foam.ui.DateFieldView"], {
            name: "toPropertyE", labels: ["javascript"], defaultValue: function (X) {
                return X.lookup("foam.u2.DateView").create(null, X)
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}, {
            name: "adapt", defaultValue: function (_, d) {
                if ("number" == typeof d)return new Date(d)
                if ("string" == typeof d) {
                    var ret = new Date(d)
                    return "Invalid Date" === ret.toUTCString() ? new Date(+d) : ret
                }
                return d
            }
        }, ["tableFormatter", function (d) {
            return d ? d.toRelativeDateString() : ""
        }], ["compareProperty", function (o1, o2) {
            return o1 ? o2 ? o1.compareTo(o2) : 1 : o2 ? -1 : 0
        }]]
    }), CLASS({
        name: "DateTimeProperty",
        extends: "DateProperty",
        help: "Describes a properties of type DateTime.",
        label: "Date and time",
        properties: [["view", "foam.ui.DateTimeFieldView"], {
            name: "toPropertyE",
            labels: ["javascript"],
            defaultValue: function (X) {
                return X.lookup("foam.u2.md.DateTimeField").create(null, X)
            }
        }]
    }), CLASS({
        name: "NumericProperty_",
        extends: "Property",
        help: "Base model for a property of any numeric type.",
        messages: [{
            name: "errorBelowMinimum",
            value: "The value must be at least $min$.",
            placeholders: [{name: "min"}]
        }, {name: "errorAboveMaximum", value: "The value can be at most $max$.", placeholders: [{name: "max"}]}],
        properties: [{
            name: "minValue",
            label: "Minimum Value",
            required: !1,
            help: "The minimum value this property accepts.",
            defaultValue: "",
            adapt: function (old, nu) {
                return "" === nu ? "" : this.adapt(null, nu)
            }
        }, {
            name: "maxValue",
            label: "Maximum Value",
            required: !1,
            help: "The maximum value this property accepts.",
            defaultValue: "",
            adapt: function (old, nu) {
                return "" === nu ? "" : this.adapt(null, nu)
            }
        }, {
            name: "compareProperty", defaultValue: function (o1, o2) {
                return o1 === o2 ? 0 : o1 > o2 ? 1 : -1
            }, swiftDefaultValue: function () {
            }
        }, {
            name: "validate", lazyFactory: function () {
                var prop = this, ret = constantFn(""), min = prop.minValue
                "" !== min && (ret = function (result) {
                    return result || (this[prop.name] < min ? prop.ERROR_BELOW_MINIMUM.replaceValues(null, {min: min}) : "")
                }.o(ret), ret.dependencies = [prop.name])
                var max = prop.maxValue
                return "" !== max && (ret = function (result) {
                    return result || (this[prop.name] > max ? prop.ERROR_ABOVE_MAXIMUM.replaceValues(null, {max: max}) : "")
                }.o(ret), ret.dependencies = [prop.name]), ret
            }
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return "" + this.defaultValue
            }
        }]
    }), CLASS({
        name: "IntProperty",
        extends: "NumericProperty_",
        help: "Describes a properties of type Int.",
        label: "Round numbers",
        properties: [["displayWidth", 10], {
            name: "javaType",
            displayWidth: 10,
            defaultValue: "int",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "Int"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeInteger(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                return this.defaultValue + ""
            }
        }, {name: "view", labels: ["javascript"], defaultValue: "foam.ui.IntFieldView"}, {
            name: "swiftView",
            defaultValue: "FoamIntUITextField"
        }, {
            name: "adapt", labels: ["javascript"], defaultValue: function (_, v) {
                return "number" == typeof v ? Math.round(v) : v ? parseInt(v) : 0
            }
        }, ["defaultValue", 0], {
            name: "prototag",
            label: "Protobuf tag",
            required: !1,
            help: "The protobuf tag number for this field."
        }]
    }), CLASS({
        name: "LongProperty",
        extends: "IntProperty",
        help: "Describes a properties of type Long.",
        label: "Round long numbers",
        properties: [{name: "displayWidth", labels: ["javascript"], defaultValue: 12}, {
            name: "javaType",
            labels: ["javascript"],
            defaultValue: "long"
        }, {name: "swiftType", labels: ["compiletime", "swift"], defaultValue: "NSNumber"}, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }]
    }), CLASS({
        name: "FloatProperty",
        extends: "NumericProperty_",
        help: "Describes a properties of type Float.",
        label: "Decimal numbers",
        properties: [{name: "defaultValue", defaultValue: 0}, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                return "" + this.defaultValue
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                return "" + this.defaultValue
            }
        }, {
            name: "javaType",
            displayWidth: 10,
            defaultValue: "double",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "Float"}, {
            name: "swiftView",
            defaultValue: "FoamFloatUITextField"
        }, {name: "displayWidth", defaultValue: 15}, {
            name: "view",
            defaultValue: "foam.ui.FloatFieldView"
        }, {
            name: "adapt", defaultValue: function (_, v) {
                return "number" == typeof v ? v : v ? parseFloat(v) : 0
            }
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}]
    }), CLASS({
        name: "FunctionProperty",
        extends: "Property",
        help: "Describes a properties of type Function.",
        label: "Code that can be run",
        properties: [{
            name: "javaType",
            displayWidth: 10,
            defaultValue: "FoamFunction",
            help: "The Java type of this property."
        }, {name: "swiftType", defaultValue: "FoamFunction"}, {
            name: "swiftDefaultValue",
            defaultValue: "FoamFunction(fn: { (_) -> AnyObject? in return nil })"
        }, {name: "displayWidth", defaultValue: 15}, {
            name: "view",
            defaultValue: "foam.ui.FunctionView"
        }, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.FunctionView").create(void 0, X)
            }
        }, {
            name: "defaultValue", defaultValue: function () {
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                var txt = e.innerHTML.trim()
                this[p.name] = txt
            }
        }, {
            name: "adapt", defaultValue: function (_, value) {
                if ("string" == typeof value) {
                    var parse = JSONParser.parseString(value, JSONParser["function prototype"])
                    if (parse) {
                        var body = value.substring(value.indexOf("{") + 1, value.lastIndexOf("}"))
                        return new Function(parse[3], body)
                    }
                    return new Function(value)
                }
                return value
            }
        }]
    }), CLASS({
        name: "TemplateProperty",
        extends: "FunctionProperty",
        properties: [{
            name: "adapt", defaultValue: function (_, value) {
                return TemplateUtil.expandTemplate(this, value)
            }
        }, {
            name: "defaultValue", adapt: function (_, value) {
                return TemplateProperty.ADAPT.defaultValue.call(this, _, value)
            }
        }, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.MultiLineTextField").create(void 0, X)
            }
        }, {
            name: "install", defaultValue: function (prop) {
                defineLazyProperty(this, prop.name + "$f", function () {
                    var f = TemplateUtil.lazyCompile(this[prop.name])
                    return {
                        get: function () {
                            return f
                        }, configurable: !0
                    }
                })
            }
        }]
    }), CLASS({
        name: "ArrayProperty",
        extends: "Property",
        javaClassImports: ["java.util.List"],
        help: "Describes a property of type Array.",
        label: "List of items",
        properties: [{
            name: "swiftType", defaultValueFn: function () {
                return "[" + this.swiftSubType + "]"
            }
        }, {
            name: "swiftSubType", labels: ["compiletime", "swift"], defaultValueFn: function () {
                var type = this.subType || "FObject"
                return type.split(".").pop()
            }
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {name: "swiftFactory", defaultValue: "return [] as AnyObject?"}, {
            name: "singular",
            displayWidth: 70,
            defaultValueFn: function () {
                return this.name.replace(/s$/, "")
            },
            help: "The plural form of this model's name.",
            documentation: function () {
            }
        }, {
            name: "subType",
            displayWidth: 20,
            defaultValue: "",
            help: "The FOAM sub-type of this property."
        }, {
            name: "protobufType", defaultValueFn: function () {
                return this.subType
            }
        }, {
            name: "adapt", defaultValue: function (_, a, prop) {
                var m = prop.subType_ || (prop.subType_ = this.X.lookup(prop.subType) || GLOBAL.lookup(prop.subType))
                if (m)for (var i = 0; i < a.length; i++)m.isInstance(a[i]) || (a[i] = a[i].model_ ? FOAM(a[i]) : m.create(a[i]))
                return a
            }
        }, {
            name: "postSet", defaultValue: function (oldA, a, prop) {
                var name = prop.nameArrayRelay_ || (prop.nameArrayRelay_ = prop.name + "ArrayRelay_"), l = this[name] || (this[name] = function () {
                        this.propertyChange(prop.name, null, this[prop.name])
                    }.bind(this))
                oldA && oldA.unlisten && oldA.unlisten(l), a && a.listen && a.listen(l)
            }
        }, {
            name: "javaSubType", labels: ["compiletime", "java"], defaultValueFn: function () {
                return this.subType || "FObject"
            }
        }, {
            name: "javaType", displayWidth: 10, defaultValueFn: function (p) {
                return "java.util.List<" + this.javaSubType + ">"
            }, help: "The Java type of this property."
        }, {
            name: "javaLazyFactory", defaultValueFn: function (p) {
                return "return new java.util.ArrayList<" + this.javaSubType + ">();"
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, {name: "view", defaultValue: "foam.ui.ArrayView"}, {
            name: "factory", defaultValue: function () {
                return []
            }
        }, {
            name: "propertyToJSON", defaultValue: function (visitor, output, o) {
                !this.transient && o[this.name].length && (output[this.name] = visitor.visitArray(o[this.name]))
            }
        }, {
            name: "install", defaultValue: function (prop) {
                defineLazyProperty(this, prop.name + "$Proxy", function () {
                    var proxy = this.X.lookup("foam.dao.ProxyDAO").create({delegate: this[prop.name].dao})
                    return this.addPropertyListener(prop.name, function (_, __, ___, a) {
                        proxy.delegate = a.dao
                    }), {
                        get: function () {
                            return proxy
                        }, configurable: !0
                    }
                }), this.addMethod("get" + capitalize(prop.singular), function (id) {
                    for (var i = 0; i < this[prop.name].length; i++)if (this[prop.name][i].id === id)return this[prop.name][i]
                })
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                for (var model = this.X.lookup(e.getAttribute("model") || p.subType), children = e.children, a = [], i = 0; i < children.length; i++) {
                    var o = model.create(null, this.Y)
                    o.fromElement(children[i], p), a.push(o)
                }
                this[p.name] = a
            }
        }, {
            name: "prototag",
            label: "Protobuf tag",
            required: !1,
            help: "The protobuf tag number for this field."
        }, {
            name: "compareProperty", swiftDefaultValue: function () {
            }, javaDefaultValue: function () {
            }
        }, {
            name: "javaJsonParser", javaFactory: function () {
            }
        }]
    }), CLASS({
        name: "BlobProperty",
        extends: "Property",
        help: "A chunk of binary data.",
        label: "Binary data",
        properties: [{
            name: "type",
            type: "String",
            defaultValue: "Blob",
            help: "The FOAM type of this property."
        }, {name: "javaType", type: "String", defaultValue: "byte[]", help: "The Java type for this property."}]
    }), CLASS({
        name: "ReferenceProperty",
        extends: "Property",
        help: "A foreign key reference to another Entity.",
        label: "Reference to another object",
        properties: [{
            name: "subType",
            displayWidth: 20,
            defaultValue: "",
            help: "The FOAM sub-type of this property."
        }, {
            name: "subKey",
            displayWidth: 20,
            defaultValue: "ID",
            help: "The foreign key that this property references."
        }, {
            name: "javaType", displayWidth: 10, defaultValueFn: function () {
                return this.X.lookup(this.subType)[this.subKey].javaType
            }, help: "The Java type of this property."
        }, {name: "view", defaultValue: "foam.ui.TextFieldView"}, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.ReferenceView").create(null, X)
            }
        }, {name: "prototag", label: "Protobuf tag", required: !1, help: "The protobuf tag number for this field."}]
    }), CLASS({
        name: "StringArrayProperty",
        extends: "Property",
        javaClassImports: ["java.util.List"],
        help: "An array of String values.",
        label: "List of text strings",
        properties: [{name: "swiftType", defaultValue: "[String]"}, {
            name: "swiftFactory",
            defaultValue: "return [] as AnyObject"
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {name: "javaLazyFactory", defaultValue: "return new java.util.ArrayList<String>();"}, {
            name: "javaAdapt",
            defaultValue: function () {
            }
        }, {
            name: "singular", displayWidth: 70, defaultValueFn: function () {
                return this.name.replace(/s$/, "")
            }, help: "The plural form of this model's name.", documentation: function () {
            }
        }, {
            name: "subType",
            displayWidth: 20,
            defaultValue: "String",
            help: "The FOAM sub-type of this property."
        }, {name: "displayWidth", defaultValue: 50}, {
            name: "adapt", defaultValue: function (_, v) {
                return Array.isArray(v) ? v : v || 0 === v ? [v] : []
            }
        }, {
            name: "factory", defaultValue: function () {
                return []
            }
        }, {
            name: "javaType",
            displayWidth: 10,
            defaultValue: "java.util.List<String>",
            help: "The Java type of this property."
        }, {name: "view", defaultValue: "foam.ui.StringArrayView"}, {
            name: "prototag",
            label: "Protobuf tag",
            required: !1,
            help: "The protobuf tag number for this field."
        }, {name: "exclusive", defaultValue: !1}, {
            name: "fromString", defaultValue: function (s) {
                return s.split(",")
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                for (var val = [], name = p.singular || "item", i = 0; i < e.children.length; i++)e.children[i].nodeName === name && val.push(e.children[i].innerHTML)
                this[p.name] = val
            }
        }, {
            name: "toMemento", defaultValue: function (o, p) {
                return o.map(function (x) {
                    return x.replace(/,/g, "&#44;")
                }).join(",")
            }
        }, {
            name: "fromMemento", defaultValue: function (s, p) {
                return s ? s.split(",").map(function (x) {
                    return x.replace(/&#44;/g, ",")
                }) : void 0
            }
        }, {
            name: "compareProperty", swiftDefaultValue: function () {
            }, javaDefaultValue: function () {
            }
        }, {
            name: "javaJsonParser", javaFactory: function () {
            }
        }]
    }), CLASS({
        name: "ModelProperty",
        extends: "Property",
        help: "Describes a Model property.",
        label: "Data Model definition",
        properties: [{
            name: "getter", labels: ["javascript"], defaultValue: function (name) {
                var value = this.instance_[name]
                if ("undefined" == typeof value) {
                    var prop = this.model_.getProperty(name)
                    value = prop ? prop.lazyFactory ? this.instance_[prop.name] = prop.lazyFactory.call(this, prop) : prop.factory ? this.instance_[prop.name] = prop.factory.call(this, prop) : prop.defaultValueFn ? prop.defaultValueFn.call(this, prop) : void 0 !== typeof prop.defaultValue ? prop.defaultValue : "" : ""
                }
                if ("string" == typeof value) {
                    if (!value)return ""
                    var ret = this.X.lookup(value)
                    return ret
                }
                return Model.isInstance(value) ? value : ""
            }
        }, {
            name: "propertyToJSON", labels: ["javascript"], defaultValue: function (visitor, output, o) {
                this.transient || (output[this.name] = o[this.name].id)
            }
        }]
    }), CLASS({
        name: "ViewProperty",
        extends: "Property",
        help: "Describes a View-Factory property.",
        properties: [{
            name: "adapt",
            doc: "Can be specified as either a function, a Model, a Model path, or a JSON object.",
            defaultValue: function (_, f) {
                return "function" == typeof f ? f : "string" == typeof f ? function (d, opt_X) {
                    return (opt_X || this.X).lookup(f).create(d, opt_X || this.Y)
                }.bind(this) : "function" == typeof f.create ? f.create.bind(f) : "string" == typeof f.model_ ? function (d, opt_X) {
                    return FOAM(f, opt_X || this.Y).copyFrom(d)
                } : (console.error("******* Unknown view factory: ", f), f)
            }
        }, {
            name: "defaultValue", adapt: function (_, f) {
                return ViewProperty.ADAPT.defaultValue.call(this, null, f)
            }
        }]
    }), CLASS({
        name: "FactoryProperty", extends: "Property", help: "Describes a Factory property.", properties: [{
            name: "preSet",
            doc: "Can be specified as either a function, a Model, a Model path, or a JSON object.",
            defaultValue: function (_, f) {
                return f ? "function" == typeof f ? f : "string" == typeof f ? function (map, opt_X) {
                    return (opt_X || this.X).lookup(f).create(map, opt_X || this.Y)
                }.bind(this) : Model.isInstance(f) ? f.create.bind(f) : f.factory_ ? function (map, opt_X) {
                    var X = opt_X || this.X, m = X.lookup(f.factory_)
                    return console.assert(m, "Unknown Factory Model: " + f.factory_), m.create(f, opt_X || this.Y)
                }.bind(this) : (console.error("******* Invalid Factory: ", f), f) : f
            }
        }]
    }), CLASS({
        name: "ViewFactoryProperty",
        extends: "FactoryProperty",
        help: "Describes a View Factory property.",
        properties: [{
            name: "defaultValue", preSet: function (_, f) {
                return ViewFactoryProperty.ADAPT.defaultValue.call(this, null, f)
            }
        }, {
            name: "defaultValueFn", preSet: function (_, f) {
                var fp = function (prop) {
                    return ViewFactoryProperty.ADAPT.defaultValue.call(this, null, f.call(this, prop))
                }
                return fp.toString = function () {
                    return f.toString()
                }, fp
            }
        }, {
            name: "fromElement", defaultValue: function (e, p) {
                this[p.name] = e.innerHTML_ || (e.innerHTML_ = e.innerHTML)
            }
        }, {
            name: "adapt",
            doc: "Can be specified as either a function, String markup, a Model, a Model path, or a JSON object.",
            defaultValue: function (_, f) {
                if (!f)return f
                if ("function" == typeof f)return f
                var ret
                if ("string" == typeof f) {
                    if (/[^0-9a-zA-Z$_.]/.exec(f)) {
                        var VIEW_CACHE = ViewFactoryProperty.VIEW_CACHE || (ViewFactoryProperty.VIEW_CACHE = {}), viewModel = VIEW_CACHE[f]
                        viewModel || (viewModel = VIEW_CACHE[f] = Model.create({
                            name: "InnerDetailView" + this.$UID,
                            extends: "foam.ui.DetailView",
                            templates: [{name: "toHTML", template: f}]
                        }), viewModel.arequire()), ret = function (args, X) {
                            return viewModel.create(args, X || this.Y)
                        }
                    } else ret = function (map, opt_X) {
                        var model = (opt_X || this.X).lookup(f)
                        return console.assert(!!model, "Unknown model: " + f + " in " + this.name + " property"), model.create(map, opt_X || this.Y)
                    }.bind(this)
                    return ret.toString = function () {
                        return '"' + f + '"'
                    }, ret
                }
                return Model.isInstance(f) ? function (args, opt_X) {
                    return f.create(args, opt_X || this.Y)
                }.bind(this) : f.factory_ ? (ret = function (map, opt_X) {
                    var m = (opt_X || this.X).lookup(f.factory_)
                    return console.assert(m, "Unknown ViewFactory Model: " + f.factory_), m.create(f, opt_X || this.Y).copyFrom(map)
                }, ret.toString = function () {
                    return JSONUtil.compact.stringify(f)
                }, ret) : this.X.lookup("foam.ui.BaseView").isInstance(f) ? constantFn(f) : (console.error("******* Invalid Factory: ", f), f)
            }
        }]
    }), CLASS({
        name: "ReferenceArrayProperty",
        extends: "ReferenceProperty",
        properties: [{
            name: "factory", defaultValue: function () {
                return []
            }
        }, {
            name: "javaType", defaultValueFn: function () {
                return this.X.lookup(this.subType).ID.javaType + "[]"
            }
        }, {name: "view", defaultValue: "foam.ui.StringArrayView"}]
    }), CLASS({
        name: "EMailProperty",
        extends: "StringProperty",
        label: "Email address",
        properties: [["pattern", "^.+@.+$"]]
    }), CLASS({
        name: "ImageProperty",
        extends: "StringProperty",
        label: "Image data or link",
        properties: [{name: "view", labels: ["javascript"], defaultValue: "foam.ui.md.ImagePickerView"}]
    }), CLASS({
        name: "URLProperty",
        extends: "StringProperty",
        label: "Web link (URL or internet address)"
    }), CLASS({
        name: "ColorProperty",
        extends: "StringProperty",
        label: "Color",
        properties: [["view", "foam.ui.md.ColorFieldView"]]
    }), CLASS({
        name: "PasswordProperty",
        extends: "StringProperty",
        label: "Password that displays protected or hidden text",
        properties: [{name: "swiftView", defaultValue: "FoamPasswordUITextField"}]
    }), CLASS({
        name: "PhoneNumberProperty",
        extends: "StringProperty",
        label: "Phone number",
        properties: [["pattern", "^[0-9-+()* ]*$"]]
    }), DEBUG && CLASS({
        name: "DocumentationProperty",
        extends: "Property",
        help: "Describes the documentation properties found on Models, Properties, Actions, Methods, etc.",
        documentation: "The developer documentation for this $$DOC{ref:'.'}. Use a $$DOC{ref:'DocModelView'} to view documentation.",
        properties: [{
            name: "getter", labels: ["debug"], defaultValue: function (name) {
                var doc = this.instance_[name]
                return !doc || "undefined" == typeof Documentation || !Documentation || doc.model_ && doc.model_.getPrototype && Documentation.isInstance(doc) || (doc.body ? this.instance_[name] = Documentation.create(doc) : this.instance_[name] = Documentation.create({body: doc})), this.instance_[name]
            }
        }, {name: "view", defaultValue: "foam.ui.DetailView", labels: ["debug"]}, {
            name: "help",
            defaultValue: "Documentation for this entity.",
            labels: ["debug"]
        }, {
            name: "documentation", factory: function () {
                return "The developer documentation for this $$DOC{ref:'.'}. Use a $$DOC{ref:'DocModelView'} to view documentation."
            }, labels: ["debug"]
        }]
    }), CLASS({
        name: "ImportedProperty",
        extends: "Property",
        label: "A pseudo-property that does not clone its value.",
        properties: [["transient", !0], ["hidden", !0]],
        methods: [function deepCloneProperty(value, cloneArgs) {
            this.cloneProperty(value, cloneArgs)
        }, function cloneProperty(value, cloneArgs) {
            cloneArgs[this.name] = value
        }]
    }), CLASS({
        name: "EnumProperty",
        extends: "Property",
        properties: [{name: "enum", swiftType: "FoamEnum.Type"}, {
            name: "view",
            labels: ["javascript"],
            defaultValue: "foam.ui.EnumFieldView"
        }, {
            name: "swiftType", defaultValueFn: function () {
                return this.enum.split(".").pop()
            }
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`.value, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "swiftAdapt", defaultValue: function () {
            }
        }, {
            name: "javaAdapt", defaultValue: function () {
            }
        }, {
            name: "defaultValue", adapt: function (_, v) {
                if ("string" == typeof v && X.lookup(this.enum)) {
                    var e = X.lookup(this.enum)
                    return e[e[v]]
                }
                return v
            }
        }, {
            name: "swiftDefaultValue", defaultValueFn: function () {
                if ("string" == typeof this.defaultValue && (this.defaultValue = this.defaultValue), this.defaultValue && this.defaultValue.name)return this.enum.split(".").pop() + "." + this.defaultValue.name
            }
        }, {
            name: "javaDefaultValue", defaultValueFn: function () {
                if ("string" == typeof this.defaultValue && (this.defaultValue = this.defaultValue), this.defaultValue && this.defaultValue.name)return this.enum + "." + this.defaultValue.name
            }
        }, {
            name: "javaType", defaultValueFn: function () {
                return this.enum
            }
        }, {
            name: "toPropertyE", defaultValue: function (X) {
                return X.lookup("foam.u2.EnumView").create(null, X)
            }
        }, {name: "swiftView", defaultValue: "FoamEnumUILabel"}]
    }), CLASS({
        name: "FObjectProperty",
        extends: "Property",
        help: "Describes a properties of type FObject.",
        label: "FObject",
        properties: [{
            name: "javaType", defaultValueFn: function () {
                return this.subType || "FObject"
            }
        }, {
            name: "swiftType", defaultValueFn: function () {
                return this.subType ? this.subType.split(".").pop() : "FObject"
            }
        }, {
            name: "swiftNSCoderEncode",
            defaultValue: 'aCoder.encode(`<%= this.name %>`, forKey: "<%= this.name %>")'
        }, {
            name: "swiftNSCoderDecode",
            defaultValue: '_ = set("<%= this.name %>", value: aDecoder.decodeObject(forKey: "<%= this.name %>") as AnyObject?)'
        }, {
            name: "compareProperty", swiftDefaultValue: function () {
            }
        }]
    }), CLASS({
        name: "Template",
        tableProperties: ["name", "description"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The template's unique name.",
            documentation: function () {
            }
        }, {
            name: "description",
            type: "String",
            labels: ["javascript"],
            required: !0,
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "The template's description.",
            documentation: "A human readable description of the $$DOC{ref:'.'}."
        }, {
            type: "Array",
            name: "args",
            type: "Array[Arg]",
            subType: "Arg",
            view: "foam.ui.ArrayView",
            factory: function () {
                return []
            },
            help: "Method arguments.",
            documentation: function () {
            }
        }, {
            name: "template",
            type: "String",
            displayWidth: 180,
            displayHeight: 30,
            defaultValue: "",
            view: "foam.ui.TextAreaView",
            help: "Template text. <%= expr %> or <% out(...); %>",
            documentation: "The string content of the uncompiled $$DOC{ref:'Template'} body."
        }, {name: "path"}, {name: "futureTemplate", transient: !0}, {
            name: "code",
            transient: !0
        }, {type: "Documentation", name: "documentation", labels: ["debug"]}, {
            name: "language",
            type: "String",
            lazyFactory: function () {
                return "CSS" === this.name ? "css" : "html"
            }
        }, {name: "labels"}],
        methods: [function toE(X) {
            return X.data[this.name]()
        }]
    }), CLASS({
        name: "Action",
        plural: "Actions",
        tableProperties: ["name", "label"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the action.",
            documentation: function () {
            }
        }, {
            name: "label", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
                return labelize(this.name)
            }, help: "The display label for the action.", documentation: function () {
            }
        }, {
            name: "speechLabel",
            type: "String",
            displayWidth: 70,
            displayHeight: 1,
            defaultValueFn: function () {
                return this.label
            },
            help: "The speech label for the action.",
            documentation: "A speakable label for the $$DOC{ref:'.'}. Used for accessibility."
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            help: "Help text associated with the action.",
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["documentation"]
        }, {
            name: "default",
            type: "Boolean",
            view: "foam.ui.BooleanView",
            defaultValue: !1,
            help: "Indicates if this is the default action.",
            documentation: function () {
            }
        }, {
            type: "Function",
            name: "isAvailable",
            label: "Available",
            displayWidth: 70,
            displayHeight: 3,
            defaultValue: function () {
                return !0
            },
            help: "Function to determine if action is available.",
            documentation: function () {
            }
        }, {
            type: "Function",
            name: "isEnabled",
            label: "Enabled",
            displayWidth: 70,
            displayHeight: 3,
            defaultValue: function () {
                return !0
            },
            help: "Function to determine if action is enabled.",
            documentation: function () {
            }
        }, {
            type: "Function", name: "labelFn", label: "Label Function", defaultValue: function (action) {
                return action.label
            }, help: "Function to determine label. Defaults to 'this.label'.", documentation: function () {
            }
        }, {
            name: "iconUrl",
            type: "String",
            defaultValue: void 0,
            help: "Provides a url for an icon to render for this action",
            documentation: function () {
            }
        }, {
            type: "Function", name: "iconUrlFn", label: "Label Function", defaultValue: function (action) {
                return action.iconUrl
            }, help: "Function to determine iconUrl. Defaults to 'this.iconUrl'.", documentation: function () {
            }
        }, {
            name: "ligature",
            type: "String",
            defaultValue: void 0,
            help: "Provides a ligature for font-based icons for this action",
            documentation: function () {
            }
        }, {
            name: "showLabel",
            type: "String",
            defaultValue: !0,
            help: "Property indicating whether the label should be rendered alongside the icon",
            documentation: function () {
            }
        }, {
            name: "children",
            type: "Array",
            factory: function () {
                return []
            },
            subType: "Action",
            view: "foam.ui.ArrayView",
            help: "Child actions of this action.",
            documentation: function () {
            }
        }, {
            name: "parent", type: "String", help: "The parent action of this action", documentation: function () {
            }
        }, {
            type: "Function",
            name: "code",
            displayWidth: 80,
            displayHeight: 20,
            defaultValue: "",
            help: "Function to implement action.",
            documentation: function () {
            }
        }, {
            type: "Function",
            name: "action",
            displayWidth: 80,
            displayHeight: 20,
            defaultValue: "",
            getter: function () {
                return console.log("deprecated use of Action.action"), this.code
            },
            setter: function (code) {
                return console.log("deprecated use of Action.action"), this.code = code
            }
        }, {
            type: "StringArray", name: "keyboardShortcuts", documentation: function () {
            }
        }, {
            name: "translationHint",
            label: "Description for Translation",
            type: "String",
            defaultValue: ""
        }, {
            name: "priority",
            type: "Int",
            defaultValue: 5,
            help: "Measure of importance of showing this action to the user when it is rendered in a list.",
            documentation: function () {
            }
        }, {
            name: "order",
            type: "Float",
            defaultValue: 5,
            help: "Indication of where this action should appear in an ordered list of actions.",
            documentation: function () {
            }
        }, {type: "String", name: "swiftCode", labels: ["swift"]}, {
            model_: "TemplateProperty",
            name: "swiftSource",
            labels: ["swift"],
            defaultValue: function () {
            }
        }],
        methods: [function toE(X) {
            return console.assert(X, "X required for Action.toE()."), X.lookup("foam.u2.ActionButton").create({
                data: X.data,
                action: this
            }, X)
        }, function maybeCall(X, that) {
            return !(!this.isAvailable.call(that, this) || !this.isEnabled.call(that, this)) && (this.code.call(that, X, this), that.publish(["action", this.name], this), !0)
        }]
    }), CLASS({
        name: "Arg",
        tableProperties: ["type", "name", "description"],
        documentation: function () {
        },
        properties: [{
            name: "type",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "Object",
            labels: ["debug"],
            help: "The type of this argument.",
            documentation: function () {
            }
        }, {
            name: "javaType",
            type: "String",
            required: !1,
            defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().javaType
            },
            help: "The java type that represents the type of this property.",
            labels: ["java", "compiletime"],
            documentation: function () {
            }
        }, {
            name: "javaDefaultValue",
            type: "String",
            required: !1,
            labels: ["java", "compiletime"]
        }, {
            name: "javascriptType",
            type: "String",
            required: !1,
            defaultValueFn: function () {
                return this.type
            },
            help: "The javascript type that represents the type of this property.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            name: "swiftType", type: "String", labels: ["swift", "compiletime"], defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().swiftType
            }
        }, {
            type: "String", name: "swiftName", labels: ["swift", "compiletime"], defaultValueFn: function () {
                return this.name
            }
        }, {
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the entity.",
            documentation: function () {
            }
        }, {
            type: "Boolean", name: "required", defaultValue: !0, labels: ["debug"], documentation: function () {
            }
        }, {
            name: "defaultValue",
            help: "Default Value if not required and not provided.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            name: "description",
            type: "String",
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this argument.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            help: "Help text associated with the entity.",
            labels: ["debug"],
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["debug"]
        }],
        methods: {
            decorateFunction: function (f, i) {
                if ("Object" === this.type)return f
                var type = this.type
                return this.required ? function () {
                    return console.assert(void 0 !== arguments[i], "Missing required argument# " + i), console.assert(typeof arguments[i] === type, "argument# " + i + " type expected to be " + type + ", but was " + typeof arguments[i] + ": " + arguments[i]), f.apply(this, arguments)
                } : function () {
                    return console.assert(void 0 === arguments[i] || typeof arguments[i] === type, "argument# " + i + " type expected to be " + type + ", but was " + typeof arguments[i] + ": " + arguments[i]), f.apply(this, arguments)
                }
            }
        },
        templates: [{
            model_: "Template",
            name: "javaSource",
            description: "Java Source",
            template: "<%= this.javaType %> <%= this.name %>",
            labels: ["debug"]
        }, {
            model_: "Template",
            name: "closureSource",
            description: "Closure JavaScript Source",
            template: "@param {<%= this.javascriptType %>} <%= this.name %> .",
            labels: ["debug"]
        }, {
            model_: "Template",
            name: "webIdl",
            description: "Web IDL Source",
            template: "<%= this.type %> <%= this.name %>",
            labels: ["debug"]
        }]
    }), CLASS({
        name: "Constant",
        plural: "constants",
        tableProperties: ["name", "value", "description"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the entity.",
            documentation: function () {
            }
        }, {type: "String", name: "units"}, {
            type: "String", labels: ["swift"], name: "swiftType", defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().swiftType
            }
        }, {
            type: "String", labels: ["swift"], name: "swiftValue", defaultValueFn: function () {
                if (this.type) {
                    var type = X.lookup(this.type + "Property")
                    if (type)return type = type.create(), type.defaultValue = this.value, type.swiftDefaultValue
                }
            }
        }, {
            type: "String", labels: ["java"], name: "javaType", defaultValueFn: function () {
                var type = X.lookup(this.type + "Property")
                if (type)return type.create().javaType
            }
        }, {
            type: "String", labels: ["java"], name: "javaValue", defaultValueFn: function () {
                if (this.type) {
                    var type = X.lookup(this.type + "Property")
                    if (type)return type = type.create(), type.defaultValue = this.value, type.javaDefaultValue
                }
            }
        }, {
            name: "description",
            type: "String",
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this method.",
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["debug"]
        }, {name: "value", help: "The value of the constant."}, {
            name: "type",
            defaultValue: "",
            help: "Type of the constant."
        }, {name: "translationHint", label: "Description for Translation", type: "String", defaultValue: ""}]
    }), CLASS({
        name: "Method",
        plural: "Methods",
        tableProperties: ["name", "description"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The coding identifier for the entity.",
            documentation: function () {
            }
        }, {
            name: "description",
            type: "String",
            labels: ["javascript"],
            displayWidth: 70,
            displayHeight: 1,
            defaultValue: "",
            help: "A brief description of this method.",
            documentation: function () {
            }
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            labels: ["debug"],
            help: "Help text associated with the entity.",
            documentation: function () {
            }
        }, {
            type: "Documentation",
            name: "documentation",
            documentation: "The developer documentation.",
            labels: ["debug"]
        }, {
            name: "code",
            type: "Function",
            displayWidth: 80,
            displayHeight: 30,
            view: "foam.ui.FunctionView",
            help: "Javascript code to implement this method.",
            postSet: function () {
                if (_DOC_) {
                    var multilineComment = /^\s*function\s*\([\$\s\w\,]*?\)\s*{\s*\/\*([\s\S]*?)\*\/[\s\S]*$|^\s*\/\*([\s\S]*?)\*\/([\s\S]*)/.exec(this.code.toString())
                    if (multilineComment) {
                        var bodyFn = multilineComment[1]
                        this.documentation = this.Y.Documentation.create({name: this.name, body: bodyFn})
                    }
                }
            },
            documentation: function () {
            }
        }, {
            name: "returnType", defaultValue: "", help: "Return type.", documentation: function () {
            }, labels: ["debug"]
        }, {
            name: "javaReturnType", labels: ["java"], defaultValueFn: function () {
                if (!this.returnType)return "void"
                var type = X.lookup(this.returnType + "Property")
                if (type)return type.create().javaType
            }
        }, {
            name: "swiftReturnType", labels: ["swift"], defaultValueFn: function () {
                if (!this.returnType)return "Void"
                var type = X.lookup(this.returnType + "Property")
                if (type)return type.create().swiftType
            }
        }, {
            type: "Boolean", name: "returnTypeRequired", defaultValue: !0, documentation: function () {
            }, labels: ["debug"]
        }, {
            type: "Array",
            name: "args",
            type: "Array[Arg]",
            subType: "Arg",
            view: "foam.ui.ArrayView",
            factory: function () {
                return []
            },
            help: "Method arguments.",
            documentation: function () {
            },
            labels: ["debug"],
            adapt: function (_, n) {
                return n.forEach(function (arg, i) {
                    n[i] = Arg.create(arg)
                }.bind(this)), n
            }
        }, {
            name: "whenIdle",
            help: "Should this listener be deferred until the system is idle (ie. not running any animations).",
            documentation: function () {
            }
        }, {
            name: "isMerged", help: "As a listener, should this be merged?", documentation: function () {
            }
        }, {
            type: "Boolean",
            name: "isFramed",
            help: "As a listener, should this be animated?",
            defaultValue: !1,
            documentation: function () {
            }
        }, {type: "Boolean", name: "isStatic", labels: ["java", "swift"]}, {name: "labels"}, {
            type: "String",
            name: "swiftCode",
            labels: ["swift"]
        }, {type: "String", name: "javaCode", labels: ["java"]}, {
            model_: "TemplateProperty",
            name: "swiftSource",
            labels: ["swift"],
            defaultValue: function () {
            }
        }, {
            model_: "TemplateProperty", name: "javaSource", labels: ["java"], defaultValue: function () {
            }
        }],
        methods: [function toE(X) {
            return X.data[this.name]()
        }],
        templates: [{
            model_: "Template",
            name: "closureSource",
            description: "Closure JavaScript Source",
            template: "/**\n<% for ( var i = 0; i < this.args.length ; i++ ) { var arg = this.args[i]; %> * <%= arg.closureSource() %>\n<% } %><% if (this.returnType) { %> * @return {<%= this.returnType %>} .\n<% } %> */\n<%= arguments[1] %>.prototype.<%= this.name %> = goog.abstractMethod;"
        }, {
            model_: "Template",
            name: "webIdl",
            description: "Web IDL Source",
            template: "<%= this.returnType || 'void' %> <%= this.name %>(<% for ( var i = 0 ; i < this.args.length ; i++ ) { var arg = this.args[i]; %><%= arg.webIdl() %><% if ( i < this.args.length-1 ) out(\", \"); %><% } %>)"
        }]
    }), Method.getPrototype().decorateFunction = function (f) {
        for (var i = 0; i < this.args.length; i++) {
            var arg = this.args[i]
            f = arg.decorateFunction(f, i)
        }
        var returnType = this.returnType
        return returnType ? function () {
            var ret = f.apply(this, arguments)
            return console.assert(typeof ret === returnType, "return type expected to be " + returnType + ", but was " + typeof ret + ": " + ret), ret
        } : f
    }, Method.getPrototype().generateFunction = function () {
        var f = this.code
        return DEBUG ? this.decorateFunction(f) : f
    }, Method.methods = {
        decorateFunction: Method.getPrototype().decorateFunction,
        generateFunction: Method.getPrototype().generateFunction
    }, CLASS({
        name: "Documentation",
        tableProperties: ["name"],
        documentation: function () {
        },
        properties: [{
            name: "name",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "documentation",
            help: "The Document's unique name.",
            documentation: "An optional name for the document. Documentation is normally referenced by the name of the containing Model."
        }, {
            name: "label",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            help: "The Document's title or descriptive label.",
            documentation: "A human readable title to display. Used for books of documentation and chapters."
        }, {
            name: "body",
            type: "Template",
            defaultValue: "",
            help: "The main content of the document.",
            documentation: "The main body text of the document. Any valid template can be used, including the $$DOC{ref:'foam.documentation.DocView'} specific $$DOC{ref:'foam.documentation.DocView',text:'$$DOC{\"ref\"}'} tag.",
            preSet: function (_, template) {
                return TemplateUtil.expandTemplate(this, template)
            }
        }, {
            type: "Array",
            name: "chapters",
            type: "Array[Document]",
            subtype: "Documentation",
            view: "foam.ui.ArrayView",
            factory: function () {
                return []
            },
            help: "Sub-documents comprising the full body of this document.",
            documentation: "Optional sub-documents to be included in this document. A viewer may choose to provide an index or a table of contents.",
            labels: ["debug"],
            preSet: function (old, nu) {
                if (!_DOC_)return []
                var self = this, foamalized = []
                return nu.forEach(function (chapter) {
                    !chapter || "undefined" == typeof self.Y.Documentation || !self.Y.Documentation || chapter.model_ && chapter.model_.getPrototype && self.Y.Documentation.isInstance(chapter) ? foamalized.push(chapter) : chapter.body ? foamalized.push(self.Y.Documentation.create(chapter)) : foamalized.push(self.Y.Documentation.create({body: chapter}))
                }), foamalized
            }
        }]
    }), CLASS({
        name: "Relationship",
        tableProperties: ["name", "label", "relatedModel", "relatedProperty"],
        documentation: function () {
        },
        properties: [{
            name: "name", type: "String", displayWidth: 30, displayHeight: 1, defaultValueFn: function () {
                return GLOBAL[this.relatedModel] ? GLOBAL[this.relatedModel].plural : ""
            }, documentation: function () {
            }, help: "The coding identifier for the relationship."
        }, {
            name: "label", type: "String", displayWidth: 70, displayHeight: 1, defaultValueFn: function () {
                return this.name.labelize()
            }, documentation: function () {
            }, help: "The display label for the relationship."
        }, {
            name: "help",
            label: "Help Text",
            type: "String",
            displayWidth: 70,
            displayHeight: 6,
            defaultValue: "",
            documentation: function () {
            },
            help: "Help text associated with the relationship."
        }, {
            type: "Documentation", name: "documentation", documentation: function () {
            }
        }, {
            name: "relatedModel",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            documentation: function () {
            },
            help: "The name of the related Model."
        }, {
            name: "destinationModel",
            type: "String",
            required: !1,
            displayWidth: 30,
            displayHeight: 1
        }, {
            name: "destinationProperty",
            type: "String",
            required: !1,
            displayWidth: 30,
            displayHeight: 1
        }, {
            name: "relatedProperty",
            type: "String",
            required: !0,
            displayWidth: 30,
            displayHeight: 1,
            defaultValue: "",
            documentation: function () {
            },
            help: "The join property of the related Model."
        }, {
            name: "toRelationshipE", labels: ["javascript"], defaultValue: function toRelationshipE(X) {
                return X.lookup("foam.u2.DAOController").create(null, X)
            }, adapt: function (_, nu) {
                return "string" == typeof nu ? function (X) {
                    return X.lookup(nu).create(null, X)
                } : nu
            }
        }],
        methods: [function toE(X) {
            return X.lookup("foam.u2.RelationshipView").create({relationship: this, view: this.toRelationshipE(X)}, X)
        }]
    }), function () {
        for (var i = 0; i < Model.templates.length; i++)Model.templates[i] = JSONUtil.mapToObj(X, Model.templates[i])
        Model.properties = Model.properties, delete Model.instance_.prototype_, Model = Model.create(Model)
    }(), recopyModelFeatures(Property), recopyModelFeatures(Model), recopyModelFeatures(Method), recopyModelFeatures(Action), recopyModelFeatures(Template), DEBUG)for (var id in UNUSED_MODELS)USED_MODELS[id] && recopyModelFeatures(GLOBAL.lookup(id))
USED_MODELS.Model = !0, CLASS({
    package: "foam.ui",
    name: "Window",
    exports: ["performance", "$$", "$", "addStyle", "animate", "cancelAnimationFrame", "clearInterval", "clearTimeout", "console", "document", "framed", "dynamic", "dynamicFn", "dynamic2", "dynamic3", "error", "info", "installedModels", "log", "requestAnimationFrame", "setInterval", "setTimeout", "warn", "window", "writeView", "as FOAMWindow"],
    properties: [{
        name: "registeredModels", factory: function () {
            return {}
        }
    }, {type: "String", name: "name", defaultValue: "window"}, {
        name: "window", postSet: function (_, w) {
            this.X.subDocument && this.X.subDocument(w.document), w.X = this.Y, this.document = w.document, this.performance = w.performance
        }
    }, {name: "document"}, {name: "performance"}, {
        name: "installedModels",
        documentation: "Each new Window context introduces a new document and resets installedModels so models will install again in the new document.",
        factory: function () {
            return {}
        }
    }, {
        name: "installedStyles", factory: function () {
            return {}
        }
    }, {type: "Boolean", name: "isBackground", defaultValue: !1}, {
        name: "console", lazyFactory: function () {
            return this.window.console
        }
    }],
    methods: {
        addStyle: function (obj) {
            var id = obj.model_.id
            if (!this.installedStyles[id]) {
                this.installedStyles[id] = !0
                var css = obj.CSS() + "\n\n/*# sourceURL=" + id.replace(/\./g, "/") + ".CSS */\n"
                if (this.document && this.document.createElement) {
                    var s = this.document.createElement("style")
                    s.innerHTML = css, this.document.head.insertBefore(s, this.document.head.firstElementChild)
                }
            }
        }, log: function () {
            this.console.log.apply(this.console, arguments)
        }, warn: function () {
            this.console.warn.apply(this.console, arguments)
        }, info: function () {
            this.console.info.apply(this.console, arguments)
        }, error: function () {
            this.console.error.apply(this.console, arguments)
        }, $: function (id) {
            return this.document.FOAM_OBJECTS && this.document.FOAM_OBJECTS[id] ? this.document.FOAM_OBJECTS[id] : this.document.getElementById(id)
        }, $$: function (cls) {
            return this.document.getElementsByClassName(cls)
        }, framed: function (listener) {
            return EventService.framed(listener, this)
        }, dynamic: function (fn) {
            return 1 == arguments.length ? FunctionValue.create({valueFactory: fn}, this) : OrValue.create({
                valueFactory: fn,
                values: Array.prototype.splice.call(arguments, 1)
            }, this)
        }, dynamicFn: function (fn, opt_fn) {
            return Events.dynamicFn(fn, opt_fn, this.Y)
        }, dynamic2: function (fn) {
            var listener = this.framed(fn), propertyValues = []
            fn(), Events.onGet.push(function (obj, name, value) {
                if (arguments.callee.caller.caller !== fn)return console.log("false alarm ", fn.toString()), void 0
                var value = obj.propertyValue(name)
                value.addListener(listener), propertyValues.push(value)
            })
            var ret = fn()
            Events.onGet.pop()
            var f = function () {
                propertyValues.forEach(function (p) {
                    p.removeListener(listener)
                })
            }
            return f.destroy = f, f
        }, dynamic3: function (obj, fn, opt_ret) {
            for (var values = fn.dependencies.map(function (name) {
                return obj.propertyValue(name)
            }), listener = this.framed(function () {
                var ret = fn.call(obj)
                opt_ret && opt_ret(ret)
            }), i = 0; i < values.length; i++)values[i].addListener(listener)
            var f = function () {
                for (var i = 0; i < values.length; i++)values[i].removeListener(listener)
            }
            return f.destroy = f, f
        }, animate: function (duration, fn, opt_interp, opt_onEnd) {
            return Movement.animate(duration, fn, opt_interp, opt_onEnd, this.Y)
        }, setTimeout: function (f, t) {
            return this.window.setTimeout.apply(this.window, arguments)
        }, clearTimeout: function (id) {
            this.window.clearTimeout(id)
        }, setInterval: function (f, t) {
            return this.window.setInterval.apply(this.window, arguments)
        }, clearInterval: function (id) {
            this.window.clearInterval(id)
        }, requestAnimationFrame: function (f) {
            return this.isBackground ? this.setTimeout(f, 16) : (console.assert(this.window.requestAnimationFrame, "requestAnimationFrame not defined"), this.window.requestAnimationFrame(f))
        }, cancelAnimationFrame: function (id) {
            return this.isBackground ? (this.clearTimeout(id), void 0) : (this.window.cancelAnimationFrame && this.window.cancelAnimationFrame(id), void 0)
        }, writeView: function (view, opt_X) {
            var document = (opt_X || this).document, html = view.toHTML()
            document.body.insertAdjacentHTML("beforeend", html), view.initHTML()
        }
    }
}), function () {
    var w = foam.ui.Window.create({window: window, name: "DEFAULT WINDOW", isBackground: "object" == typeof process}, X)
    FObject.X = X = w.Y
}(), CLASS({
    name: "SimpleValue",
    properties: [{name: "value"}],
    constants: {__isValue__: !0},
    methods: [function init(value) {
        this.value = value || ""
    }, function get() {
        return this.value
    }, function set(val) {
        this.value = val
    }, function toString() {
        return "SimpleValue(" + this.value + ")"
    }, function follow(srcValue) {
        Events.follow(srcValue, this)
    }]
}), CLASS({
    name: "FunctionValue", extends: "SimpleValue", properties: [{
        name: "values", factory: function () {
            return []
        }
    }, {name: "valueFactory"}], methods: [function init() {
        this.SUPER(), this.valueFactory()
        var f = this.valueFactory
        this.startRecordingDependencies(), this.value = f(), this.endRecordingDependencies()
        for (var i = 0; i < this.values.length; i++)this.values[i].addListener(this.onSubValueChange)
    }, function destroy() {
        for (var i = 0; i < this.values.length; i++)this.values[i].removeListener(this.onSubValueChange)
    }, function startRecordingDependencies() {
        var values = this.values, onSubValueChange = this.onSubValueChange
        Events.onGet.push(function (obj, name, value) {
            var l = obj.propertyValue(name)
            values.indexOf(l) == -1 && (values.push(l), l.addListener(onSubValueChange))
        })
    }, function endRecordingDependencies() {
        Events.onGet.pop()
    }, function get() {
        return this.value
    }, function set(val) {
    }, function toString() {
        return "FunctionValue(" + this.value + ")"
    }], listeners: [function onSubValueChange_() {
        this.value = this.valueFactory()
    }, {
        name: "onSubValueChange", isFramed: !0, code: function () {
            this.onSubValueChange_()
        }
    }]
}), CLASS({
    name: "OrValue",
    extends: "SimpleValue",
    properties: [{name: "values"}, {
        name: "valueFactory", defaultValue: function () {
            return arguments
        }
    }],
    methods: [function init() {
        this.SUPER()
        for (var i = 0; i < this.values.length; i++)this.values[i].addListener(this.onSubValueChange)
        this.onSubValueChange_()
    }, function destroy() {
        for (var i = 0; i < this.values.length; i++)this.values[i].removeListener(this.onSubValueChange)
    }, function get() {
        return this.value
    }, function set(val) {
    }, function toString() {
        return "OrValue(" + this.value + ")"
    }],
    listeners: [function onSubValueChange_() {
        for (var args = new Array(this.values.length), i = 0; i < this.values.length; i++)args[i] = this.values[i].get()
        this.value = this.valueFactory.apply(this, args)
    }, {
        name: "onSubValueChange", isFramed: !0, code: function () {
            this.onSubValueChange_()
        }
    }]
}), CLASS({
    name: "SimpleReadOnlyValue",
    extends: "SimpleValue",
    documentation: "A simple value that can only be set during initialization.",
    properties: [{
        name: "value", preSet: function (old, nu) {
            return "undefined" == typeof this.instance_.value ? nu : old
        }
    }],
    methods: {
        set: function (val) {
            "undefined" == typeof this.instance_.value && this.SUPER(val)
        }, toString: function () {
            return "SimpleReadOnlyValue(" + this.value + ")"
        }
    }
})
var DOM = {
    init: function (X) {
        X.document.FOAM_OBJECTS || (X.document.FOAM_OBJECTS = {})
        for (var fs = X.document.querySelectorAll("foam"), models = [], i = 0; i < fs.length; i++) {
            var e = fs[i]
            X.lookup(e.getAttribute("view")), X.lookup(e.getAttribute("model")), e.getAttribute("view") && models.push(X.arequire(e.getAttribute("view"))), e.getAttribute("model") && models.push(X.arequire(e.getAttribute("model")))
        }
        for (var key in USED_MODELS)models.push(X.arequire(key))
        atime("DOMInit", aseq(apar.apply(null, models), function (ret) {
            for (var i = 0; i < fs.length; i++) {
                for (var e = fs[i], node = e, body = X.document.body; node && node !== body;)node = node.parentNode
                node && (this.initElement(e, X, X.document), e.innerHTML = ""), ret()
            }
        }.bind(this)))()
    }, initElementChildren: function (e, X) {
        for (var a = [], i = 0; i < e.children.length; i++) {
            var c = e.children[i]
            "FOAM" === c.tagName && a.push(DOM.initElement(c, X))
        }
        return a
    }, initElement: function (e, X, opt_document) {
        X.arequire("foam.ui.FoamTagView")(function (t) {
            foam.ui.FoamTagView.create({element: e}, X)
        })
    }, setClass: function (e, className, opt_enabled) {
        var oldClassName = e.className || "", enabled = void 0 === opt_enabled || opt_enabled
        e.className = oldClassName.replace(" " + className, "").replace(className, ""), enabled && (e.className = e.className + " " + className)
    }
}
window && window.addEventListener && window.addEventListener("load", function () {
    DOM.init(X)
}, !1)
var DomValue = {
    DEFAULT_EVENT: "change",
    DEFAULT_PROPERTY: "value",
    __isValue__: !0,
    create: function (element, opt_event, opt_property) {
        if (!element)throw"Missing Element in DomValue"
        return {
            __proto__: this,
            element: element,
            event: opt_event || this.DEFAULT_EVENT,
            property: opt_property || this.DEFAULT_PROPERTY
        }
    },
    setElement: function (element) {
        this.element = element
    },
    get: function () {
        return this.element[this.property]
    },
    set: function (value) {
        this.element[this.property] !== value && (this.element[this.property] = value)
    },
    addListener: function (listener) {
        if (this.event)try {
            this.element.addEventListener(this.event, listener, !1)
        } catch (x) {
        }
    },
    removeListener: function (listener) {
        if (this.event)try {
            this.element.removeEventListener(this.event, listener, !1)
        } catch (x) {
        }
    },
    toString: function () {
        return "DomValue(" + this.event + ", " + this.property + ")"
    }
}
CLASS({
    name: "DOMValue",
    constants: {__isValue__: !0},
    properties: [{name: "element", required: !0}, {name: "property", defaultValue: "value"}, {
        name: "event",
        defaultValue: "change"
    }, {
        name: "value", postSet: function (_, value) {
            this.element[this.property] = value
        }
    }, {name: "firstListener_", defaultValue: !0}],
    methods: {
        init: function () {
            this.SUPER(), this.value = this.element[this.property]
        }, get: function () {
            return this.value
        }, set: function (value) {
            this.value = value
        }, addListener: function (listener) {
            this.firstListener_ && (this.event && this.element.addEventListener(this.event, function () {
            }, !1), this.firstListener_ = !1), this.value$.addListener(listener)
        }, removeListener: function (listener) {
            this.value$.removeListener(listener)
        }, toString: function () {
            return "DOMValue(" + this.event + ", " + this.property + ")"
        }
    }
})
var __element_map__ = {INPUT: "foam.u2.tag.Input", TEXTAREA: "foam.u2.tag.TextArea", SELECT: "foam.u2.tag.Select"}
X.__element_map__ = __element_map__, X.elementForName = elementForName, X.elementForFeature = elementForFeature, X.registerE = registerE, X.E = E, X.start = start, CLASS({
    package: "foam.ui",
    name: "FoamTagView",
    extends: "foam.ui.View",
    requires: ["foam.html.Element", "foam.ui.View", "foam.ui.DetailView"],
    imports: ["document"],
    properties: [{name: "element"}, {name: "className", defaultValue: "foam-tag"}],
    methods: {
        init: function () {
            this.SUPER(), this.Element.isInstance(this.element) || this.install()
        }, install: function () {
            var e = this.element, models = [], style = e.getAttribute("style"), modelName = e.getAttribute("model"), viewName = e.getAttribute("view"), onInit = e.getAttribute("oninit")
            modelName && models.push(this.X.arequire(modelName)), viewName && models.push(this.X.arequire(viewName)), aseq(apar.apply(null, models), function (ret) {
                if (this.holder()) {
                    var model = this.X.lookup(modelName)
                    if (!model)return this.error("Unknown Model: ", modelName), void 0
                    model.getPrototype()
                    var obj = model.create(null, this.X)
                    obj.fromElement(e), obj.model_.DATA && this.hasOwnProperty("data") && (obj.data = this.data)
                    var view
                    if (viewName) {
                        var viewModel = this.X.lookup(viewName)
                        view = viewModel.create({model: model, data: obj}, obj.Y)
                    } else if (obj.toHTML)view = obj
                    else if (obj.toView_)view = obj.toView_()
                    else if (obj.toE)view = obj.toE(obj.Y)
                    else {
                        var a = this.element.getAttribute("showActions"), showActions = !a || a.equalsIC("y") || a.equalsIC("yes") || a.equalsIC("true") || a.equalsIC("t")
                        view = this.X.lookup("foam.ui.DetailView").create({
                            model: model,
                            data: obj,
                            showActions: showActions
                        }, obj.Y)
                    }
                    e.id && (this.document.FOAM_OBJECTS[e.id] = obj), obj.view_ = view, this.holder().outerHTML = view.toHTML(), style && view.$.setAttribute("style", style), view.initHTML(), onInit && aeval("function() { " + onInit + " }")(function (f) {
                        f.call(obj)
                    })
                }
            }.bind(this))()
        }, holder: function () {
            return this.Element.isInstance(this.element) ? this.$ : this.element
        }, error: function (msg) {
            console.error(msg), this.holder.innerHTML = msg
        }, initHTML: function () {
            this.install()
        }
    }
}), CLASS({
    package: "foam.grammars",
    name: "CSSDecl",
    imports: ["assert"],
    documentation: function () {
    },
    constants: {
        PREFIXES: ["-webkit-"],
        PREFIXED_KEYS: {
            "align-content": !0,
            "align-items": !0,
            "align-self": !0,
            animation: !0,
            "box-shadow": !0,
            "column-count": !0,
            "column-gap": !0,
            "column-rule": !0,
            display: "flex",
            filter: !0,
            flex: !0,
            "flex-basis": !0,
            "flex-direction": !0,
            "flex-flow": !0,
            "flex-grow": !0,
            "flex-shrink": !0,
            "flex-wrap": !0,
            "font-feature-settings": !0,
            hyphens: !0,
            "justify-content": !0,
            keyframes: !0,
            order: !0,
            transform: !0,
            "transform-origin": !0,
            "user-select": !0
        }
    },
    properties: [{
        name: "parser", lazyFactory: function () {
            return SkipGrammar.create(this.parser_, seq("/*", repeat(not("*/", anyChar)), "*/"))
        }
    }, {
        name: "parser_", lazyFactory: function () {
            var css = this
            return {
                __proto__: grammar, START: sym("stylesheet"), ws: alt(" ", "\t", "\n", "\r", "\f"),
                wsc: alt(sym("ws"), ","), ws_: repeat0(sym("ws")), wsp_: plus0(sym("ws")),
                alphaNum: alt("-", range("a", "z"), range("A", "Z"), range("0", "9")),
                punct: alt(range("!", "'"), range("*", "+"), range("-", "/"), range("<", "@"), range("[", "`"), "|", "~"),
                anp: alt(sym("alphaNum"), sym("punct")),
                stylesheet: str(seq(sym("ws_"), str(repeat(alt(sym("stmtRule"), sym("blockRule")), sym("ws_"))))),
                rulePrefix: plus(str(plus(alt(sym("anp"), ",", "(", ")", ":"))), sym("wsp_")),
                stmtRule: str(seq(sym("rulePrefix"), ";")), blockRule: str(seq(sym("rulePrefix"), sym("block"))),
                blockList: str(plus(sym("blockRule"), sym("ws_"))),
                fnArgs: seq("(", sym("ws_"), str(repeat(sym("fnArg"))), ")"),
                fnArg: seq(str(plus(alt(sym("fnArgs"), sym("fnArgIdent")))), repeat(sym("wsc"))),
                fnArgIdent: str(plus(alt(sym("anp"), "{", "}", ";", ":"))),
                declLHS: str(plus(alt(sym("anp"), ",", "(", ")", ";"))),
                declRHS: plus(str(plus(alt(sym("fnArgs"), sym("declRHSIdent")))), sym("wsp_")),
                declRHSIdent: str(plus(alt(sym("anp"), ",", ":"))),
                decl: seq(sym("declLHS"), sym("ws_"), ":", sym("ws_"), sym("declRHS")),
                declList: plus(sym("decl"), seq(";", sym("ws_"))),
                block: seq("{", sym("ws_"), optional(alt(sym("blockList"), sym("declList"))), "}")
            }.addActions({
                rulePrefix: function (parts) {
                    return parts = parts.map(function (p) {
                        return p.indexOf("^") >= 0 ? p.replace(/\^/g, css.modelName_ + "-") : p
                    }), parts.join(" ")
                }, block: function (parts) {
                    return "{" + (parts[2] ? parts[2] : "") + "}"
                }, declList: function (parts) {
                    return parts.join(";")
                }, declRHS: function (parts) {
                    return parts.join(" ")
                }, decl: function (parts) {
                    var key = parts[0], value = parts[4], data = css.PREFIXED_KEYS[key]
                    if (!data || 0 === css.PREFIXES.length)return key + ":" + value
                    var rtn = ""
                    if (data === !0 || data === value)for (var i = 0; i < css.PREFIXES.length; ++i) {
                        var prefix = css.PREFIXES[i]
                        rtn += data === !0 ? prefix + key + ":" + value + ";" : key + ":" + prefix + value + ";"
                    }
                    return rtn += key + ":" + value, rtn
                }, fnArg: function (parts) {
                    return parts[0] + (parts[1].indexOf(",") >= 0 ? ", " : " ")
                }, fnArgs: function (parts) {
                    return "(" + parts[2].trim() + ")"
                }
            })
        }
    }, {
        name: "model",
        documentation: "Optional model which contains this CSS template. Used to expand ^ signs in CSS selectors to the model name.",
        postSet: function (old, nu) {
            nu && (nu.buildPrototype(), this.modelName_ = nu.CSS_CLASS || cssClassize(nu.id))
        }
    }, {
        name: "modelName_", documentation: "The converted model name itself.", adapt: function (old, nu) {
            return "." + nu.split(/ +/).join(".")
        }
    }]
}), CLASS({
    package: "foam.html",
    name: "Element",
    constants: {
        OPTIONAL_CLOSE_TAGS: {
            HTML: !0,
            HEAD: !0,
            BODY: !0,
            P: !0,
            DT: !0,
            DD: !0,
            LI: !0,
            OPTION: !0,
            THEAD: !0,
            TH: !0,
            TBODY: !0,
            TR: !0,
            TD: !0,
            TFOOT: !0,
            COLGROUP: !0
        },
        ILLEGAL_CLOSE_TAGS: {
            IMG: !0,
            INPUT: !0,
            BR: !0,
            HR: !0,
            FRAME: !0,
            AREA: !0,
            BASE: !0,
            BASEFONT: !0,
            COL: !0,
            ISINDEX: !0,
            LINK: !0,
            META: !0,
            PARAM: !0
        }
    },
    properties: [{name: "id"}, {name: "nodeName"}, {
        name: "attributeMap_", transient: !0, factory: function () {
            return {}
        }
    }, {
        name: "attributes", factory: function () {
            return []
        }, postSet: function (_, attrs) {
            for (var i = 0; i < attrs.length; i++)this.attributeMap_[attrs[i].name] = attrs[i]
        }
    }, {
        name: "childNodes", factory: function () {
            return []
        }
    }, {
        name: "children", transient: !0, getter: function () {
            return this.childNodes.filter(function (c) {
                return "string" != typeof c
            })
        }
    }, {
        name: "outerHTML", transient: !0, getter: function () {
            var out = "<" + this.nodeName
            this.id && (out += ' id="' + this.id + '"')
            for (key in this.attributeMap_) {
                var value = this.attributeMap_[key].value
                out += void 0 == value ? " " + key : " " + key + '="' + this.attributeMap_[key].value + '"'
            }
            return this.ILLEGAL_CLOSE_TAGS[this.nodeName] || this.OPTIONAL_CLOSE_TAGS[this.nodeName] && !this.childNodes.length || (out += ">", out += this.innerHTML, out += "</" + this.nodeName), out += ">", out
        }
    }, {
        name: "innerHTML", transient: !0, getter: function () {
            for (var out = "", i = 0; i < this.childNodes.length; i++)out += this.childNodes[i].toString()
            return out
        }
    }],
    methods: {
        setAttribute: function (name, value) {
            var attr = this.getAttributeNode(name)
            attr ? attr.value = value : (attr = {
                name: name,
                value: value
            }, this.attributes.push(attr), this.attributeMap_[name] = attr)
        }, getAttributeNode: function (name) {
            return this.attributeMap_[name]
        }, getAttribute: function (name) {
            var attr = this.getAttributeNode(name)
            return attr && attr.value
        }, appendChild: function (c) {
            this.childNodes.push(c)
        }, removeChild: function (c) {
            for (var i = 0; i < this.childNodes.length; ++i)if (this.childNodes[i] === c) {
                this.childNodes.splice(i, 1)
                break
            }
        }, toString: function () {
            return this.outerHTML
        }
    }
})
var HTMLParser = {
    __proto__: grammar, create: function () {
        return {__proto__: this, stack: [X.foam.html.Element.create({nodeName: "html"})]}
    }, peek: function () {
        return this.stack[this.stack.length - 1]
    }, START: sym("html"), html: repeat0(sym("htmlPart")),
    htmlPart: simpleAlt(sym("cdata"), sym("comment"), sym("text"), sym("endTag"), sym("startTag")),
    tag: seq(sym("startTag"), repeat(seq1(1, sym("matchingHTML"), sym("htmlPart")))), matchingHTML: function (ps) {
        return this.stack.length > 1 ? ps : null
    }, startTag: seq("<", sym("tagName"), sym("whitespace"), sym("attributes"), sym("whitespace"), optional("/"), ">"),
    endTag: function () {
        var endTag_ = sym("endTag_")
        return function (ps) {
            return this.stack.length > 1 ? this.parse(endTag_, ps) : void 0
        }
    }(), endTag_: seq1(1, "</", sym("tagName"), ">"),
    cdata: seq1(1, "<![CDATA[", str(repeat(not("]]>", anyChar))), "]]>"),
    comment: seq("<!--", repeat0(not("-->", anyChar)), "-->"), attributes: repeat(sym("attribute"), sym("whitespace")),
    label: str(plus(notChars(" %=/\t\r\n<>'\""))), tagName: sym("label"), text: str(plus(alt("<%", notChar("<")))),
    attribute: seq(sym("label"), optional(seq1(1, "=", sym("value")))),
    value: str(alt(plus(alt(range("a", "z"), range("A", "Z"), range("0", "9"))), seq1(1, '"', repeat(notChar('"')), '"'))),
    whitespace: repeat0(alt(" ", "\t", "\r", "\n"))
}.addActions({
    START: function (xs) {
        var ret = this.stack[0]
        return this.stack = [X.foam.html.Element.create({nodeName: "html"})], ret
    }, tag: function (xs) {
        var ret = this.stack[0]
        return this.stack = [X.foam.html.Element.create({nodeName: "html"})], ret.childNodes[0]
    }, attribute: function (xs) {
        return {name: xs[0], value: xs[1]}
    }, cdata: function (xs) {
        this.peek() && this.peek().appendChild(xs)
    }, text: function (xs) {
        this.peek() && this.peek().appendChild(xs)
    }, startTag: function (xs) {
        var tag = xs[1], obj = X.foam.html.Element.create({nodeName: tag, attributes: xs[3]})
        return this.peek() && this.peek().appendChild(obj), "/" != xs[5] && this.stack.push(obj), obj
    }, endTag: function (tag) {
        for (var stack = this.stack; stack.length > 1;) {
            if (this.peek().nodeName === tag)return stack.pop(), void 0
            var top = stack.pop()
            this.peek().childNodes = this.peek().childNodes.concat(top.childNodes), top.childNodes = []
        }
    }
})
!function () {
    var registry = {}
    X.registerElement = function (name, model) {
        registry[name] = model, TemplateParser.foamTag_ = function () {
            var start = seq("<", simpleAlt.apply(null, Object.keys(registry).sort(function (o1, o2) {
                return o2.compareTo(o1)
            }).map(function (k) {
                return literal_ic(k)
            })), alt("/", " ", ">")), html = HTMLParser.create().export("tag")
            return function (ps) {
                var res = this.parse(start, ps) && this.parse(html, ps)
                if (!res)return null
                var elem = res.value, model = registry[elem.nodeName]
                return model && elem.setAttribute("model", model), res.setValue(elem)
            }
        }(), invalidateParsers()
    }, X.elementModel = function (name) {
        return registry[name]
    }
}(), X.registerElement("foam", null), CLASS({
    name: "Expr",
    swiftImplements: ["ExprProtocol"],
    javaImplements: ["foam.core2.ExprInterface"],
    documentation: "Parent model for all mLang expressions. Contains default implementations for many methods.",
    methods: [{
        name: "f",
        args: [{name: "obj", swiftType: "AnyObject?", javaType: "Object"}],
        swiftReturnType: "AnyObject?",
        javaReturnType: "Object",
        swiftCode: 'fatalError("You must extend and implement this.")',
        javaCode: "return null;"
    }, function toMQL() {
        return this.label_
    }, function toSQL() {
        return this.label_
    }, function toBQL() {
        return this.label_
    }, function toString() {
        return this.toMQL()
    }, function exprClone() {
        var c = Object.create(this.__proto__)
        c.instance_ = {}, c.X = this.X
        for (var key in this.instance_) {
            var value = this[key]
            void 0 !== value && ("function" == typeof value.exprClone ? c.instance_[key] = value.exprClone() : c.instance_[key] = value)
        }
        return c
    }, function collectInputs(terms) {
        terms.push(this)
    }, function partialEval() {
        return this
    }, function minterm(index, term) {
        return !!(term >>> index[0]-- & 1)
    }, function normalize() {
        return this
        var inputs = []
        this.collectInputs(inputs)
        for (var minterms = new Array(Math.pow(2, inputs.length)), i = 0; i < minterms.length; i++)minterms[i] = this.minterm([inputs.length - 1], i)
        var terms = []
        for (i = 0; i < minterms.length; i++)if (minterms[i]) {
            for (var subterms = [], j = 0; j < inputs.length; j++)i & 1 << inputs.length - j - 1 && subterms.push(inputs[j])
            terms.push(AndExpr.create({args: subterms}))
        }
        return OrExpr.create({args: terms}).partialEval()
    }, function pipe(sink) {
        var expr = this
        return {
            __proto__: sink, put: function (obj) {
                expr.f(obj) && sink.put(obj)
            }, remove: function (obj) {
                expr.f(obj) && sink.remove(obj)
            }
        }
    }]
}), CLASS({
    name: "TrueExpr",
    extends: "Expr",
    documentation: "Model for the primitive true value.",
    methods: [function clone() {
        return this
    }, function deepClone() {
        return this
    }, function exprClone() {
        return this
    }, function toString() {
        return "<true>"
    }, function toSQL() {
        return "( 1 = 1 )"
    }, function toMQL() {
        return ""
    }, function toBQL() {
        return ""
    }, function readResolve() {
        return TRUE
    }, {
        name: "f", code: function () {
            return !0
        }, swiftCode: "return true as AnyObject?", javaCode: "return true;"
    }]
}), CLASS({
    name: "FalseExpr",
    extends: "Expr",
    documentation: "Model for the primitive false value.",
    methods: [function clone() {
        return this
    }, function deepClone() {
        return this
    }, function exprClone() {
        return this
    }, function toSQL(out) {
        return "( 1 <> 1 )"
    }, function toMQL(out) {
        return "<false>"
    }, function toBQL(out) {
        return "<false>"
    }, function readResolve() {
        return FALSE
    }, {
        name: "f", code: function () {
            return !1
        }, swiftCode: "return false as AnyObject?", javaCode: "return false;"
    }]
}), CLASS({
    name: "IdentityExpr",
    extends: "Expr",
    documentation: "The identity expression, which passes through its input unchanged.",
    methods: {
        clone: function () {
            return this
        }, deepClone: function () {
            return this
        }, exprClone: function () {
            return this
        }, f: function (obj) {
            return obj
        }, toString: function () {
            return "IDENTITY"
        }, readResolve: function () {
            return IDENTITY
        }
    }
})
var TRUE = TrueExpr.create(), FALSE = FalseExpr.create(), IDENTITY = IdentityExpr.create()
CLASS({
    name: "NARY",
    extends: "Expr",
    abstract: !0,
    documentation: "Parent model for expressions which take an arbitrary number of arguments.",
    properties: [{
        name: "args",
        label: "Arguments",
        swiftType: "NSArray",
        javaType: "java.util.List<ExprInterface>",
        swiftFactory: "return [] as AnyObject?",
        javaFactory: "return new java.util.ArrayList<ExprInterface>();",
        help: "Sub-expressions",
        documentation: "An array of subexpressions which are the arguments to this n-ary expression.",
        factory: function () {
            return []
        }
    }],
    methods: {
        toString: function () {
            for (var s = this.name_ + "(", i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toString(), i < this.args.length - 1 && (s += ", ")
            }
            return s + ")"
        }, toSQL: function () {
            var s
            s = this.model_.label, s += "("
            for (var i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toSQL(), i < this.args.length - 1 && out.push(",")
            }
            return s += ")", s
        }, toMQL: function () {
            var s
            s = this.model_.label, s += "("
            for (var i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toMQL(), i < this.args.length - 1 && out.push(",")
            }
            return s += ")", str
        }, toBQL: function () {
            var s
            s = this.model_.label, s += "("
            for (var i = 0; i < this.args.length; i++) {
                var a = this.args[i]
                s += a.toBQL(), i < this.args.length - 1 && out.push(",")
            }
            return s += ")", str
        }
    }
}), CLASS({
    name: "UNARY",
    extends: "Expr",
    abstract: !0,
    documentation: "Parent model for one-argument expressions.",
    properties: [{
        name: "arg1",
        label: "Argument",
        swiftType: "AnyObject?",
        javaType: "Object",
        help: "Sub-expression",
        documentation: "The first argument to the expression.",
        defaultValue: TRUE,
        swiftDefaultValue: "TRUE",
        javaDefaultValue: "MLang.TRUE()"
    }],
    methods: {
        toSQL: function () {
            return this.label_ + "(" + this.arg1.toSQL() + ")"
        }, toMQL: function () {
            return this.label_ + "(" + this.arg1.toMQL() + ")"
        }, toBQL: function () {
            return this.label_ + "(" + this.arg1.toBQL() + ")"
        }
    }
}), CLASS({
    name: "BINARY",
    extends: "UNARY",
    abstract: !0,
    documentation: 'Parent model for two-argument expressions. Extends $$DOC{ref: "UNARY"} to include $$DOC{ref: ".arg2"}.',
    properties: [{
        name: "arg2",
        label: "Argument",
        swiftType: "AnyObject?",
        javaType: "Object",
        swiftDefaultValue: "TRUE",
        javaDefaultValue: "MLang.TRUE()",
        help: "Sub-expression",
        documentation: "Second argument to the expression.",
        defaultValue: TRUE
    }],
    methods: {
        toSQL: function () {
            return this.arg1.toSQL() + " " + this.label_ + " " + this.arg2.toSQL()
        }, toMQL: function () {
            return this.arg1.toMQL() + " " + this.label_ + " " + this.arg2.toMQL()
        }, toBQL: function () {
            return this.arg1.toBQL() + " " + this.label_ + " " + this.arg2.toBQL()
        }
    }
}), CLASS({
    name: "CountExpr",
    extends: "Expr",
    properties: [{type: "Int", name: "count", defaultValue: 0}, {
        name: "value", getter: function () {
            return this.count
        }
    }],
    methods: {
        reduce: function (other) {
            return CountExpr.create({count: this.count + other.count})
        }, reduceI: function (other) {
            this.count = this.count + other.count
        }, pipe: function (sink) {
            sink.put(this)
        }, put: function (obj) {
            this.count++
        }, remove: function (obj) {
            this.count--
        }, toString: function () {
            return this.count
        }
    }
}), CLASS({
    name: "EqExpr", extends: "BINARY", javaClassImports: ["foam.core2.ExprInterface"], documentation: function () {
    }, methods: [function toSQL() {
        return this.arg1.toSQL() + "=" + this.arg2.toSQL()
    }, function toMQL() {
        return this.arg1.toMQL && this.arg2.toMQL ? this.arg2 === TRUE ? "is:" + this.arg1.toMQL() : "" == this.arg2.f() ? "-has:" + this.arg1.toMQL() : this.arg1.toMQL() + "=" + this.arg2.toMQL() : ""
    }, function toBQL() {
        return this.arg1.toBQL && this.arg2.toBQL ? this.arg2 === TRUE ? this.arg1.toBQL() + ":true" : this.arg1.toBQL() + ":" + this.arg2.toBQL() : ""
    }, function partialEval() {
        var newArg1 = this.arg1.partialEval(), newArg2 = this.arg2.partialEval()
        return ConstantExpr.isInstance(newArg1) && ConstantExpr.isInstance(newArg2) ? compile_(this.f()) : this.arg1 !== newArg1 || this.arg2 !== newArg2 ? EqExpr.create({
            arg1: newArg1,
            arg2: newArg2
        }) : this
    }, {
        name: "f", code: function (obj) {
            var arg1 = this.arg1.f(obj), arg2 = this.arg2.f(obj)
            if (Array.isArray(arg1)) {
                if (!Array.isArray(arg2))return arg1.some(function (arg) {
                    return arg == arg2
                })
                if (arg1.length !== arg2.length)return !1
                for (var i = 0; i < arg1.length; i++)if (arg1[i] != arg2[i])return !1
                return !0
            }
            return arg2 === TRUE ? !!arg1 : arg2 === FALSE ? !arg1 : equals(arg1, arg2)
        }, swiftCode: "return equals(arg1?.f(obj), b: arg2?.f(obj)) as AnyObject?", javaCode: function () {
        }
    }]
}), CLASS({
    name: "ConstantExpr", extends: "UNARY", methods: [function escapeSQLString(str) {
        return "'" + str.replace(/\\/g, "\\\\").replace(/'/g, "\\'") + "'"
    }, function escapeMQLString(str) {
        return str.length > 0 && str.indexOf(" ") == -1 && str.indexOf('"') == -1 && str.indexOf(",") == -1 ? str : '"' + str.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"'
    }, function toSQL() {
        return "string" == typeof this.arg1 ? this.escapeSQLString(this.arg1) : this.arg1.toString()
    }, function toMQL() {
        return "string" == typeof this.arg1 ? this.escapeMQLString(this.arg1) : this.arg1.toMQL ? this.arg1.toMQL() : this.arg1.toString()
    }, function toBQL() {
        return "string" == typeof this.arg1 ? this.escapeMQLString(this.arg1) : this.arg1.toBQL ? this.arg1.toBQL() : this.arg1.toString()
    }, {
        name: "f", code: function (obj) {
            return this.arg1
        }, swiftCode: "return arg1 as AnyObject?", javaCode: "return getArg1();"
    }]
}), CLASS({
    name: "AndExpr",
    extends: "NARY",
    documentation: "N-ary expression which is true only if each of its 0 or more arguments is true. AND() === TRUE",
    methods: [function toSQL() {
        for (var s = "", i = 0; i < this.args.length; i++) {
            var a = this.args[i]
            s += a.toSQL(), i < this.args.length - 1 && (s += " AND ")
        }
        return s
    }, function toMQL() {
        for (var s = "", i = 0; i < this.args.length; i++) {
            var a = this.args[i], sub = a.toMQL()
            OrExpr.isInstance(a) && (sub = "(" + sub + ")"), s += sub, i < this.args.length - 1 && (s += " ")
        }
        return s
    }, function toBQL() {
        for (var s = "", i = 0; i < this.args.length; i++) {
            var a = this.args[i], sub = a.toBQL()
            OrExpr.isInstance(a) && (sub = "(" + sub + ")"), s += sub, i < this.args.length - 1 && (s += " ")
        }
        return s
    }, function collectInputs(terms) {
        for (var i = 0; i < this.args.length; i++)this.args[i].collectInputs(terms)
    }, function minterm(index, term) {
        for (var out = !0, i = 0; i < this.args.length; i++)out = this.args[i].minterm(index, term) && out
        return out
    }, function partialAnd(e1, e2) {
        if (OrExpr.isInstance(e2)) {
            var tmp = e1
            e1 = e2, e2 = tmp
        }
        if (OrExpr.isInstance(e1)) {
            for (var args = [], i = 0; i < e1.args.length; i++)args.push(AND(e2, e1.args[i]))
            return OrExpr.create({args: args}).partialEval()
        }
        if (!BINARY.isInstance(e1))return null
        if (!BINARY.isInstance(e2))return null
        if (e1.arg1 != e2.arg1)return null
        for (var RULES = this.PARTIAL_AND_RULES, i = 0; i < RULES.length; i++) {
            if (e1.model_.name == RULES[i][0] && e2.model_.name == RULES[i][1])return RULES[i][2](e1, e2)
            if (e2.model_.name == RULES[i][0] && e1.model_.name == RULES[i][1])return RULES[i][2](e2, e1)
        }
        return DEBUG && console.log("Unknown partialAnd combination: ", e1.name_, e2.name_), null
    }, function partialEval() {
        for (var newArgs = [], updated = !1, i = 0; i < this.args.length; i++) {
            var a = this.args[i], newA = this.args[i].partialEval()
            if (newA === FALSE)return FALSE
            if (AndExpr.isInstance(newA)) {
                for (var j = 0; j < newA.args.length; j++)newArgs.push(newA.args[j])
                updated = !0
            } else newA === TRUE ? updated = !0 : (newArgs.push(newA), a !== newA && (updated = !0))
        }
        for (var i = 0; i < newArgs.length - 1; i++)for (var j = i + 1; j < newArgs.length; j++) {
            var a = this.partialAnd(newArgs[i], newArgs[j])
            if (a) {
                if (a === FALSE)return FALSE
                newArgs[i] = a, newArgs.splice(j, 1)
            }
        }
        return 0 == newArgs.length ? TRUE : 1 == newArgs.length ? newArgs[0] : updated ? AndExpr.create({args: newArgs}) : this
    }, {
        name: "f", code: function (obj) {
            return this.args.every(function (arg) {
                return arg.f(obj)
            })
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }],
    constants: {
        PARTIAL_AND_RULES: [["EqExpr", "EqExpr", function (e1, e2) {
            return e1.arg1.exclusive ? e1.arg2.f() == e2.arg2.f() ? e1 : FALSE : e1.arg2.f() == e2.arg2.f() ? e1 : null
        }], ["InExpr", "InExpr", function (e1, e2) {
            var i = e1.arg1.exclusive ? e1.arg2.intersection(e2.arg2) : e1.arg2.union(e2.arg2)
            return i.length ? IN(e1.arg1, i) : FALSE
        }], ["InExpr", "ContainedInICExpr", function (e1, e2) {
            if (!e1.arg1.exclusive)return null
            var i = e1.arg2.filter(function (o) {
                return o = o.toUpperCase(), e2.arg2.some(function (o2) {
                    return o.indexOf(o2) != -1
                })
            })
            return i.length ? IN(e1.arg1, i) : FALSE
        }], ["ContainedInICExpr", "ContainedInICExpr", function (e1, e2) {
            console.assert(!1, "AND.partialEval: ContainedInICExpr has no partialEval rule")
        }], ["InExpr", "ContainsICExpr", function (e1, e2) {
            if (e1.arg1.exclusive)var i = e1.arg2.filter(function (o) {
                return o.indexOfIC(e2.arg2.f()) !== -1
            })
        }], ["InExpr", "ContainsExpr", function (e1, e2) {
            if (e1.arg1.exclusive) {
                var i = e1.arg2.filter(function (o) {
                    return o.indexOf(e2.arg2.f()) !== -1
                })
                return i.length ? IN(e1.arg1, i) : FALSE
            }
        }], ["EqExpr", "InExpr", function (e1, e2) {
            if (e1.arg1.exclusive)return e2.arg2.indexOf(e1.arg2.f()) === -1 ? FALSE : e1
        }]]
    }
}), CLASS({
    name: "NeqExpr", extends: "BINARY", abstract: !0, methods: {
        toSQL: function () {
            return this.arg1.toSQL() + "<>" + this.arg2.toSQL()
        }, toMQL: function () {
            return "-" + this.arg1.toMQL() + "=" + this.arg2.toMQL()
        }, toBQL: function () {
            return "-" + this.arg1.toBQL() + ":" + this.arg2.toBQL()
        }, partialEval: function () {
            var newArg1 = this.arg1.partialEval(), newArg2 = this.arg2.partialEval()
            return ConstantExpr.isInstance(newArg1) && ConstantExpr.isInstance(newArg2) ? compile_(this.f()) : this.arg1 !== newArg1 || this.arg2 != newArg2 ? NeqExpr.create({
                arg1: newArg1,
                arg2: newArg2
            }) : this
        }, f: function (obj) {
            var arg1 = this.arg1.f(obj), arg2 = this.arg2.f(obj)
            if (Array.isArray(arg1)) {
                if (!Array.isArray(arg2))return !arg1.some(function (arg) {
                    return arg == arg2
                })
                if (arg1.length !== arg2.length)return !0
                for (var i = 0; i < arg1.length; i++)if (arg1[i] != arg2[i])return !0
                return !1
            }
            return arg2 === TRUE ? !arg1 : arg2 === FALSE ? !!arg1 : !equals(arg1, arg2)
        }
    }
}), CLASS({
    name: "UpperExpr",
    extends: "UNARY",
    properties: [{name: "label_", defaultValue: "UPPER"}],
    methods: [function partialEval() {
        var newArg1 = this.arg1.partialEval()
        if (ConstantExpr.isInstance(newArg1)) {
            var val = newArg1.f()
            if ("string" == typeof val)return compile_(val.toUpperCase())
        } else Array.isArray(newArg1)
        return this
    }, {
        name: "f", code: function (obj) {
            var a = this.arg1.f(obj)
            return Array.isArray(a) ? a.map(function (s) {
                return s.toUpperCase ? s.toUpperCase() : s
            }) : a && a.toUpperCase ? a.toUpperCase() : a
        }
    }, function toMQL() {
        return ConstantExpr.isInstance(this.arg1) && "string" == typeof this.arg1.arg1 ? this.arg1.arg1.toUpperCase() : this.arg1.toMQL()
    }]
})
var Visitor = {
    create: function () {
        return {__proto__: this, stack: []}
    }, push: function (o) {
        this.stack.push(o)
    }, pop: function () {
        return this.stack.pop()
    }, top: function () {
        return this.stack.length && this.stack[this.stack.length - 1]
    }, visit: function (o) {
        return Array.isArray(o) ? this.visitArray(o) : "string" == typeof o ? this.visitString(o) : "number" == typeof o ? this.visitNumber(o) : o instanceof Function ? this.visitFunction(o) : o instanceof Date ? this.visitDate(o) : o === !0 ? this.visitTrue() : o === !1 ? this.visitFalse() : null === o ? this.visitNull() : o instanceof Object ? o.model_ ? this.visitObject(o) : this.visitMap(o) : this.visitUndefined()
    }, visitArray: function (o) {
        for (var len = o.length, i = 0; i < len; i++)this.visitArrayElement(o, i)
        return o
    }, visitArrayElement: function (arr, i) {
        this.visit(arr[i])
    }, visitString: function (o) {
        return o
    }, visitFunction: function (o) {
        return o
    }, visitNumber: function (o) {
        return o
    }, visitDate: function (o) {
        return o
    }, visitObject: function (o) {
        var properties = o.model_.getRuntimeProperties()
        for (var key in properties) {
            var prop = properties[key]
            prop.name in o.instance_ && this.visitProperty(o, prop)
        }
        return o
    }, visitProperty: function (o, prop) {
        this.visit(o[prop.name])
    }, visitMap: function (o) {
        for (var key in o)this.visitMapElement(key, o[key])
        return o
    }, visitMapElement: function (key, value) {
    }, visitTrue: function () {
        return !0
    }, visitFalse: function () {
        return !1
    }, visitNull: function () {
        return null
    }, visitUndefined: function () {
    }
}
CLASS({
    name: "XHR",
    properties: [{type: "Int", name: "delay", defaultValue: 0}, {
        type: "Int",
        name: "retries",
        defaultValueFn: function () {
            return this.authAgent ? 2 : 0
        }
    }, {name: "authAgent"}, {name: "responseType", defaultValue: "text"}, {
        name: "contentType",
        defaultValue: "application/json"
    }],
    methods: {
        init: function (args) {
            this.SUPER(args), this.delay && this.addDecorator(DelayDecorator.create({delayMs: this.delay})), this.authAgent && this.addDecorator(OAuthXhrDecorator.create({authAgent: this.authAgent})), this.retries && this.addDecorator(RetryDecorator.create({maxAttempts: this.retries}))
        }, makeXhr: function () {
            return new XMLHttpRequest
        }, open: function (xhr, method, url) {
            xhr.open(method, url)
        }, setRequestHeader: function (xhr, header, value) {
            xhr.setRequestHeader(header, value)
        }, configure: function (xhr) {
            xhr.responseType = this.responseType, this.contentType && this.setRequestHeader(xhr, "Content-Type", this.contentType)
        }, bindListeners: function (xhr, ret) {
            var self = this
            xhr.onreadystatechange = function () {
                if (4 == xhr.readyState) {
                    if ("json" === self.responseType && "string" == typeof xhr.response)var response = JSON.parse(xhr.response)
                    else response = xhr.response
                    ret(response, xhr, xhr.status >= 200 && xhr.status < 300)
                }
            }
        }, send: function (xhr, data) {
            xhr.send(data)
        }, asend: function (ret, url, data, method) {
            var xhr = this.makeXhr()
            this.open(xhr, method || "GET", url), this.configure(xhr), this.bindListeners(xhr, ret), this.send(xhr, data && data.toJSON ? data.toJSON() : data)
        }
    }
}), CLASS({
    name: "OAuthXhrDecorator", properties: ["authAgent"], methods: {
        configure: function (decorator, delegate, args) {
            var xhr = args[0]
            return xhr.setRequestHeader("Authorization", "Bearer " + decorator.authAgent.accessToken), delegate.apply(this, args)
        }, asend: function (decorator, delegate, args) {
            var ret = args[0]
            return args[0] = function (response, xhr, status) {
                401 === xhr.status ? decorator.authAgent.refresh(function () {
                    ret(response, xhr, status)
                }) : ret(response, xhr, status)
            }, delegate.apply(null, args)
        }
    }
}), CLASS({
    name: "RetryDecorator", properties: [{type: "Int", name: "maxAttempts", defaultValue: 3}], methods: {
        asend: function (decorator, delegate, args) {
            var originalRet = args[0], attempts = 0, self = this, response
            awhile(function () {
                return !0
            }, aseq(function (ret) {
                args[0] = ret, delegate.apply(self, args)
            }, function (ret, response, xhr, status) {
                return xhr.status >= 200 && xhr.status < 300 || 404 === xhr.status || ++attempts >= decorator.maxAttempts ? (finished = !0, originalRet(response, xhr, status), void 0) : (ret(), void 0)
            }))(function () {
            })
        }
    }
}), CLASS({
    name: "DelayDecorator", properties: [{type: "Int", name: "delayMs"}], methods: {
        decorateObject: function (target) {
            var asend = adelay(target.asend.bind(target), this.delayMs)
            target.decorate("asend", function (_, __, args) {
                asend.apply(null, args)
            })
        }
    }
}), CLASS({
    name: "XhrMessenger",
    properties: [{type: "URL", name: "url"}, {type: "String", name: "method", defaultValue: "POST"}],
    methods: {
        put: function (obj, sink) {
            var xhr = this.Y.XHR.create()
            xhr.asend(function (response, xhr) {
                return xhr.status >= 200 && xhr.status < 300 ? (sink && sink.put && sink.put(response), void 0) : (sink && sink.error && sink.error([response, xhr]), void 0)
            }, this.url, obj, this.method)
        }
    }
})
var ObjectToJSON = {
    __proto__: Visitor.create(), visitFunction: function (o) {
        return o.toString()
    }, visitObject: function (o) {
        return this.push({model_: (o.model_.package ? o.model_.package + "." : "") + o.model_.name}), this.__proto__.visitObject.call(this, o), this.pop()
    }, visitProperty: function (o, prop) {
        prop.propertyToJSON(this, this.top(), o)
    }, visitMap: function (o) {
        return this.push({}), Visitor.visitMap.call(this, o), this.pop()
    }, visitMapElement: function (key, value) {
        this.top()[key] = this.visit(value)
    }, visitArray: function (o) {
        return this.push([]), this.__proto__.visitArray.call(this, o), this.pop()
    }, visitArrayElement: function (arr, i) {
        this.top().push(this.visit(arr[i]))
    }
}, JSONToObject = {
    __proto__: ObjectToJSON.create(), visitObject: function (o) {
        var model = X.lookup(o.model_)
        if (!model)throw new Error("Unknown Model: " + o.model_)
        var obj = model.create()
        return Object_forEach(o, function (value, key) {
            "model_" !== key && (obj[key] = this.visit(value))
        }.bind(this)), obj
    }, visitArray: Visitor.visitArray, visitArrayElement: function (arr, i) {
        arr[i] = this.visit(arr[i])
    }
}
CLASS({
    name: "FilteredDAO_",
    extends: "foam.dao.ProxyDAO",
    documentation: "<p>Internal use only.</p>",
    properties: [{
        name: "query",
        swiftType: "ExprProtocol?",
        swiftDefaultValue: "nil",
        javaType: "foam.core2.ExprInterface",
        required: !0
    }],
    methods: [{
        name: "select", code: function (sink, options, opt_X) {
            return this.delegate.select(sink, options ? {
                __proto__: options,
                query: options.query ? AND(this.query, options.query) : this.query
            } : {query: this.query}, opt_X)
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }, {
        name: "removeAll", code: function (sink, options, opt_X) {
            return this.delegate.removeAll(sink, options ? {
                __proto__: options,
                query: options.query ? AND(this.query, options.query) : this.query
            } : {query: this.query}, opt_X)
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }, {
        name: "listen", code: function (sink, options) {
            return this.SUPER(sink, options ? {
                __proto__: options,
                query: options.query ? AND(this.query, options.query) : this.query
            } : {query: this.query})
        }, swiftCode: function () {
        }, javaCode: function () {
        }
    }, function toString() {
        return this.delegate + ".where(" + this.query + ")"
    }]
}), CLASS({
    name: "OrderedDAO_", extends: "foam.dao.ProxyDAO", documentation: function () {
    }, properties: [{name: "comparator", required: !0}], methods: {
        select: function (sink, options, opt_X) {
            return options ? options.order || (options = {
                __proto__: options,
                order: this.comparator
            }) : options = {order: this.comparator}, this.delegate.select(sink, options, opt_X)
        }, toString: function () {
            return this.delegate + ".orderBy(" + this.comparator + ")"
        }
    }
}), CLASS({
    name: "LimitedDAO_", extends: "foam.dao.ProxyDAO", documentation: function () {
    }, properties: [{name: "count", required: !0}], methods: {
        select: function (sink, options, opt_X) {
            return options = options ? "limit" in options ? {
                __proto__: options,
                limit: Math.min(this.count, options.limit)
            } : {
                __proto__: options,
                limit: this.count
            } : {limit: this.count}, this.delegate.select(sink, options, opt_X)
        }, toString: function () {
            return this.delegate + ".limit(" + this.count + ")"
        }
    }
}), CLASS({
    name: "SkipDAO_", extends: "foam.dao.ProxyDAO", documentation: function () {
    }, properties: [{
        name: "skip", required: !0, postSet: function () {
            this.skip !== Math.floor(this.skip) && console.warn("skip() called with non-integer value: " + this.skip)
        }
    }], methods: {
        select: function (sink, options, opt_X) {
            return options = options ? {
                __proto__: options,
                skip: this.skip
            } : {skip: this.skip}, this.delegate.select(sink, options, opt_X)
        }, toString: function () {
            return this.delegate + ".skip(" + this.skip + ")"
        }
    }
}), CLASS({
    name: "RelationshipDAO",
    extends: "FilteredDAO_",
    documentation: "Adapts a DAO based on a Relationship.",
    properties: [{name: "relatedProperty", required: !0}, {name: "relativeID", required: !0}, {
        name: "query",
        lazyFactory: function () {
            return AND(NEQ(this.relatedProperty, ""), EQ(this.relatedProperty, this.relativeID))
        }
    }],
    methods: [function put(obj, sink) {
        obj[this.relatedProperty.name] = this.relativeID, this.SUPER(obj, sink)
    }]
}), CLASS({
    name: "AbstractDAO",
    javaClassImports: ["foam.dao.nativesupport.ClosureSink", "foam.dao.nativesupport.DAOQueryOptions", "foam.dao.nativesupport.PredicatedSink", "foam.dao.nativesupport.Sink", "java.util.concurrent.CompletableFuture"],
    documentation: function () {
    },
    properties: [{
        name: "daoListeners_",
        transient: !0,
        hidden: !0,
        factory: function () {
            return []
        },
        swiftType: "NSMutableArray",
        swiftFactory: "return NSMutableArray()",
        javaType: "java.util.List<foam.dao.nativesupport.Sink>",
        javaFactory: "return new java.util.ArrayList<foam.dao.nativesupport.Sink>();",
        compareProperty: function () {
            return 0
        }
    }],
    methods: [function update(expr) {
        return this.select(UPDATE(expr, this))
    }, {
        name: "select",
        code: function (sink, options) {
        },
        args: [{
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink"
        }, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftReturnType: "Future",
        swiftCode: "return Future().set(sink)",
        javaReturnType: "CompletableFuture<foam.dao.nativesupport.Sink>",
        javaCode: "return null;"
    }, {
        name: "put",
        args: [{name: "obj", swiftType: "FObject", javaType: "FObject"}, {
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink",
            javaDefaultValue: "new foam.dao.nativesupport.ArraySink()"
        }],
        swiftCode: "// Override",
        javaCode: "// Override"
    }, {
        name: "remove",
        code: function (query, sink) {
        },
        args: [{name: "obj", swiftType: "FObject", javaType: "FObject"}, {
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink",
            javaDefaultValue: "new foam.dao.nativesupport.ArraySink()"
        }],
        swiftCode: "// Override",
        javaCode: "// Override"
    }, {
        name: "find",
        code: function (id, sink) {
        },
        args: [{name: "id", type: "String"}, {
            name: "sink",
            swiftType: "Sink",
            javaType: "foam.dao.nativesupport.Sink"
        }],
        swiftCode: "// Override",
        javaCode: "// Override"
    }, {
        name: "pipe",
        code: function (sink, options) {
            sink = this.decorateSink_(sink, options, !0)
            var fc = this.createFlowControl_(), self = this
            this.select({
                put: function () {
                    sink.put && sink.put.apply(sink, arguments)
                }, remove: function () {
                    sink.remove && sink.remove.apply(sink, arguments)
                }, error: function () {
                    sink.error && sink.error.apply(sink, arguments)
                }, eof: function () {
                    fc.stopped ? sink.eof && sink.eof() : self.listen(sink, options)
                }
            }, options, fc)
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "decorateSink_",
        code: function (sink, options, isListener, disableLimit) {
            return options && (disableLimit || (options.limit && (sink = limitedSink(options.limit, sink)), options.skip && (sink = skipSink(options.skip, sink))), options.order && !isListener && (sink = orderedSink(options.order, sink)), options.query && (sink = predicatedSink(options.query.partialEval ? options.query.partialEval() : options.query, sink))), sink
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}, {
            name: "options",
            swiftType: "DAOQueryOptions",
            javaType: "foam.dao.nativesupport.DAOQueryOptions"
        }],
        swiftReturnType: "Sink",
        javaReturnType: "foam.dao.nativesupport.Sink",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, function createFlowControl_() {
        return {
            stop: function () {
                this.stopped = !0
            }, error: function (e) {
                this.errorEvt = e
            }
        }
    }, {
        name: "where",
        code: function (query) {
            return (this.Y || X).lookup("FilteredDAO_").create({query: query, delegate: this})
        },
        args: [{name: "query", swiftType: "ExprProtocol", javaType: "foam.core2.ExprInterface"}],
        swiftReturnType: "AbstractDAO",
        javaReturnType: "AbstractDAO",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, function limit(count) {
        return (this.Y || X).lookup("LimitedDAO_").create({count: count, delegate: this})
    }, function skip(skip) {
        return (this.Y || X).lookup("SkipDAO_").create({skip: skip, delegate: this})
    }, function orderBy() {
        return (this.Y || X).lookup("OrderedDAO_").create({
            comparator: 1 == arguments.length ? arguments[0] : argsToArray(arguments),
            delegate: this
        })
    }, {
        name: "listen",
        code: function (sink, options) {
            this.daoListeners_.push(this.decorateSink_(sink, options, !0))
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftCode: "self.daoListeners_.add(self.decorateSink_(sink, options: options))",
        javaCode: "getDaoListeners_().add(decorateSink_(sink, options));"
    }, {
        name: "unlisten",
        code: function unlisten(sink) {
            for (var ls = this.daoListeners_, i = 0; i < ls.length; i++)if (ls[i].$UID === sink.$UID)return ls.splice(i, 1), !0
            DEBUG && console.warn("Phantom DAO unlisten: ", this, sink)
        },
        args: [{name: "sink", swiftType: "Sink", javaType: "foam.dao.nativesupport.Sink"}],
        returnType: "Boolean",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "removeAll",
        code: function (sink, options) {
            var self = this, future = afuture()
            return this.select({
                put: function (obj) {
                    self.remove(obj, {remove: sink && sink.remove})
                }
            })(function () {
                sink && sink.eof(), future.set()
            }), future.get
        },
        args: [{
            name: "sink",
            swiftType: "Sink = ArraySink()",
            javaType: "foam.dao.nativesupport.Sink",
            javaDefaultValue: "new foam.dao.nativesupport.ArraySink()"
        }, {
            name: "options",
            swiftType: "DAOQueryOptions = DAOQueryOptions()",
            javaType: "foam.dao.nativesupport.DAOQueryOptions",
            javaDefaultValue: "new foam.dao.nativesupport.DAOQueryOptions()"
        }],
        swiftReturnType: "Future",
        javaReturnType: "java.util.concurrent.CompletableFuture",
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }, {
        name: "notify_",
        code: function (fName, args) {
            for (var i = 0; i < this.daoListeners_.length; i++) {
                var l = this.daoListeners_[i], fn = l[fName]
                if (fn) {
                    args[2] = {
                        stop: function (fn, l) {
                            return function () {
                                fn(l)
                            }
                        }(this.unlisten.bind(this), l), error: function (e) {
                        }
                    }
                    try {
                        fn.apply(l, args)
                    } catch (err) {
                        err !== this.UNSUBSCRIBE_EXCEPTION && (console.error("Error delivering event (removing listener): ", fName, err), DEBUG && console.error(err.stack)), this.unlisten(l)
                    }
                }
            }
        },
        args: [{name: "fName", type: "String"}, {
            name: "fObj",
            swiftType: "FObject? = nil",
            javaType: "FObject",
            javaDefaultValue: "null"
        }],
        swiftCode: function () {
        },
        javaCode: function () {
        }
    }]
}), Function.prototype.put = function () {
    this.apply(this, arguments)
}, Function.prototype.remove = function () {
    this.apply(this, arguments)
}, Function.prototype.reset = function () {
    this.call(this)
}, function () {
    var pmap = {}
    for (var key in AbstractDAO.methods)pmap[AbstractDAO.methods[key].name] = AbstractDAO.methods[key].code
    for (var key in pmap)Object.defineProperty(Array.prototype, key, {value: pmap[key], configurable: !0, writable: !0})
}(), defineLazyProperty(Array.prototype, "daoListeners_", function () {
    return {value: [], configurable: !0}
})
var ArraySink = {
    __proto__: Array.prototype, put: function (obj, sink) {
        this.push(obj), this.notify_("put", arguments), sink && sink.put && sink.put(obj)
    }, clone: function () {
        return this.slice().sink
    }, deepClone: function () {
        for (var r = new Array(this.length), i = 0; i < this.length; i++)r[i] = this[i].deepClone()
        return r.sink
    }, exprClone: function () {
        return this.deepClone()
    }
}
MODEL0({
    extendsProto: "Array", properties: [{
        name: "dao", getter: function () {
            return this.__proto__ = Array.prototype, this
        }
    }, {
        name: "sink", getter: function () {
            return this.__proto__ = ArraySink, this
        }
    }], methods: {
        listen: AbstractDAO.getPrototype().listen,
        unlisten: AbstractDAO.getPrototype().unlisten,
        notify_: AbstractDAO.getPrototype().notify_,
        put: function (obj, sink) {
            for (var idx = 0; idx < this.length; idx++)if (this[idx].id === obj.id)return this[idx] = obj, sink && sink.put && sink.put(obj), this.notify_("put", arguments), void 0
            this.push(obj), this.notify_("put", arguments), sink && sink.put && sink.put(obj)
        },
        find: function (query, sink) {
            if (query.f) {
                for (var idx = 0; idx < this.length; idx++)if (query.f(this[idx]))return sink && sink.put && sink.put(this[idx]), void 0
            } else for (var idx = 0; idx < this.length; idx++)if (this[idx].id === query)return sink && sink.put && sink.put(this[idx]), void 0
            sink && sink.error && sink.error("find", query)
        },
        remove: function (obj, sink) {
            if (!obj)return sink && sink.error && sink.error("missing key"), void 0
            for (var objId = obj.id, id = void 0 !== objId && "" !== objId ? objId : obj, idx = 0; idx < this.length; idx++)if (this[idx].id === id) {
                var rem = this.splice(idx, 1)[0]
                return this.notify_("remove", [rem]), sink && sink.remove && sink.remove(rem), void 0
            }
            sink && sink.error && sink.error("remove", obj)
        },
        removeAll: function (sink, options) {
            options || (options = {}), options.query || (options.query = {
                f: function () {
                    return !0
                }
            })
            for (var i = 0; i < this.length; i++) {
                var obj = this[i]
                if (options.query.f(obj)) {
                    var rem = this.splice(i, 1)[0]
                    this.notify_("remove", [rem]), sink && sink.remove && sink.remove(rem), i--
                }
            }
            return sink && sink.eof && sink.eof(), anop()
        },
        select: function (sink, options) {
            sink = sink || [].sink
            var hasQuery = options && (options.query || options.order), originalsink = sink
            if (sink = this.decorateSink_(sink, options, !1, !hasQuery), !hasQuery && GLOBAL.CountExpr && CountExpr.isInstance(sink))return sink.count = this.length, aconstant(originalsink)
            for (var fc = this.createFlowControl_(), start = Math.max(0, hasQuery ? 0 : options && options.skip || 0), end = hasQuery ? this.length : Math.min(this.length, start + (options && options.limit || this.length)), i = start; i < end && (sink.put(this[i], null, fc), !fc.stopped); i++)if (fc.errorEvt)return sink.error && sink.error(fc.errorEvt), aconstant(originalsink, fc.errorEvt)
            return sink.eof && sink.eof(), aconstant(originalsink)
        }
    }
})
var NOT_FOUND = {
    cost: 0, execute: function (_, sink, __) {
        return anop
    }, toString: function () {
        return "no-match(cost=0)"
    }
}, NO_PLAN = {
    cost: Number.MAX_VALUE, execute: function () {
        return anop
    }, toString: function () {
        return "no-plan"
    }
}, ValueIndex = {
    put: function (s, newValue) {
        return newValue
    }, remove: function () {
    }, plan: function () {
        var plan = {
            cost: 1, execute: function (s, sink) {
                return sink.put(s), anop
            }, toString: function () {
                return "unique"
            }
        }
        return function () {
            return plan
        }
    }(), get: function (value, key) {
        return value
    }, select: function (value, sink, options) {
        if (options) {
            if (options.query && !options.query.f(value))return
            if ("skip" in options && options.skip-- > 0)return
            if ("limit" in options && options.limit-- <= 0)return
        }
        sink.put(value)
    }, selectReverse: function (value, sink, options) {
        this.select(value, sink, options)
    }, size: function (obj) {
        return 1
    }, toString: function () {
        return "value"
    }
}, KEY = 0, VALUE = 1, SIZE = 2, LEVEL = 3, LEFT = 4, RIGHT = 5, TreeIndex = {
    create: function (prop, tail) {
        return tail = tail || ValueIndex, {__proto__: this, prop: prop, tail: tail, selectCount: 0}
    }, bulkLoad: function (a) {
        if (this.tail === ValueIndex)return a.sort(toCompare(this.prop)), this.bulkLoad_(a, 0, a.length - 1)
        for (var s = void 0, i = 0; i < a.length; i++)s = this.put(s, a[i])
        return s
    }, bulkLoad_: function (a, start, end) {
        if (!(end < start)) {
            var m = start + Math.floor((end - start + 1) / 2), tree = this.put(void 0, a[m])
            return tree[LEFT] = this.bulkLoad_(a, start, m - 1), tree[RIGHT] = this.bulkLoad_(a, m + 1, end), tree[SIZE] += this.size(tree[LEFT]) + this.size(tree[RIGHT]), tree
        }
    }, dedup: function (obj, value) {
        obj[this.prop.name] = value
    }, maybeClone: function (s) {
        return s && this.selectCount > 0 ? s.clone() : s
    }, put: function (s, newValue) {
        return this.putKeyValue(s, this.prop.f(newValue), newValue)
    }, putKeyValue: function (s, key, value) {
        if (!s)return [key, this.tail.put(null, value), 1, 1]
        s = this.maybeClone(s)
        var r = this.compare(s[KEY], key)
        if (0 === r)this.dedup(value, s[KEY]), s[SIZE] -= this.tail.size(s[VALUE]), s[VALUE] = this.tail.put(s[VALUE], value), s[SIZE] += this.tail.size(s[VALUE])
        else {
            var side = r > 0 ? LEFT : RIGHT
            s[side] && (s[SIZE] -= s[side][SIZE]), s[side] = this.putKeyValue(s[side], key, value), s[SIZE] += s[side][SIZE]
        }
        return this.split(this.skew(s))
    }, skew: function (s) {
        if (s && s[LEFT] && s[LEFT][LEVEL] === s[LEVEL]) {
            var l = this.maybeClone(s[LEFT])
            return s[LEFT] = l[RIGHT], l[RIGHT] = s, this.updateSize(s), this.updateSize(l), l
        }
        return s
    }, updateSize: function (s) {
        s[SIZE] = this.size(s[LEFT]) + this.size(s[RIGHT]) + this.tail.size(s[VALUE])
    }, split: function (s) {
        if (s && s[RIGHT] && s[RIGHT][RIGHT] && s[LEVEL] === s[RIGHT][RIGHT][LEVEL]) {
            var r = this.maybeClone(s[RIGHT])
            return s[RIGHT] = r[LEFT], r[LEFT] = s, r[LEVEL]++, this.updateSize(s), this.updateSize(r), r
        }
        return s
    }, remove: function (s, value) {
        return this.removeKeyValue(s, this.prop.f(value), value)
    }, removeKeyValue: function (s, key, value) {
        if (!s)return s
        s = this.maybeClone(s)
        var r = this.compare(s[KEY], key)
        if (0 === r) {
            if (s[SIZE] -= this.tail.size(s[VALUE]), s[VALUE] = this.tail.remove(s[VALUE], value), s[VALUE])return s[SIZE] += this.tail.size(s[VALUE]), s
            if (!s[LEFT] && !s[RIGHT])return
            var side = s[LEFT] ? LEFT : RIGHT, l = side === LEFT ? this.predecessor(s) : this.successor(s)
            s[KEY] = l[KEY], s[VALUE] = l[VALUE], s[side] = this.removeNode(s[side], l[KEY])
        } else {
            var side = r > 0 ? LEFT : RIGHT
            s[SIZE] -= this.size(s[side]), s[side] = this.removeKeyValue(s[side], key, value), s[SIZE] += this.size(s[side])
        }
        return s = this.skew(this.decreaseLevel(s)), s[RIGHT] && (s[RIGHT] = this.skew(this.maybeClone(s[RIGHT])), s[RIGHT][RIGHT] && (s[RIGHT][RIGHT] = this.skew(this.maybeClone(s[RIGHT][RIGHT])))), s = this.split(s), s[RIGHT] = this.split(this.maybeClone(s[RIGHT])), s
    }, removeNode: function (s, key) {
        if (!s)return s
        s = this.maybeClone(s)
        var r = this.compare(s[KEY], key)
        if (0 === r)return s[LEFT] ? s[LEFT] : s[RIGHT]
        var side = r > 0 ? LEFT : RIGHT
        return s[SIZE] -= this.size(s[side]), s[side] = this.removeNode(s[side], key), s[SIZE] += this.size(s[side]), s
    }, predecessor: function (s) {
        if (!s[LEFT])return s
        for (s = s[LEFT]; s[RIGHT]; s = s[RIGHT]);
        return s
    }, successor: function (s) {
        if (!s[RIGHT])return s
        for (s = s[RIGHT]; s[LEFT]; s = s[LEFT]);
        return s
    }, decreaseLevel: function (s) {
        var expectedLevel = Math.min(s[LEFT] ? s[LEFT][LEVEL] : 0, s[RIGHT] ? s[RIGHT][LEVEL] : 0) + 1
        return expectedLevel < s[LEVEL] && (s[LEVEL] = expectedLevel, s[RIGHT] && expectedLevel < s[RIGHT][LEVEL] && (s[RIGHT] = this.maybeClone(s[RIGHT]), s[RIGHT][LEVEL] = expectedLevel)), s
    }, get: function (s, key) {
        if (s) {
            var r = this.compare(s[KEY], key)
            return 0 === r ? s[VALUE] : this.get(r > 0 ? s[LEFT] : s[RIGHT], key)
        }
    }, select: function (s, sink, options) {
        if (s) {
            if (options) {
                if ("limit" in options && options.limit <= 0)return
                var size = this.size(s)
                if (options.skip >= size && !options.query)return options.skip -= size, void 0
            }
            this.select(s[LEFT], sink, options), this.tail.select(s[VALUE], sink, options), this.select(s[RIGHT], sink, options)
        }
    }, selectReverse: function (s, sink, options) {
        if (s) {
            if (options) {
                if ("limit" in options && options.limit <= 0)return
                var size = this.size(s)
                if (options.skip >= size && !options.query)return console.log("reverse skipping: ", s[KEY]), options.skip -= size, void 0
            }
            this.selectReverse(s[RIGHT], sink, options), this.tail.selectReverse(s[VALUE], sink, options), this.selectReverse(s[LEFT], sink, options)
        }
    }, gt: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r < 0) {
            var l = this.gt(s[LEFT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[LEFT]) + this.size(l), s[LEVEL], l, s[RIGHT]]
        }
        return r > 0 ? this.gt(s[RIGHT], key) : s[RIGHT]
    }, gte: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r < 0) {
            var l = this.gte(s[LEFT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[LEFT]) + this.size(l), s[LEVEL], l, s[RIGHT]]
        }
        return r > 0 ? this.gte(s[RIGHT], key) : [s[KEY], s[VALUE], this.size(s) - this.size(s[LEFT]), s[LEVEL], null, s[RIGHT]]
    }, lt: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r > 0) {
            var r = this.lt(s[RIGHT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[RIGHT]) + this.size(r), s[LEVEL], s[LEFT], r]
        }
        return r < 0 ? this.lt(s[LEFT], key) : s[LEFT]
    }, lte: function (s, key) {
        if (!s)return s
        var r = this.compare(key, s[KEY])
        if (r > 0) {
            var r = this.lte(s[RIGHT], key)
            return [s[KEY], s[VALUE], this.size(s) - this.size(s[RIGHT]) + this.size(r), s[LEVEL], s[LEFT], r]
        }
        return r < 0 ? this.lte(s[RIGHT], key) : [s[KEY], s[VALUE], this.size(s) - this.size(s[RIGHT]), s[LEVEL], s[LEFT], null]
    }, size: function (s) {
        return s ? s[SIZE] : 0
    }, compare: function (o1, o2) {
        return this.prop.compareProperty(o1, o2)
    }, plan: function (s, sink, options) {
        options = this.cloneOptions(options)
        var query = options.query
        if (query === FALSE)return NOT_FOUND
        if (!query && CountExpr.isInstance(sink)) {
            var count = this.size(s)
            return {
                cost: 0, execute: function (unused, sink, options) {
                    return sink.count += count, anop
                }, toString: function () {
                    return "short-circuit-count(" + count + ")"
                }
            }
        }
        var prop = this.prop, isExprMatch = function (model) {
            if (model && query) {
                if (model.isInstance(query) && query.arg1 === prop) {
                    var arg2 = query.arg2
                    return options.query = query = void 0, arg2
                }
                if (AndExpr.isInstance(query))for (var i = 0; i < query.args.length; i++) {
                    var q = query.args[i]
                    if (model.isInstance(q) && q.arg1 === prop)return query = query.clone(), query.args[i] = TRUE, options.query = query = query.partialEval(), query === TRUE && (options.query = query = void 0), q.arg2
                }
            }
        }, index = this, arg2 = isExprMatch(GLOBAL.InExpr)
        if (arg2 && Math.log(this.size(s)) / Math.log(2) * arg2.length < this.size(s)) {
            for (var keys = arg2, subPlans = [], results = [], cost = 1, i = 0; i < keys.length; i++) {
                var result = this.get(s, keys[i])
                if (result) {
                    var subPlan = this.tail.plan(result, sink, options)
                    cost += subPlan.cost, subPlans.push(subPlan), results.push(result)
                }
            }
            return 0 == subPlans.length ? NOT_FOUND : {
                cost: 1 + cost, execute: function (s2, sink, _) {
                    for (var pars = [], i = 0; i < subPlans.length; i++)pars.push(subPlans[i].execute(results[i], sink, options))
                    return apar.apply(null, pars)
                }, toString: function () {
                    return "IN(key=" + prop.name + ", size=" + results.length + ")"
                }
            }
        }
        if (arg2 = isExprMatch(GLOBAL.EqExpr), void 0 != arg2) {
            var key = arg2.f(), result = this.get(s, key)
            if (!result)return NOT_FOUND
            var subPlan = this.tail.plan(result, sink, options)
            return {
                cost: 1 + subPlan.cost, execute: function (s2, sink, _) {
                    return subPlan.execute(result, sink, options)
                }, toString: function () {
                    return "lookup(key=" + prop.name + ", cost=" + this.cost + (query && query.toSQL ? ", query: " + query.toSQL() : "") + ") " + subPlan.toString()
                }
            }
        }
        arg2 = isExprMatch(GLOBAL.GtExpr), arg2 && (s = this.gt(s, arg2.f())), arg2 = isExprMatch(GLOBAL.GteExpr), arg2 && (s = this.gte(s, arg2.f())), arg2 = isExprMatch(GLOBAL.LtExpr), arg2 && (s = this.lt(s, arg2.f())), arg2 = isExprMatch(GLOBAL.LteExpr), arg2 && (s = this.lte(s, arg2.f()))
        var cost = this.size(s), sortRequired = !1, reverseSort = !1
        return options.order && (options.order === prop || (GLOBAL.DescExpr && DescExpr.isInstance(options.order) && options.order.arg1 === prop ? reverseSort = !0 : (sortRequired = !0, 0 != cost && (cost *= Math.log(cost) / Math.log(2))))), sortRequired || (options.skip && (cost -= options.skip), options.limit && (cost = Math.min(cost, options.limit))), {
            cost: cost, execute: function () {
                if (sortRequired) {
                    var a = [].sink
                    index.selectCount++, index.select(s, a, {query: options.query}), index.selectCount--, a.sort(toCompare(options.order))
                    var skip = options.skip || 0, limit = Number.isFinite(options.limit) ? options.limit : a.length
                    limit += skip, limit = Math.min(a.length, limit)
                    for (var i = skip; i < limit; i++)sink.put(a[i])
                } else index.selectCount++, reverseSort ? index.selectReverse(s, sink, options) : index.select(s, sink, options), index.selectCount--
                return anop
            }, toString: function () {
                return "scan(key=" + prop.name + ", cost=" + this.cost + (query && query.toSQL ? ", query: " + query.toSQL() : "") + ")"
            }
        }
    }, cloneOptions: function (options) {
        var c = {}
        return options && (options.query && (c.query = options.query), options.skip && (c.skip = options.skip), options.order && (c.order = options.order), "limit" in options && (c.limit = options.limit)), c
    }, toString: function () {
        return "TreeIndex(" + this.prop.name + ", " + this.tail + ")"
    }
}, CITreeIndex = {
    __proto__: TreeIndex, create: function (prop, tail) {
        return tail = tail || ValueIndex, {__proto__: this, prop: prop, tail: tail}
    }, put: function (s, newValue) {
        return this.putKeyValue(s, this.prop.f(newValue).toLowerCase(), newValue)
    }, remove: function (s, value) {
        return this.removeKeyValue(s, this.prop.f(value).toLowerCase(), value)
    }
}, SetIndex = {
    __proto__: TreeIndex, create: function (prop, tail) {
        return tail = tail || ValueIndex, {__proto__: this, prop: prop, tail: tail}
    }, dedup: function (obj, value) {
    }, put: function (s, newValue) {
        var a = this.prop.f(newValue)
        if (a.length)for (var i = 0; i < a.length; i++)s = this.putKeyValue(s, a[i], newValue)
        else s = this.putKeyValue(s, "", newValue)
        return s
    }, remove: function (s, value) {
        var a = this.prop.f(value)
        if (a.length)for (var i = 0; i < a.length; i++)s = this.removeKeyValue(s, a[i], value)
        else s = this.removeKeyValue(s, "", value)
        return s
    }
}, PositionQuery = {
    create: function (args) {
        return {__proto__: this, skip: args.skip, limit: args.limit, s: args.s}
    }, reduce: function (other) {
        var otherFinish = other.skip + other.limit, myFinish = this.skip + this.limit
        return other.skip > myFinish ? null : other.skip >= this.skip ? PositionQuery.create({
            skip: this.skip,
            limit: Math.max(myFinish, otherFinish) - this.skip,
            s: this.s
        }) : other.reduce(this)
    }, equals: function (other) {
        return this.skip === other.skip && this.limit === other.limit
    }
}, AutoPositionIndex = {
    create: function (factory, mdao, networkdao, maxage) {
        var obj = {
            __proto__: this,
            factory: factory,
            maxage: maxage,
            dao: mdao,
            networkdao: networkdao,
            sets: [],
            alt: AltIndex.create()
        }
        return obj
    }, put: function (s, value) {
        return this.alt.put(s, value)
    }, remove: function (s, value) {
        return this.alt.remove(s, value)
    }, bulkLoad: function (a) {
        return []
    }, addIndex: function (s, index) {
        return this
    }, addPosIndex: function (s, options) {
        var index = PositionIndex.create(options && options.order, options && options.query, this.factory, this.dao, this.networkdao, this.queue, this.maxage)
        this.alt.delegates.push(index), s.push(index.bulkLoad([]))
    }, hasIndex: function (options) {
        for (var i = 0; i < this.sets.length; i++) {
            var set = this.sets[i]
            if (set[0].equals(options && options.query || "") && set[1].equals(options && options.order || ""))return !0
        }
        return !1
    }, plan: function (s, sink, options) {
        var subPlan = this.alt.plan(s, sink, options)
        return subPlan != NO_PLAN ? subPlan : options && null != options.skip && null != options.limit || CountExpr.isInstance(sink) ? this.hasIndex(options) ? NO_PLAN : (this.sets.push([options && options.query || "", options && options.order || ""]), this.addPosIndex(s, options), this.alt.plan(s, sink, options)) : NO_PLAN
    }
}, PositionIndex = {
    create: function (order, query, factory, dao, networkdao, queue, maxage) {
        var obj = {
            __proto__: this,
            order: order || "",
            query: query || "",
            factory: factory,
            dao: dao,
            networkdao: networkdao.where(query).orderBy(order),
            maxage: maxage,
            queue: arequestqueue(function (ret, request) {
                var s = request.s
                obj.networkdao.skip(request.skip).limit(request.limit).select()(function (objs) {
                    for (var now = Date.now(), i = 0; i < objs.length; i++)s[request.skip + i] = {
                        obj: objs[i].id,
                        timestamp: now
                    }, s.feedback = objs[i].id, obj.dao.put(objs[i]), s.feedback = null
                    ret()
                })
            }, void 0, 1)
        }
        return obj
    }, put: function (s, newValue) {
        if (s.feedback === newValue.id)return s
        if (this.query && !this.query.f(newValue))return s
        for (var compare = toCompare(this.order), i = 0; i < s.length; i++) {
            var entry = s[i]
            if (entry) {
                if (this.dao.find(entry.obj, {
                        put: function (o) {
                            entry = o
                        }
                    }), entry.id === newValue.id)break
                if (compare(entry, newValue) > 0) {
                    for (var j = s.length; j > i; j--)s[j] = s[j - 1];
                    (0 == i || s[i - 1]) && (s[i] = {obj: newValue.id, timestamp: Date.now()})
                    break
                }
            }
        }
        return s
    }, remove: function (s, obj) {
        if (s.feedback === obj.id)return s
        for (var i = 0; i < s.length; i++)if (s[i] && s[i].obj === obj.id) {
            for (var j = i; j < s.length - 1; j++)s[j] = s[j + 1]
            break
        }
        return s
    }, bulkLoad: function (a) {
        return []
    }, plan: function (s, sink, options) {
        var order = options && options.order || "", query = options && options.query || "", skip = options && options.skip, limit = options && options.limit, self = this
        if (!order.equals(this.order) || !query.equals(this.query))return NO_PLAN
        if (CountExpr.isInstance(sink))return {
            cost: 0, execute: function (s, sink, options) {
                return s.count || (s.count = amemo(function (ret) {
                    self.networkdao.select(COUNT())(function (c) {
                        ret(c)
                    })
                }, self.maxage)), function (ret, count) {
                    sink.copyFrom(count), ret()
                }.ao(s.count)
            }, toString: function () {
                return "position-index(cost=" + this.cost + ", count)"
            }
        }
        if (void 0 == skip || void 0 == limit)return NO_PLAN
        var threshold = Date.now() - this.maxage
        return {
            cost: 0, toString: function () {
                return "position-index(cost=" + this.cost + ")"
            }, execute: function (s, sink, options) {
                for (var objs = [], min, max, i = 0; i < limit; i++) {
                    var o = s[i + skip];
                    (!o || o.timestamp < threshold) && (void 0 == min && (min = i + skip), max = i + skip), o ? self.dao.find(o.obj, {
                        put: function (obj) {
                            objs[i] = obj
                        }
                    }) : objs[i] = self.factory(), !objs[i]
                }
                void 0 != min && self.queue(PositionQuery.create({skip: min, limit: max - min + 1, s: s}))
                for (var i = 0; i < objs.length; i++)sink.put(objs[i])
                return anop
            }
        }
    }
}, AltIndex = {
    GOOD_ENOUGH_PLAN: 10, create: function () {
        return {__proto__: this, delegates: argsToArray(arguments)}
    }, addIndex: function (s, index) {
        var a = [].sink
        return this.plan(s, a).execute(s, a), s.push(index.bulkLoad(a)), this.delegates.push(index), this
    }, bulkLoad: function (a) {
        for (var root = [].sink, i = 0; i < this.delegates.length; i++)root[i] = this.delegates[i].bulkLoad(a)
        return root
    }, get: function (s, key) {
        return this.delegates[0].get(s[0], key)
    }, put: function (s, newValue) {
        s = s || [].sink
        for (var i = 0; i < this.delegates.length; i++)s[i] = this.delegates[i].put(s[i], newValue)
        return s
    }, remove: function (s, obj) {
        s = s || [].sink
        for (var i = 0; i < this.delegates.length; i++)s[i] = this.delegates[i].remove(s[i], obj)
        return s
    }, plan: function (s, sink, options) {
        for (var bestPlan, bestPlanI = 0, i = 0; i < this.delegates.length; i++) {
            var plan = this.delegates[i].plan(s[i], sink, options)
            if (plan.cost <= AltIndex.GOOD_ENOUGH_PLAN) {
                bestPlanI = i, bestPlan = plan
                break
            }
            (!bestPlan || plan.cost < bestPlan.cost) && (bestPlanI = i, bestPlan = plan)
        }
        return void 0 == bestPlan || bestPlan == NO_PLAN ? NO_PLAN : {
            __proto__: bestPlan,
            execute: function (unused, sink, options) {
                return bestPlan.execute(s[bestPlanI], sink, options)
            }
        }
    }, size: function (obj) {
        return this.delegates[0].size(obj[0])
    }, toString: function () {
        return "Alt(" + this.delegates.join(",") + ")"
    }
}, mLangIndex = {
    create: function (mlang) {
        return {
            __proto__: this, mlang: mlang, PLAN: {
                cost: 0, execute: function (s, sink, options) {
                    return sink.copyFrom(s), anop
                }, toString: function () {
                    return "mLangIndex(" + this.s + ")"
                }
            }
        }
    }, bulkLoad: function (a) {
        return a.select(this.mlang), this.mlang
    }, put: function (s, newValue) {
        return s = s || this.mlang.clone(), s.put(newValue), s
    }, remove: function (s, obj) {
        return s = s || this.mlang.clone(), s.remove && s.remove(obj), s
    }, size: function (s) {
        return Number.MAX_VALUE
    }, plan: function (s, sink, options) {
        return options && options.query ? NO_PLAN : sink.model_ && sink.model_.isInstance(s) && s.arg1 === sink.arg1 ? (this.PLAN.s = s, this.PLAN) : NO_PLAN
    }, toString: function () {
        return "mLangIndex(" + this.mlang + ")"
    }
}, AutoIndex = {
    create: function (mdao) {
        return {__proto__: this, properties: {id: !0}, mdao: mdao}
    }, put: function (s, newValue) {
        return s
    }, remove: function (s, obj) {
        return s
    }, bulkLoad: function (a) {
        return "auto"
    }, addIndex: function (prop) {
        GLOBAL.DescExpr && DescExpr.isInstance(prop) && (prop = prop.arg1), console.log("Adding AutoIndex : ", prop.id), this.properties[prop.name] = !0, this.mdao.addIndex(prop)
    }, plan: function (s, sink, options) {
        return options && (options.order && Property.isInstance(options.order) && !this.properties[options.order.name] ? this.addIndex(options.order) : options.query), NO_PLAN
    }, toString: function () {
        return "AutoIndex()"
    }
}, MDAO = Model.create({
    extends: "AbstractDAO",
    name: "MDAO",
    label: "Indexed DAO",
    properties: [{name: "model", type: "Model", required: !0}, {type: "Boolean", name: "autoIndex", defaultValue: !1}],
    methods: {
        init: function () {
            this.SUPER(), this.map = {}, this.index = TreeIndex.create(this.model.getProperty(this.model.ids[0])), this.autoIndex && this.addRawIndex(AutoIndex.create(this))
        }, addIndex: function () {
            for (var props = argsToArray(arguments), i = 0; i < this.model.ids.length; i++)if (props.push(this.model.getProperty(this.model.ids[i])), !props[props.length - 1])throw"Undefined index property"
            return this.addUniqueIndex.apply(this, props)
        }, addUniqueIndex: function () {
            for (var index = ValueIndex, i = arguments.length - 1; i >= 0; i--) {
                var prop = arguments[i], proto = "Array[]" == prop.type ? SetIndex : TreeIndex
                index = proto.create(prop, index)
            }
            return this.addRawIndex(index)
        }, addRawIndex: function (index) {
            return this.index.delegates || (this.index = AltIndex.create(this.index), this.root = [this.root]), this.index.addIndex(this.root, index), this
        }, bulkLoad: function (dao, sink) {
            var self = this
            dao.select({
                __proto__: [].sink, eof: function () {
                    self.root = self.index.bulkLoad(this), sink && sink.eof && sink.eof()
                }
            })
        }, put: function (obj, sink) {
            var oldValue = this.map[obj.id]
            oldValue ? this.root = this.index.put(this.index.remove(this.root, oldValue), obj) : this.root = this.index.put(this.root, obj), this.map[obj.id] = obj, this.notify_("put", [obj]), sink && sink.put && sink.put(obj)
        }, findObj_: function (key, sink) {
            var obj = this.map[key]
            obj ? sink.put && sink.put(obj) : sink.error && sink.error("find", key)
        }, find: function (key, sink) {
            if (void 0 == key)return sink && sink.error && sink.error("missing key"), void 0
            if (!key.f)return this.findObj_(key, sink), void 0
            var found = !1
            this.where(key).limit(1).select({
                put: function (obj) {
                    found = !0, sink && sink.put && sink.put(obj)
                }, eof: function () {
                    found || sink && sink.error && sink.error("find", key)
                }
            })
        }, remove: function (obj, sink) {
            if (!obj)return sink && sink.error && sink.error("missing key"), void 0
            var id = void 0 !== obj.id && "" !== obj.id ? obj.id : obj, self = this
            this.find(id, {
                put: function (obj) {
                    self.root = self.index.remove(self.root, obj), delete self.map[obj.id], self.notify_("remove", [obj]), sink && sink.remove && sink.remove(obj)
                }, error: function () {
                    sink && sink.error && sink.error("remove", obj)
                }
            })
        }, removeAll: function (sink, options) {
            options || (options = {}), options.query || (options.query = TRUE)
            var future = afuture()
            return this.where(options.query).select()(function (a) {
                for (var i = 0; i < a.length; i++)this.root = this.index.remove(this.root, a[i]), delete this.map[a[i].id], this.notify_("remove", [a[i]]), sink && sink.remove && sink.remove(a[i])
                sink && sink.eof && sink.eof(), future.set(sink)
            }.bind(this)), future.get
        }, select: function (sink, options) {
            if (sink = sink || [].sink, options && (options = {__proto__: options}), GLOBAL.ExplainExpr && GLOBAL.ExplainExpr.isInstance(sink)) {
                var plan = this.index.plan(this.root, sink.arg1, options)
                return sink.plan = "cost: " + plan.cost + ", " + plan.toString(), sink && sink.eof && sink.eof(), aconstant(sink)
            }
            if (options && options.query) {
                var query = options.query.partialEval()
                options.query = query === TRUE ? void 0 : query
            }
            var plan = this.index.plan(this.root, sink, options), future = afuture()
            return plan.execute(this.root, sink, options)(function (ret) {
                sink && sink.eof && sink.eof(), future.set(sink)
            }), future.get
        }, toString: function () {
            return "MDAO(" + this.model.name + "," + this.index + ")"
        }
    }
})
CLASS({
    name: "Binding",
    documentation: function () {
    },
    properties: [{name: "id", hidden: !0}, {name: "value", hidden: !0}, {name: "version", defaultValue: 1, hidden: !0}]
}), CLASS({
    name: "PersistentContext",
    documentation: function () {
    },
    properties: [{name: "dao", label: "DAO", type: "DAO", hidden: !0}, {
        name: "context",
        hidden: !0
    }, {
        name: "predicate", type: "Expr", defaultValueFn: function () {
            return TRUE
        }, hidden: !0
    }],
    methods: {
        manage: function (name, obj, version) {
            var write = EventService.merged(function () {
                this.dao.put(this.Y.Binding.create({
                    id: name,
                    value: JSONUtil.where(this.predicate).stringify(obj),
                    version: version
                }))
            }.bind(this), void 0, this.Y)
            obj.addListener(write), write()
        }, bindObjects: function (a) {
        }, clearBinding: function (ret, name) {
            var self = this
            self.dao.remove.ao(self.dao.find.bind(self.dao, name))(ret)
        }, bindObject: function (name, factory, transientValues, version) {
            version = version || 1
            var future = afuture()
            if (transientValues = transientValues || {}, this.context[name])future.set(this.context[name])
            else {
                var newinit = function () {
                    var obj = factory.create()
                    obj.copyFrom(transientValues), this.context[name] = obj, this.manage(name, obj, version), future.set(obj)
                }.bind(this)
                this.dao.find(name, {
                    put: function (binding) {
                        if (binding.version !== version)return newinit(), void 0
                        try {
                            var json = JSON.parse(binding.value), obj = JSONUtil.mapToObj(this.Y, json)
                            obj.copyFrom(transientValues), this.context[name] = obj, this.manage(name, obj, version), future.set(obj)
                        } catch (e) {
                            console.log("PersistentContext", "existingInit serialization error", name), newinit()
                        }
                    }.bind(this), error: newinit
                })
            }
            return future.get
        }
    }
}), CLASS({
    name: "UserInfo",
    label: "UserInfo",
    properties: [{type: "String", name: "email"}]
}), arequire = function (modelName) {
    var THIS = this === GLOBAL ? X : this
    return function (ret) {
        var m = THIS.lookup(modelName)
        m || console.warn("Model missing from package:", modelName), ret(m)
    }
}, CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTestApp",
    extends: "foam.ui.DetailView",
    requires: ["com.google.fiber.speedtest.Logger", "com.google.fiber.speedtest.SpeedTest", "com.google.fiber.speedtest.SpeedTestView", "foam.input.touch.GestureManager", "foam.input.touch.TouchManager"],
    exports: ["logger"],
    properties: [{
        name: "logger", factory: function () {
            return this.Logger.create()
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      ", this.SpeedTestView.create({data: this.SpeedTest.create()}), "\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "Logger",
    properties: [{model_: "ArrayProperty", name: "logs"}, {
        model_: "BooleanProperty",
        name: "logToConsole",
        swiftDefaultValue: "true",
        defaultValue: !0
    }],
    methods: [function clear() {
        this.logs = []
    }, function log(severity, message) {
        var log = [window.performance.now(), severity, message]
        this.logToConsole && console.log(log[0].toFixed(2) + " " + log[1] + ": " + log[2]), this.logs.push(log)
    }, function info(message) {
        this.log("INFO", message)
    }, function warn(message) {
        this.log("WARN", message)
    }, function error(message) {
        this.log("ERROR", message)
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    requires: ["com.google.fiber.speedtest.ConfirmSpeedtest", "com.google.fiber.speedtest.ReloadSpeedtest", "com.google.fiber.speedtest.RequestPool", "com.google.fiber.speedtest.TestDownloadSpeed", "com.google.fiber.speedtest.TestPingLatency", "com.google.fiber.speedtest.TestUploadSpeed", "com.google.fiber.speedtest.TransferTestRunner"],
    imports: ["document", "logger"],
    properties: [{
        name: "currentSpeedMbps", defaultValue: 0, preSet: function (_, n) {
            return this.isNumber(n) ? this.round(n) : n
        }
    }, {
        name: "downloadSpeedMbps", preSet: function (_, n) {
            return this.isNumber(n) ? (this.downloadSpeedUnits = "Mbps", this.round(n)) : (this.downloadSpeedUnits = "", n)
        }
    }, {
        name: "speedTo", preSet: function (_, n) {
            return n ? (this.speedToLabel = "Speed to: ", n) : (this.speedTolabel = "", "")
        }
    }, {
        name: "uploadSpeedMbps", preSet: function (_, n) {
            return this.isNumber(n) ? (this.uploadSpeedUnits = "Mbps", this.round(n)) : (this.uploadSpeedUnits = "", n)
        }
    }, {
        name: "ping", preSet: function (_, n) {
            return this.isNumber(n) ? (this.pingUnits = "ms", n < 10 ? n.toFixed(1) : Math.round(n)) : (this.pingUnits = "", n)
        }
    }, {
        name: "status", defaultValueFn: function () {
            return this.statusInit
        }
    }, {model_: "BooleanProperty", name: "running", defaultValue: !1}, {
        model_: "BooleanProperty",
        name: "cancelled",
        defaultValue: !1
    }, {name: "serverUrl"}, {name: "speedToLabel"}, {name: "downloadSpeedUnits"}, {name: "uploadSpeedUnits"}, {name: "pingUnits"}, {name: "uploadData"}, {
        name: "config",
        defaultValueFn: function () {
            return {}
        }
    }, {
        name: "pool", lazyFactory: function () {
            return this.RequestPool.create()
        }
    }, {name: "didRun"}, {
        model_: "BooleanProperty",
        name: "warnedUser",
        defaultValue: !1
    }, {name: "initResult"}, {name: "result"}, {name: "resultSummary"}, {name: "version"}, {
        model_: "ArrayProperty",
        name: "errors"
    }],
    actions: [{
        name: "sendFeedback", label: "SEND FEEDBACK", code: function () {
            this.startFeedback()
        }
    }, {
        name: "sendFeedbackLarge", label: "SEND FEEDBACK ABOUT SPEED TEST", code: function () {
            this.startFeedback()
        }
    }, {
        name: "cancelTest", label: "", isEnabled: function () {
            return this.status != this.statusInit && this.status != this.statusFindingNearest && this.status != this.statusNoneFound && this.status != this.statusConfigFailed
        }, iconUrl: "/ic_stop_white_36dp_1x.png", code: function () {
            this.running && (this.logger.info("Speed test cancelled by user"), this.cancel()), this.running = !1
        }
    }, {
        name: "runTest", label: "", isEnabled: function () {
            return this.status != this.statusInit && this.status != this.statusFindingNearest && this.status != this.statusNoneFound && this.status != this.statusConfigFailed
        }, iconUrlFn: function () {
            return this.didRun ? "/ic_refresh_white_36dp_1x.png" : "/ic_play_arrow_white_36dp_1x.png"
        }, code: function () {
            var self = this
            self.running || (this.logger.info("Speed test started by user"), this.startSpeedTest())
        }
    }],
    messages: [{
        model_: "Message",
        name: "statusInit",
        value: "Initializing",
        translationHint: "The label shown when Speedtest is being initialized."
    }, {
        model_: "Message",
        name: "statusConfigFailed",
        value: "Failed to load server config",
        translationHint: "The label shown when the config failed to load."
    }, {
        model_: "Message",
        name: "statusNoneFound",
        value: "No servers responded",
        translationHint: "The label shown when no Speedtest servers responded."
    }, {
        model_: "Message",
        name: "statusFindingNearest",
        value: "Finding Speedtest server",
        translationHint: "The label shown when Speedtest is finding the nearest server."
    }, {
        model_: "Message",
        name: "statusDownload",
        value: "Testing Download speed",
        translationHint: "The label shown when the download test is being performed."
    }, {
        model_: "Message",
        name: "statusUpload",
        value: "Testing Upload speed",
        translationHint: "The label shown when the upload test is being performed."
    }, {
        model_: "Message",
        name: "statusPing",
        value: "Pinging",
        translationHint: "The label shown when a ping test is in progress."
    }, {
        model_: "Message",
        name: "statusNotStarted",
        value: "Click button to begin",
        translationHint: "The label shown when the test is not currently active."
    }, {
        model_: "Message",
        name: "statusDone",
        value: "Click button to repeat",
        translationHint: "The label shown when the test is finished."
    }, {
        model_: "Message",
        name: "statusCancelled",
        value: "Cancelled by user",
        translationHint: "The label shown when the user cancels the test."
    }],
    methods: [function getRandomData(size) {
        for (var result = "", remaining = size; remaining > 0;) {
            var part = Math.random(36).toString()
            if (!(part.length <= remaining)) {
                result += part.substring(0, remaining)
                break
            }
            result += part, remaining -= part.length
        }
        var blob
        try {
            blob = new Blob([result], {type: "application/octet-stream"})
        } catch (e) {
            var bb = new BlobBuilder
            bb.append(result), blob = bb.getBlob("application/octet-stream")
        }
        return blob
    }, function init() {
        if (window.location.hostname.search(/\.$/) != -1) {
            var newUrl = window.location.protocol + "//" + window.location.hostname.replace(/\.+$/, "")
            window.location.port && (newUrl += ":" + window.location.port), newUrl += window.location.pathname + window.location.search + window.location.hash, window.location = newUrl
        }
        var self = this
        self.resultSummary = {state: "INITIALIZING"}, window.location.hash.search(/\blogtoconsole\b/) != -1 && (self.logger.logToConsole = !0), self.logger.info("Connected to " + window.location.href), self.initResult = {startMillis: Date.now()}, window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder, self.loadServerVersion(), self.loadConfig("", 3, self.processConfig.bind(self), self.failLoadConfig.bind(this))
    }, function loadServerVersion(opt_continue) {
        var self = this, request = self.pool.takeRequest()
        request.open("GET", "/version"), request.addEventListener("readystatechange", function () {
            if (request.readyState == request.DONE) {
                var newVersion = request.responseText
                if (self.version) {
                    if (self.version != newVersion) {
                        self.logger.info("Version changed from " + self.version + " to " + newVersion)
                        var reload = self.ReloadSpeedtest.create()
                        return reload.open(), void 0
                    }
                    self.logger.info("No change in server version")
                } else self.version = newVersion, self.logger.info("Setting version to " + newVersion)
                self.pool.returnRequest(request), request = null, "function" == typeof opt_continue && opt_continue()
            }
        }), request.send()
    }, function loadConfig(server, attemptsLeft, successFn, failFn) {
        var self = this
        self.resultSummary.state = "LOADING_CONFIG"
        var request = self.pool.takeRequest(), url = server + "/config?progress=" + encodeURIComponent(request.supportsProgress)
        this.logger.info("Loading config from " + url), request.open("GET", url), request.timeout = 2e3, request.responseType = "json", self.initResult.configResult = {startMillis: Date.now()}, request.addEventListener("readystatechange", function () {
            if (request.readyState == request.DONE) {
                var status = request.status, response = request.response
                200 == status ? (self.logger.info("Successfully loaded config"), successFn(response), self.initResult.configResult.endMillis = Date.now()) : --attemptsLeft > 0 ? (self.logger.error("Load config failed. Retrying"), self.loadConfig(server, attemptsLeft, successFn, failFn)) : (self.logger.error("Too many failed attempts loading config"), self.initResult.configResult = {}, failFn())
            }
        }), request.addEventListener("timeout", function () {
            self.logger.warn("Timeout loading config from " + url)
        }), request.addEventListener("error", function () {
            self.logger.error("Error loading config from " + url)
        }), request.addEventListener("loadend", function () {
            self.pool.returnRequest(request)
        }), request.send()
    }, function failLoadConfig() {
        this.resultSummary.state = "FAIL_LOAD_CONFIG", this.config = {}, this.status = this.statusConfigFailed
    }, function processConfig(config) {
        return this.resultSummary.state = "PROCESS_CONFIG", config && this.isArray(config.regions) && 0 != config.regions.length ? (this.initResult.configResult = {}, this.tryLocalMarket(config), void 0) : (this.logger.info("Setting selected region to " + config.locationId), this.initResult.selectedRegion = config.locationId, this.setConfig("", config), void 0)
    }, function tryLocalMarket(config) {
        var self = this
        if (!config.region)return self.logger.info("Not on Google Fiber network so finding nearest"), self.findNearest(config), void 0
        for (var region = null, i = config.regions.length - 1; i >= 0; --i)if (config.regions[i].id == config.region) {
            region = config.regions[i]
            break
        }
        if (!region || !region.id || !region.url)return self.logger.warn("Region " + config.region + " not found in regions"), self.findNearest(config), void 0
        var localRegion = {
            id: region.id,
            name: region.name,
            url: region.url[Math.floor(Math.random() * region.url.length)]
        }, ping = self.TestPingLatency.create({
            id: localRegion.id,
            pool: this.pool,
            runtimeMillis: 2e3,
            timeoutMillis: 1e3,
            server: localRegion.url,
            exitOnSuccess: !0
        })
        self.resultSummary.state = "TRY_LOCAL", self.logger.info("Trying to ping local server"), ping.start(), ping.endMillis$.addListener(EventService.oneTime(function () {
            self.logger.info("Successfully pinged local market " + localRegion.id + " so skipping find nearest"), ping.pingsSucceeded > 0 ? self.setFastestMarket(localRegion) : (self.logger.warn("No pings succeeded to local server " + localRegion.id + " so trying to find nearest"), self.findNearest(config))
        }))
    }, function findNearest(config) {
        this.resultSummary.state = "FINDING_NEAREST", this.logger.info("Attempting to find nearest server"), this.initResult.findNearest = {startMillis: Date.now()}, this.status = this.statusFindNearest
        var pings = config.regions.map(function (region) {
            var server = region.url[Math.floor(Math.random() * region.url.length)]
            return this.TestPingLatency.create({
                id: region.id,
                name: region.name,
                pool: this.pool,
                runtimeMillis: 2e3,
                timeoutMillis: 1e3,
                server: server
            })
        }, this), pingFns = pings.map(function (ping) {
            return function (ret) {
                ping.start(), ping.endMillis$.addListener(EventService.oneTime(ret))
            }
        }, this)
        apar.apply(null, pingFns)(function () {
            pingFns = null, this.chooseNearest(pings, config.region), pings = null
        }.bind(this))
    }, function chooseNearest(pings, region) {
        this.resultSummary.state = "CHOOSING_NEAREST", this.logger.info("Choosing nearest server from " + pings.length)
        var fastestMarket = void 0, localMarket = void 0, self = this
        if (this.initResult.findNearest.pingResults = pings.map(function (ping) {
                var ret = {id: ping.id, url: ping.server, errors: ping.pingErrors + ping.pingTimeouts}
                return ping.pingsSucceeded > 0 ? (ret.minPingMillis = ping.minPingMillis, self.logger.info("Ping time to " + ret.id + ": " + ret.minPingMillis), (void 0 === fastestMarket || ret.minPingMillis < fastestMarket.minPingMillis) && (fastestMarket = ret), ret.id == region && (localMarket = ret)) : self.logger.info("No pings succeeded to " + ret.id), ret
            }), localMarket && localMarket.minPingMillis < 100 && (fastestMarket = localMarket, self.logger.info("Using local market " + localMarket.id)), void 0 === fastestMarket) {
            self.logger.error("No servers responded. Failed to initialize"), self.status = this.statusNoneFound, self.resultSummary.state = "NO_SERVERS_FOUND"
            var request = self.pool.takeRequest()
            request.open("POST", self.serverUrl + "/error"), request.contentType = "application/json", request.addEventListener("readystatechange", function () {
                request.readyState == request.DONE && (self.pool.returnRequest(request), request = null)
            }), request.send(JSON.stringify({message: "Find nearest: no servers responded", log: self.logger.logs}))
        } else this.initResult.findNearest.endMillis = Date.now(), this.setFastestMarket(fastestMarket)
    }, function setFastestMarket(region) {
        var self = this, serverId = region.id, serverUrl = region.url
        self.resultSummary.selectedRegion = serverId, self.initResult.selectedRegion = serverId, self.logger.info("Fastest server " + serverId + ": " + serverUrl), self.loadConfig(serverUrl, 3, function (config) {
            self.setConfig(serverUrl, config)
        }, self.failLoadConfig.bind(self))
    }, function setConfig(serverUrl, config) {
        this.resultSummary.state = "SET_CONFIG", serverUrl ? this.logger.info("Setting server URL to " + serverUrl) : this.logger.info("Using the same server"), this.serverUrl = serverUrl, this.config = config, this.status = this.statusNotStarted, this.speedTo = this.config.locationName, this.pool.reserve(Math.max(this.config.numConcurrentDownloads, this.config.numConcurrentUploads)), this.uploadData && this.uploadData.size == this.config.uploadSize || (this.uploadData = this.getRandomData(this.config.uploadSize)), this.initResult.configResult.parameters = config, this.initResult.endMillis = Date.now(), this.resultSummary.state = "FINISHED_INITIALIZATION", window.location.hash.search(/\bautostart\b/) != -1 && (this.logger.info("Auto starting test"), this.runSpeedTest())
    }, function cancel() {
    }, function clearCancel() {
        this.cancel = function () {
        }
    }, function endCancel() {
        this.running = !1, this.status = this.statusCancelled, this.currentSpeedMbps = "Done", this.clearCancel()
    }, function startFeedback() {
        var productData = {}
        productData.region = this.config && this.config.region ? "" + this.config.region : "external", this.resultSummary && (this.resultSummary.selectedRegion && (productData.selectedRegion = "" + this.resultSummary.selectedRegion), this.resultSummary.downloadSpeed && (productData.downloadSpeed = this.resultSummary.downloadSpeed.toFixed(2) + " Mbps"), this.resultSummary.uploadSpeed && (productData.uploadSpeed = this.resultSummary.uploadSpeed.toFixed(2) + " Mbps"), this.resultSummary.minPingMillis && (productData.pingLatency = this.resultSummary.minPingMillis.toFixed(2) + " ms"), this.resultSummary.ping && (productData.ping = "" + this.resultSummary.ping), productData.state = this.resultSummary.state ? "" + this.resultSummary.state : "UNKNOWN", this.initResult.findNearest ? this.initResult.findNearest.pingResults ? this.initResult.findNearest.pingResults.length > 0 ? productData.findNearest = this.initResult.findNearest.pingResults.map(function (ping) {
            return ping.id + ":" + (ping.minPingMillis > 0 ? ping.minPingMillis.toFixed(1) : "failed")
        }).join(" ") : productData.findNearest = "empty results" : productData.findNearest = "no results" : productData.findNearest = "skipped"), this.logger.info("Starting feedback")
        for (var property in productData)productData.hasOwnProperty(property) && this.logger.info("Feedback: " + property + " = " + productData[property])
        gfiber.speedtest.feedback(productData)
    }, function startSpeedTest() {
        var self = this
        self.logger.info("Checking for a version update"), self.loadServerVersion(function () {
            self.logger.info("Version up to date. Starting speed test"), self.confirmRunSpeedTest()
        })
    }, function confirmRunSpeedTest() {
        var self = this
        if (self.config.internalNetwork || self.warnedUser)return self.runSpeedTest(), void 0
        this.logger.info("Asking user to confirm external speed test")
        var confirm = self.ConfirmSpeedtest.create()
        confirm.addPropertyListener("done", EventService.oneTime(function () {
            confirm.close(), confirm.confirm && (self.warnedUser = !0, self.runSpeedTest())
        }))
        var el = this.document.getElementById("run-test")
        confirm.open(el)
    }, function runSpeedTest() {
        this.logger.info("Running speed test")
        var self = this
        self.didRun = !0, self.running = !0, self.downloadSpeedMbps = "", self.uploadSpeedMbps = "", self.ping = "", self.result = {startMillis: Date.now()}, self.resultSummary = {
            state: "STARTING",
            selectedRegion: self.resultSummary.selectedRegion
        }, aseq(function (ret) {
            function cleanup() {
                self.downloadSpeedMbps = self.currentSpeedMbps, Events.unfollow(self.currentSpeedMbps$, transfer.speed$), self.currentSpeedMbps = 0
            }

            self.logger.info("Starting download test"), self.status = self.statusDownload, self.resultSummary.state = "RUNNING_DOWNLOAD"
            var transfer = self.TransferTestRunner.create({
                data: self.TestDownloadSpeed.create({
                    server: self.serverUrl,
                    startPort: self.config.transferPortStart,
                    endPort: self.config.transferPortEnd,
                    downloadSize: self.config.downloadSize,
                    pool: self.pool,
                    numTransfers: self.config.numConcurrentDownloads
                }),
                minIntervals: self.config.minTransferIntervals,
                maxIntervals: self.config.maxTransferIntervals,
                maxVariance: self.config.maxTransferVariance,
                intervalMillis: self.config.intervalSize,
                minRunTime: self.config.minTransferRunTime,
                maxRunTime: self.config.maxTransferRunTime,
                averageType: self.config.averageType,
                initialVariance: self.config.initialTransferVariance,
                minPostRampillis: self.config.minPostRampillis
            })
            self.currentSpeedMbps$ = transfer.speed$
            var cancelled = !1
            self.cancel = function () {
                cancelled = !0, self.status == self.statusDownload && (self.logger.info("Cancelled in download test by user"), delete self.result.download, self.result.endState = "CANCELLED_IN_DOWNLOAD", self.resultSummary.state = "CANCELLED_IN_DOWNLOAD", cleanup(), transfer.stop()), self.endCancel()
            }, self.result.downloadResult = {startMillis: Date.now()}, transfer.start(), transfer.endMillis$.addListener(EventService.oneTime(function () {
                cancelled || (self.result.downloadResult.endMillis = Date.now(), self.result.downloadResult.shortMbps = transfer.shortSpeed, self.result.downloadResult.longMbps = transfer.longSpeed, self.result.downloadResult.speedMbps = transfer.speed, self.result.downloadResult.buckets = transfer.intervals, self.result.downloadResult.totalBytes = transfer.totalBytes, self.resultSummary.downloadSpeed = self.result.downloadResult.speedMbps, cleanup(), ret())
            }))
        }, function (ret) {
            function cleanup() {
                self.uploadSpeedMbps = self.currentSpeedMbps, Events.unfollow(self.currentSpeedMbps$, transfer.speed$), self.currentSpeedMbps = 0
            }

            self.logger.info("Starting upload test"), self.status = self.statusUpload, self.resultSummary.state = "RUNNING_UPLOAD"
            var transfer = self.TransferTestRunner.create({
                data: self.TestUploadSpeed.create({
                    server: self.serverUrl,
                    startPort: self.config.transferPortStart,
                    endPort: self.config.transferPortEnd,
                    uploadData: self.uploadData,
                    pool: self.pool,
                    numTransfers: self.config.numConcurrentUploads
                }),
                minIntervals: self.config.minTransferIntervals,
                maxIntervals: self.config.maxTransferIntervals,
                maxVariance: self.config.maxTransferVariance,
                intervalMillis: self.config.intervalSize,
                minRunTime: self.config.minTransferRunTime,
                maxRunTime: self.config.maxTransferRunTime,
                averageType: self.config.averageType,
                initialVariance: self.config.initialTransferVariance,
                minPostRampillis: self.config.minPostRampillis
            })
            self.currentSpeedMbps$ = transfer.speed$
            var cancelled = !1
            self.cancel = function () {
                cancelled = !0, self.status == self.statusUpload && (self.logger.info("Cancelled in upload test by user"), delete self.result.upload, self.result.endState = "CANCELLED_IN_UPLOAD", self.resultSummary.state = "CANCELLED_IN_UPLOAD", cleanup(), transfer.stop()), self.endCancel()
            }, self.result.uploadResult = {startMillis: Date.now()}, transfer.start(), transfer.endMillis$.addListener(EventService.oneTime(function () {
                cancelled || (self.result.uploadResult.endMillis = Date.now(), self.result.uploadResult.shortMbps = transfer.shortSpeed, self.result.uploadResult.longMbps = transfer.longSpeed, self.result.uploadResult.speedMbps = transfer.speed, self.result.uploadResult.buckets = transfer.intervals, self.result.uploadResult.totalBytes = transfer.totalBytes, self.resultSummary.uploadSpeed = self.result.uploadResult.speedMbps, cleanup(), ret())
            }))
        }, function (ret) {
            function cleanup() {
                Events.unfollow(self.ping$, ping.minPingMillis$)
            }

            self.logger.info("Starting ping latency test"), self.status = self.statusPing, self.resultSummary.state = "RUNNING_PING", self.currentSpeedMbps = ""
            var ping = self.TestPingLatency.create({
                pool: self.pool,
                runtimeMillis: self.config.pingRunTime,
                timeoutMillis: self.config.pingTimeout,
                server: self.serverUrl
            })
            self.ping$ = ping.minPingMillis$
            var cancelled = !1
            self.cancel = function () {
                cancelled = !0, self.status == self.statusPing && (self.logger.info("Cancelled in ping latency test by user"), delete self.result.ping, self.result.endState = "CANCELLED_IN_PING", self.resultSummary.state = "CANCELLED_IN_PING", cleanup(), ping.stop()), self.endCancel()
            }, self.result.pingResult = {startMillis: Date.now()}, ping.start(), ping.endMillis$.addListener(EventService.oneTime(function () {
                cancelled || (self.result.pingResult.endMillis = Date.now(), self.result.pingResult.id = self.initResult.selectedRegion, self.result.pingResult.url = self.serverUrl, self.result.pingResult.errors = ping.pingErrors + ping.pingTimeouts, ping.pingsSucceeded > 0 ? (self.result.pingResult.minPingMillis = ping.minPingMillis, self.resultSummary.minPingMillis = ping.minPingMillis) : self.resultSummary.ping = "No pings succeeded", cleanup(), ret())
            }))
        }, function (ret) {
            self.logger.info("Finished speed test"), self.result.endState = "COMPLETE", self.resultSummary.state = "COMPLETE", self.result.endMillis = Date.now()
            var request = self.pool.takeRequest()
            request.open("POST", self.serverUrl + "result"), request.contentType = "application/json", request.addEventListener("readystatechange", function () {
                request.readyState == request.DONE && (self.pool.returnRequest(request), request = null, self.result = null)
            }), request.addEventListener("error", function () {
                self.logger.error("Failed to send result")
            }), self.result.initResult = self.initResult, self.result.log = self.logger.logs, request.send(JSON.stringify(self.result)), self.currentSpeedMbps = "Done", self.status = self.statusDone, self.running = !1, self.clearCancel(), ret()
        })(function () {
        })
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "ConfirmSpeedtest",
    extends: "foam.ui.SimpleView",
    imports: ["document", "logger"],
    properties: [{name: "done"}, {
        model_: "BooleanProperty",
        name: "confirm",
        swiftDefaultValue: "false",
        defaultValue: !1
    }],
    actions: [{
        name: "cancelSpeedtest", label: "CANCEL", code: function () {
            this.logger.info("User declined to run speed test"), this.confirm = !1, this.done = !0
        }
    }, {
        name: "confirmSpeedtest", label: "CONTINUE", code: function () {
            this.logger.info("User agreed to run speed test"), this.confirm = !0, this.done = !0
        }
    }],
    messages: [{
        model_: "Message",
        name: "confirmSpeedtestTitle",
        value: "Run speed test?",
        translationHint: "Title for dialog to confirm running Speedtest."
    }, {
        model_: "Message",
        name: "confirmSpeedtestText",
        value: "You are not on the Google Fiber network. Running a speed test on your mobile network may result in data charges.",
        translationHint: "Text to show when confirming to run Speedtest."
    }],
    methods: [function open(sourceElement) {
        this.document.body.insertAdjacentHTML("beforeend", this.toHTML()), this.initHTML()
        var dialogWidth = this.$.offsetWidth, centerX = sourceElement.offsetLeft + sourceElement.offsetWidth / 2, centerY = sourceElement.offsetTop + sourceElement.offsetHeight / 2, left = Math.max(0, Math.min(centerX - dialogWidth / 2, screen.availWidth - dialogWidth)), top = Math.max(0, centerY - this.$.offsetHeight / 2)
        this.$.style.left = left + "px", this.$.style.top = top + "px"
        var self = this
        window.setTimeout(function () {
            self.$.classList.remove("hide")
        }, 0)
    }, function close() {
        this.$.classList.add("hide")
    }, function initHTML() {
        this.SUPER(), this.document.body.addEventListener("mouseup", this.onTouch), this.document.body.addEventListener("touchstart", this.onTouch), this.$.addEventListener("transitionend", this.onTransitionEnd)
    }, function destroy() {
        this.document.body.removeEventListener("mouseup", this.onTouch), this.document.body.removeEventListener("touchstart", this.onTouch), this.$.removeEventListener("transitionend", this.onTransitionEnd), this.document.body.removeChild(this.$), this.SUPER()
    }],
    listeners: [{
        name: "onTransitionEnd", code: function () {
            this.$.classList.contains("hide") && this.destroy()
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".confirm-speedtest-popup{background-color:white;-webkit-box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);font-family:'Roboto', sans-serif;transition:opacity 300ms ease-in-out;width:320px;position:absolute;z-index:1000}.confirm-speedtest-title{font-size:1.5em;margin:20px}.confirm-speedtest-text{color:#666;margin:20px}.confirm-speedtest-buttons{display:-webkit-flex;display:flex;-webkit-justify-content:flex-end;justify-content:flex-end}.confirm-speedtest-buttons a{text-decoration:none;color:#0091EA;padding:20px;cursor:pointer}.confirm-speedtest-buttons a:hover{background-color:#E5E5E5}.hide{opacity:0}"),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="', self.id, '" class="confirm-speedtest-popup hide">\n        <div class="confirm-speedtest-title">', self.confirmSpeedtestTitle, '</div>\n        <div class="confirm-speedtest-text">', self.confirmSpeedtestText, '</div>\n        <div class="confirm-speedtest-buttons">\n          ', self.createTemplateView("cancelSpeedtest", {tagName: "a"}), "\n          ", self.createTemplateView("confirmSpeedtest", {tagName: "a"}), "\n        </div>\n      </div>\n     "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "SimpleView",
    extends: "foam.ui.BaseView",
    traits: ["foam.ui.HTMLViewTrait", "foam.ui.U2ViewTrait"],
    requires: ["Property"],
    exports: ["propertyViewProperty"],
    properties: [{
        name: "propertyViewProperty", defaultValueFn: function () {
            return this.Property.DETAIL_VIEW
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "HTMLViewTrait",
    label: "HTMLView",
    requires: ["foam.input.touch.GestureTarget", "foam.ui.ActionBorder", "foam.ui.PropertyView", "foam.ui.AsyncLoadingView"],
    properties: [{
        model_: "StringProperty", name: "id", label: "Element ID", type: "String", factory: function () {
            return this.instance_.id || this.nextID()
        }
    }, {
        model_: "foam.core.types.DocumentInstallProperty", name: "installCSS", documentInstallFn: function (X) {
            for (var i = 0; i < this.model_.templates.length; i++) {
                var t = this.model_.templates[i]
                if ("CSS" === t.name)return t.futureTemplate(function () {
                    X.addStyle(this)
                }.bind(this)), void 0
            }
        }
    }, {
        name: "shortcuts", factory: function () {
            return []
        }
    }, {
        name: "$", labels: ["javascript"], mode: "read-only", visibility: "hidden", hidden: !0, getter: function () {
            return this.X.document.getElementById(this.id)
        }, setter: function () {
        }, help: "DOM Element."
    }, {name: "tagName", defaultValue: "span"}, {
        name: "className",
        defaultValue: "",
        help: "CSS class name(s), space separated."
    }, {name: "tooltip"}, {name: "tabIndex"}, {name: "extraClassName", defaultValue: ""}, {
        name: "propertyViewProperty",
        defaultValueFn: function () {
            return this.X.Property.VIEW
        }
    }, {
        name: "initializers_", factory: function () {
            return []
        }
    }, {
        name: "destructors_", factory: function () {
            return []
        }
    }, {
        model_: "BooleanProperty", name: "showActions", type: "Boolean", postSet: function (oldValue, showActions) {
            !oldValue && showActions && this.addDecorator(this.ActionBorder.create())
        }, defaultValue: !1
    }, {name: "minWidth", defaultValue: 300}, {name: "minHeight", defaultValue: 0}, {
        name: "preferredWidth",
        defaultValue: 400
    }, {name: "preferredHeight", defaultValue: 40}, {name: "maxWidth", defaultValue: 1e4}, {
        name: "maxHeight",
        defaultValue: 1e4
    }, {
        name: "$parent", labels: ["javascript"], getter: function () {
            return this.$ ? this.$.parentElement : null
        }
    }],
    constants: [{
        name: "KEYPRESS_CODES",
        value: {8: !0, 33: !0, 34: !0, 37: !0, 38: !0, 39: !0, 40: !0}
    }, {name: "NAMED_CODES", value: {37: "left", 38: "up", 39: "right", 40: "down"}}, {
        name: "ON_HIDE",
        value: ["onHide"]
    }, {name: "ON_SHOW", value: ["onShow"]}],
    methods: [function strToHTML(str) {
        return XMLUtil.escape(str.toString())
    }, function cssClassAttr() {
        if (!this.className && !this.extraClassName)return ""
        var s = ' class="'
        return this.className && (s += this.className, this.extraClassName && (s += " ")), this.extraClassName && (s += this.extraClassName), s + '"'
    }, function bindSubView(view, prop) {
        view.setValue(this.propertyValue(prop.name))
    }, function focus() {
        this.$ && this.$.focus && this.$.focus()
    }, function addChild(child) {
        if (child.toView_ && (child = child.toView_()), this.children.indexOf(child) == -1)return this.SUPER(child)
    }, function addShortcut(key, callback, context) {
        this.shortcuts.push([key, callback, context])
    }, function nextID() {
        return "view" + (arguments.callee._nextId = (arguments.callee._nextId || 0) + 1)
    }, function addInitializer(f) {
        this.initializers_.push(f)
    }, function addDestructor(f) {
        this.destructors_.push(f)
    }, function tapClick() {
    }, function resize() {
        var e = this.X.document.createEvent("Event")
        e.initEvent("resize", !0, !0), this.$ && this.X.window.getComputedStyle(this.$), this.X.window.dispatchEvent(e)
    }, function on(event, listener, opt_id) {
        if (opt_id = opt_id || this.nextID(), listener = listener.bind(this), "click" === event && this.X.gestureManager) {
            var self = this, manager = this.X.gestureManager, target = this.GestureTarget.create({
                containerID: opt_id,
                enforceContainment: !0,
                handler: {
                    tapClick: function (pointMap) {
                        return listener({
                            preventDefault: function () {
                            }, stopPropagation: function () {
                            }, pointMap: pointMap, target: self.X.$(opt_id)
                        })
                    }
                },
                gesture: "tap"
            })
            return manager.install(target), this.addDestructor(function () {
                manager.uninstall(target)
            }), opt_id
        }
        return this.addInitializer(function () {
            var e = this.X.$(opt_id)
            e && e.addEventListener(event, listener, !1)
        }.bind(this)), opt_id
    }, function setAttribute(attributeName, valueFn, opt_id) {
        var self = this
        opt_id = opt_id || this.nextID(), valueFn = valueFn.bind(this), this.addInitializer(function () {
            self.X.dynamicFn(valueFn, function () {
                var e = self.X.$(opt_id)
                if (!e)throw EventService.UNSUBSCRIBE_EXCEPTION
                var newValue = valueFn(e.getAttribute(attributeName))
                void 0 == newValue ? e.removeAttribute(attributeName) : e.setAttribute(attributeName, newValue)
            })
        })
    }, function setStyle(styleName, valueFn, opt_id) {
        var self = this
        return opt_id = opt_id || this.nextID(), valueFn = valueFn.bind(this), this.addInitializer(function () {
            self.X.dynamicFn(valueFn, function (value) {
                var e = self.X.$(opt_id)
                if (!e)throw EventService.UNSUBSCRIBE_EXCEPTION
                e.style[styleName] = value
            })
        }), opt_id
    }, function setClass(className, predicate, opt_id) {
        var self = this
        return opt_id = opt_id || this.nextID(), predicate = predicate.bind(this), this.addInitializer(function () {
            self.addDestructor(self.X.dynamicFn(predicate, function () {
                var e = self.X.$(opt_id)
                if (!e)throw EventService.UNSUBSCRIBE_EXCEPTION
                DOM.setClass(e, className, predicate())
            }).destroy)
        }), opt_id
    }, function setClasses(map, opt_id) {
        opt_id = opt_id || this.nextID()
        for (var keys = Objects.keys(map), i = 0; i < keys.length; i++)this.setClass(keys[i], map[keys[i]], opt_id)
        return opt_id
    }, function insertInElement(name) {
        var e = this.X.$(name)
        e.innerHTML = this.toHTML(), this.initHTML()
    }, function write(opt_X) {
        var X = opt_X || this.X
        X.writeView(this, X)
    }, function updateHTML() {
        this.$ && (this.destroy(), this.construct())
    }, function construct() {
        this.SUPER(), this.generateContent()
    }, function generateContent() {
        this.$ && (this.$.innerHTML = this.toInnerHTML(), this.initInnerHTML())
    }, function toInnerHTML() {
        return ""
    }, function toHTML() {
        return this.invokeDestructors(), "<" + this.tagName + ' id="' + this.id + '"' + this.cssClassAttr() + ">" + this.toInnerHTML() + "</" + this.tagName + ">"
    }, function initHTML() {
        this.initInnerHTML(), this.initKeyboardShortcuts(), this.maybeInitTooltip()
    }, function maybeInitTooltip() {
        this.tooltip && this.$ && (this.$.addEventListener("mouseenter", this.openTooltip), this.$.addEventListener("mouseleave", this.closeTooltip))
    }, function initInnerHTML() {
        this.invokeInitializers(), this.initChildren()
    }, function initChildren() {
        if (this.children)for (var i = 0; i < this.children.length; i++)try {
            this.children[i].initHTML && this.children[i].initHTML()
        } catch (x) {
            console.log("Error on View.child.initHTML", x, x.stack)
        }
    }, function invokeInitializers() {
        for (var i = 0; i < this.initializers_.length; i++)this.initializers_[i]()
        this.initializers_ = []
    }, function invokeDestructors() {
        for (var i = 0; i < this.destructors_.length; i++)this.destructors_[i]()
        this.destructors_ = []
    }, function evtToCharCode(evt) {
        var s = ""
        return evt.altKey && (s += "alt-"), evt.ctrlKey && (s += "ctrl-"), evt.shiftKey && "keydown" === evt.type && (s += "shift-"), evt.metaKey && (s += "meta-"), s += "keydown" === evt.type ? this.NAMED_CODES[evt.which] || String.fromCharCode(evt.which) : String.fromCharCode(evt.charCode), s
    }, function initKeyboardShortcuts() {
        function init(actions, opt_value) {
            actions.forEach(function (action) {
                for (var j = 0; j < action.keyboardShortcuts.length; j++) {
                    var key = action.keyboardShortcuts[j]
                    self.NAMED_CODES[key] ? key = self.NAMED_CODES[key] : "number" == typeof key && (key = String.fromCharCode(key)), keyMap[key] = opt_value ? function () {
                        action.maybeCall(self.X, opt_value.get())
                    } : action.maybeCall.bind(action, self.X, self), found = !0
                }
            })
        }

        var keyMap = {}, found = !1, self = this
        if (init(this.model_.getRuntimeActions()), this.data && this.data.model_ && this.data.model_.getRuntimeActions().length && init(this.data.model_.getRuntimeActions(), this.data$), found) {
            console.assert(this.$, "View must define outer id when using keyboard shortcuts: " + this.name_), this.keyMap_ = keyMap
            var target = this.$parent
            target.setAttribute("tabindex", target.tabIndex + ""), target.addEventListener("keydown", this.onKeyboardShortcut), target.addEventListener("keypress", this.onKeyboardShortcut)
        }
    }, function destroy(isParentDestroyed) {
        this.invokeDestructors(), this.SUPER(isParentDestroyed), delete this.instance_.$
    }, function close() {
        this.$ && this.$.remove(), this.destroy(), this.publish("closed")
    }, function rectOnPage() {
        for (var node = this.$, x = 0, y = 0, parent, rect = this.$.getBoundingClientRect(); node;)parent = node, x += node.offsetLeft, y += node.offsetTop, node = node.offsetParent
        return {top: y, left: x, right: x + rect.width, bottom: y + rect.height, width: rect.width, height: rect.height}
    }, function rectOnViewport() {
        return this.$.getBoundingClientRect()
    }, function viewportOnPage() {
        var bodyRect = this.X.document.documentElement.getBoundingClientRect(), vpSize = this.viewportSize()
        return {
            left: -bodyRect.left,
            top: -bodyRect.top,
            width: vpSize.width,
            height: vpSize.height,
            right: -bodyRect.left + vpSize.width,
            bottom: -bodyRect.top + vpSize.height
        }
    }, function viewportSize() {
        return {
            height: window.innerHeight || this.X.document.documentElement.clientHeight,
            width: window.innerWidth || this.X.document.documentElement.clientWidth
        }
    }, function createView(prop, opt_args) {
        var X = opt_args && opt_args.X || this.Y, v = this.PropertyView.create({
            id: (this.nextID ? this.nextID() : this.id) + "PROP",
            prop: prop,
            copyFrom: opt_args
        }, X)
        return this[prop.name + "View"] = v.view, v
    }, function removeChild(child) {
        this.PropertyView.isInstance(child) && child.prop && delete this[child.prop.name + "View"], this.SUPER(child)
    }, function createRelationshipView(r, opt_args) {
        if (opt_args.model_)return this.createView(r, opt_args)
        var X = opt_args && opt_args.X || this.Y, v = this.AsyncLoadingView.create({
            id: this.nextID(),
            name: r.name,
            model: "foam.ui.RelationshipView",
            args: {relationship: r},
            copyFrom: opt_args
        }, X)
        return v.view && (v = v.view), this[r.name + "View"] = v, v
    }, function createActionView(action, opt_args) {
        var X = opt_args && opt_args.X || this.Y, modelName = opt_args && opt_args.model_ ? opt_args.model_ : "foam.ui.ActionButton", v = this.AsyncLoadingView.create({
            id: this.nextID(),
            name: action.name,
            model: modelName,
            args: {action: action},
            copyFrom: opt_args
        }, X)
        return v.view && (v = v.view), this[action.name + "View"] = v.cview || v, v
    }, function createTemplateView(name, opt_args) {
        var args = opt_args || {}, X = this.Y, myData = this.data$
        if (myData && myData.value && myData.value.model_) {
            var o = myData.value.model_.getFeature(name)
            if (o) {
                var v
                return v = Action.isInstance(o) ? this.createActionView(o, args) : Relationship.isInstance(o) ? this.createRelationshipView(o, args) : this.createView(o, args), this.addDataChild(v), v
            }
        }
        var o = this.model_.getFeature(name)
        if (!o)throw"Unknown View Name: " + name
        var v
        return v = Action.isInstance(o) ? this.createActionView(o, args) : Relationship.isInstance(o) ? this.createRelationshipView(o, args) : this.createView(o, args), this.addSelfDataChild(v), v
    }, function dynamicTag(tagName, f) {
        var id = this.nextID(), self = this
        return this.addInitializer(function () {
            self.X.dynamicFn(function () {
                var html = f(), e = self.X.$(id)
                e && (e.innerHTML = html)
            })
        }), "<" + tagName + ' id="' + id + '"></' + tagName + ">"
    }],
    listeners: [{
        name: "openTooltip", code: function (e) {
        }
    }, {
        name: "closeTooltip", code: function (e) {
            this.tooltip_ && (this.tooltip_.close(), this.tooltip_ = null)
        }
    }, {
        name: "onKeyboardShortcut", code: function (evt) {
            if ("keydown" !== evt.type || this.KEYPRESS_CODES[evt.which]) {
                var action = this.keyMap_[this.evtToCharCode(evt)]
                action && (action(), evt.preventDefault(), evt.stopPropagation())
            }
        }
    }]
}), CLASS({
    package: "foam.input.touch",
    name: "GestureTarget",
    properties: [{name: "id"}, {name: "gesture", help: "The name of the gesture to be tracked."}, {
        name: "containerID",
        help: "The containing DOM node's ID. Used for checking what inputs are within which gesture targets."
    }, {
        model_: "BooleanProperty",
        name: "enforceContainment",
        type: "Boolean",
        help: "Require that the start and end of a matching gesture be inside the container.",
        defaultValue: !1
    }, {
        name: "getElement", defaultValue: function () {
            return this.X.$(this.containerID)
        }, help: "Function to retrieve the element this gesture is attached to. Defaults to $(containerID)."
    }, {name: "handler", help: "The target for the gesture's events, after it has been recognized."}],
    help: "Created by each view that wants to receive gestures."
}), CLASS({
    package: "foam.ui", name: "ActionBorder", methods: [function toHTML(border, delegate, args) {
        var str = ""
        str += delegate.apply(this, args), str += '<div class="actionToolbar">'
        for (var actions = this.model_.getRuntimeActions(), i = 0; i < actions.length; i++) {
            var v = this.createActionView(actions[i])
            this.addSelfDataChild(v), str += " " + v.toView_().toHTML() + " "
        }
        if (this.X.lookup("foam.ui.DetailView").isInstance(this)) {
            actions = this.model.actions
            for (var i = 0; i < actions.length; i++) {
                var v = this.createActionView(actions[i])
                this.addDataChild(v), str += " " + v.toView_().toHTML() + " "
            }
        }
        return str += "</div>", str
    }]
}), CLASS({
    package: "foam.ui",
    name: "PropertyView",
    extends: "foam.ui.AsyncLoadingView",
    properties: [{
        name: "prop", postSet: function (old, nu) {
            old && this.bound_ && this.unbindData(this.data), nu && !this.bound_ && this.bindData(this.data), this.args = nu, this.model = this.innerView || nu.view
        }
    }, {
        name: "data", postSet: function (old, nu) {
            old && this.bound_ && this.unbindData(old), nu && this.bindData(nu)
        }
    }, {name: "childData"}, {
        name: "innerView", postSet: function (old, nu) {
            this.model = nu
        }, help: "Override for prop.view"
    }, {
        name: "view", adapt: function (_, v) {
            return v && v.toView_ ? v.toView_() : v
        }
    }, {model_: "BooleanProperty", name: "bound_", type: "Boolean", defaultValue: !1}, {
        name: "parent",
        postSet: function (_, p) {
            p && (p[this.prop.name + "View"] = this.view.cview || this.view, this.view && (this.view.parent = p))
        }
    }],
    methods: [function unbindData(oldData) {
        if (this.bound_ && oldData && this.prop) {
            var pValue = oldData.propertyValue(this.prop.name)
            Events.unlink(pValue, this.childData$), this.bound_ = !1
        }
    }, function bindData(data) {
        var self = this
        if (!this.bound_ && data && this.prop) {
            var pValue = data.propertyValue(this.prop.name)
            Events.link(pValue, this.childData$), this.prop.validate && this.X.dynamic3(data, this.prop.validate, function (error) {
                self.view && (self.view.$.style.border = error ? "2px solid red" : "")
            }), this.bound_ = !0
        }
    }, function toString() {
        return "PropertyView(" + this.prop.name + ", " + this.view + ")"
    }, function destroy(isParentDestroyed) {
        this.unbindData(this.data), this.SUPER(isParentDestroyed)
    }, function construct() {
        this.bindData(this.data), this.SUPER()
    }, function finishRender(view) {
        view.prop = this.prop, this.SUPER(view)
    }, function addDataChild(child) {
        Events.link(this.childData$, child.data$), this.addChild(child)
    }]
}), CLASS({
    package: "foam.ui",
    name: "AsyncLoadingView",
    extends: "foam.ui.BaseView",
    properties: [{model_: "StringProperty", name: "id", label: "Element ID", type: "String"}, {
        name: "name",
        label: "The parent view's name for this"
    }, {name: "model", label: "View model name, model definition, or JSON with a factory_ specified."}, {
        name: "args",
        label: "View construction arguments",
        defaultValueFn: function () {
            return {}
        }
    }, {
        name: "copyFrom", label: "Additional arguments to this.copyFrom(...) when ready.", lazyFactory: function () {
            return {}
        }
    }, {name: "view"}],
    methods: [function init() {
        this.SUPER()
        var skipKeysArgDecorator = Object.create(this.args)
        if (skipKeysArgDecorator.hasOwnProperty = this.skipKeysFn_hasOwnProperty, skipKeysArgDecorator.inner = this.args, this.copyFrom && this.copyFrom.model && (skipKeysArgDecorator.model = this.copyFrom.model), this.copyFrom && this.copyFrom.model_) {
            if ("string" == typeof this.copyFrom.model_)return this.requireModelName(this.copyFrom.model_, skipKeysArgDecorator)
            if (Model.isInstance(this.copyFrom.model_))return this.finishRender(this.copyFrom.model_.create(skipKeysArgDecorator, this.Y))
        }
        return "string" == typeof this.model ? this.requireModelName(this.model, skipKeysArgDecorator) : this.model.model_ && "string" == typeof this.model.model_ ? this.requireViewInstance(FOAM(this.model)) : this.model.model_ ? Model.isInstance(this.model) ? this.finishRender(this.model.create(skipKeysArgDecorator, this.Y)) : (this.mergeWithCopyFrom(this.model), this.finishRender(this.model.model_.create(skipKeysArgDecorator, this.Y))) : this.model.factory_ ? (this.mergeWithCopyFrom(this.model), this.requireModelName(this.model.factory_, skipKeysArgDecorator)) : "function" == typeof this.model ? this.finishRender(this.model(skipKeysArgDecorator, this.Y)) : (console.warn("AsyncLoadingView: View load with invalid model. ", this.model, this.args, this.copyFrom), void 0)
    }, function mergeWithCopyFrom(other) {
        for (var key in other)"factory_" != key && (this.copyFrom[key] = other[key])
    }, function skipKeysFn_hasOwnProperty(name) {
        return "factory_" != name && "model_" != name && "view" != name && this.inner.hasOwnProperty(name)
    }, function requireViewInstance(view) {
        view.arequire()(function (m) {
            this.finishRender(view)
        }.bind(this))
    }, function requireModelName(name, args) {
        this.X.arequire(name)(function (m) {
            this.finishRender(m.create(args, this.Y))
        }.bind(this))
    }, function finishRender(view) {
        if (this.copyFrom) {
            var skipKeysCopyFromDecorator = Object.create(this.copyFrom)
            skipKeysCopyFromDecorator.hasOwnProperty = this.skipKeysFn_hasOwnProperty, skipKeysCopyFromDecorator.inner = this.copyFrom, view.copyFrom(skipKeysCopyFromDecorator)
        }
        this.view = view.toView_(), this.addDataChild(this.view)
        var el = this.X.$(this.id)
        el && (el.outerHTML = this.toHTML(), this.initHTML())
    }, function toHTML() {
        return this.view ? this.view.toHTML() : '<div id="' + this.id + '"></div>'
    }, function initHTML() {
        this.view && this.view.initHTML()
    }, function toString() {
        return "AsyncLoadingView(" + this.model + ", " + this.view + ")"
    }, function fromElement(e) {
        return this.view.fromElement(e), this
    }]
}), CLASS({
    package: "foam.ui",
    name: "BaseView",
    extends: "foam.patterns.ChildTreeTrait",
    properties: [{name: "data"}],
    methods: [function addDataChild(child) {
        Events.link(this.data$, child.data$), this.addChild(child)
    }, function addSelfDataChild(child) {
        child.data = this, this.addChild(child)
    }, function toView_() {
        return this
    }]
}), CLASS({
    package: "foam.patterns",
    name: "ChildTreeTrait",
    properties: [{name: "parent", visibility: "hidden", hidden: !0}, {
        name: "children", factory: function () {
            return []
        }
    }],
    methods: [function onAncestryChange_() {
        Array.prototype.forEach.call(this.children, function (c) {
            c.onAncestryChange_ && c.onAncestryChange_()
        })
    }, function addChild(child) {
        if (child.parent !== this) {
            child.parent = this, child.onAncestryChange_ && child.onAncestryChange_()
            var children = this.children
            return children.push(child), this.children = children, this
        }
    }, function removeChild(child) {
        return child.destroy && child.destroy(!0), this.children.deleteI(child), child.parent = void 0, this
    }, function removeAllChildren(isParentDestroyed) {
        var list = this.children
        this.children = [], Array.prototype.forEach.call(list, function (child) {
            this.removeChild(child)
        }.bind(this))
    }, function addChildren() {
        for (var i = 0; i < arguments.length; ++i)this.addChild(arguments[i])
        return this
    }, function destroy(isParentDestroyed) {
        return isParentDestroyed ? (Array.prototype.forEach.call(this.children, function (child) {
            child.destroy && child.destroy(!0)
        }), this.children = []) : this.removeAllChildren(), this
    }, function construct() {
        return this
    }, function deepPublish(topic) {
        var count = this.publish.apply(this, arguments)
        if (this.children)for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i]
            count += child.deepPublish.apply(child, arguments)
        }
        return count
    }]
}), CLASS({
    package: "foam.core.types",
    name: "DocumentInstallProperty",
    extends: "Property",
    properties: [{model_: "FunctionProperty", name: "documentInstallFn", type: "Function"}, {
        name: "hidden",
        defaultValue: !0
    }],
    methods: [function initPropertyAgents(proto, fastInit) {
        this.SUPER(proto, fastInit)
        var thisProp = this, DocumentInstallProperty = thisProp.model_
        if (proto.addInitAgent(12, ": install in document ", function (o, X, Y) {
                var model = o.model_
                model && X.installedModels && !X.installedModels[model.id] && thisProp.documentInstallFn.call(proto, X)
            }), proto.__proto__.model_) {
            var recurse = function (baseProto) {
                var baseProp = baseProto.model_.getProperty(thisProp.name)
                baseProp && (proto.addInitAgent(12, ": inherited install in document ", function (o, X, Y) {
                    var model = baseProto.model_
                    model && X.installedModels && !X.installedModels[model.id] && baseProp.documentInstallFn.call(baseProto, X)
                }), proto.addInitAgent(13, ": completed inherited install in document ", function (o, X, Y) {
                    X.installedModels[baseProto.model_.id] = !0
                }), baseProto.__proto__.model_ && recurse(baseProto.__proto__))
            }
            recurse(proto.__proto__)
        }
        proto.addInitAgent(13, ": completed install in document ", function (o, X, Y) {
            X.installedModels[o.model_.id] = !0
        })
    }],
    help: "Describes a function property that runs once per document"
}), CLASS({
    package: "foam.ui", name: "U2ViewTrait", methods: [function toE() {
        return this
    }, function load() {
        return this.initHTML && this.initHTML()
    }, function unload() {
        return this.destroy && this.destroy()
    }, function toString() {
        return this.toHTML ? this.toHTML() : ""
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "ReloadSpeedtest",
    extends: "foam.ui.SimpleView",
    imports: ["document"],
    actions: [{
        name: "reloadSpeedtest", label: "RELOAD", code: function () {
            window.location.reload(!0)
        }
    }],
    messages: [{
        model_: "Message",
        name: "reloadSpeedtestTitle",
        value: "Reload speed test",
        translationHint: "Title for dialog to reload Speedtest."
    }, {
        model_: "Message",
        name: "reloadSpeedtestText",
        value: "Please reload the speed test to get the latest changes.",
        translationHint: "Text to show when reloading."
    }],
    methods: [function open() {
        this.document.body.insertAdjacentHTML("beforeend", this.toHTML()), this.initHTML()
    }, function initHTML() {
        this.SUPER()
        var el = document.getElementById("reload-overlay")
        el.style.visibility = "visible", this.document.body.addEventListener("mouseup", this.onTouch), this.document.body.addEventListener("touchstart", this.onTouch)
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate("#reload-overlay{visibility:hidden;position:absolute;left:0px;top:0px;width:100%;height:100%;text-align:center;z-index:1000}.reload-container{position:absolute;top:50%;left:50%}.reload-speedtest-popup{background-color:white;-webkit-box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);box-shadow:0px 0px 32px 0px rgba(0, 0, 0, 0.6);font-family:'Roboto', sans-serif;transition:opacity 300ms ease-in-out;width:320px;position:absolute;height:240px;margin-left:-160px;margin-top:-120px}.reload-speedtest-title{font-size:1.5em;margin:20px}.reload-speedtest-text{color:#666;margin:20px}.reload-speedtest-buttons{display:-webkit-flex;display:flex;-webkit-justify-content:flex-end;justify-content:flex-end}.reload-speedtest-buttons a{text-decoration:none;color:#0091EA;padding:20px;cursor:pointer}.reload-speedtest-buttons a:hover{background-color:#E5E5E5}"),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="reload-overlay">\n        <div class="reload-container">\n          <div class="reload-speedtest-popup">\n            <div class="reload-speedtest-title">', self.reloadSpeedtestTitle, '</div>\n            <div class="reload-speedtest-text">', self.reloadSpeedtestText, '</div>\n            <div class="reload-speedtest-buttons">\n              ', self.createTemplateView("reloadSpeedtest", {tagName: "a"}), "\n            </div>\n          </div>\n        </div>\n      </div>\n     "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "RequestPool",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    requires: ["com.google.fiber.speedtest.Request"],
    properties: [{model_: "ArrayProperty", name: "availableRequests"}, {
        model_: "IntProperty",
        name: "activeRequests",
        defaultValue: 0
    }, {model_: "IntProperty", name: "requestsCreated", defaultValue: 0}, {
        model_: "IntProperty",
        name: "requestsTaken",
        defaultValue: 0
    }, {model_: "IntProperty", name: "requestsReturned", defaultValue: 0}],
    methods: [function createRequest() {
        var request = this.Request.create({id: this.requestsCreated++})
        return request
    }, function reserve(size) {
        for (var numToCreate = size - this.availableRequests.length - this.activeRequests, i = 0; i < numToCreate; ++i)this.availableRequests.push(this.createRequest())
    }, function takeRequest() {
        this.activeRequests++
        var request = this.availableRequests.pop()
        return request || (request = this.createRequest()), this.requestsTaken++, request
    }, function returnRequest(request) {
        request && this.availableRequests.indexOf(request) == -1 && (this.activeRequests--, this.requestsReturned++, request.reset(), this.availableRequests.push(request))
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "Request",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    requires: ["com.google.fiber.speedtest.Multimap"],
    properties: [{
        name: "xhr", lazyFactory: function () {
            return new XMLHttpRequest
        }
    }, {
        name: "eventListeners", lazyFactory: function () {
            return this.Multimap.create()
        }
    }, {
        name: "uploadEventListeners", lazyFactory: function () {
            return this.Multimap.create()
        }
    }, {
        name: "response", getter: function () {
            return "json" == this.internalResponseType && "json" != this.xhr.responseType ? JSON.parse(this.xhr.response) : this.xhr.response
        }
    }, {
        name: "responseText", getter: function () {
            return this.xhr.responseText
        }
    }, {
        name: "responseType", getter: function () {
            return this.internalResponseType
        }, setter: function (value) {
            this.internalResponseType = value
            try {
                this.xhr.responseType = value
            } catch (e) {
            }
        }
    }, {
        name: "timeout", getter: function () {
            return this.xhr.timeout
        }, setter: function (value) {
            this.xhr.timeout = value
        }
    }, {
        name: "status", getter: function () {
            return this.xhr.status
        }
    }, {
        name: "supportsProgress", getter: function () {
            return "onprogress" in this.xhr
        }
    }, {
        name: "readyState", getter: function () {
            return this.xhr.readyState
        }
    }, {
        name: "contentType", setter: function (value) {
            this.internalContentType = value, this.xhr.setRequestHeader("Content-Type", value)
        }
    }, {name: "id"}, {name: "internalResponseType"}],
    constants: [{name: "DONE", value: 4}],
    methods: [function addEventListener(type, listener, useCapture, wantsUntrusted) {
        this.xhr.addEventListener(type, listener, useCapture, wantsUntrusted), this.eventListeners.add(type, listener)
    }, function removeEventListener(type, listener, useCapture) {
        this.xhr.removeEventListener(type, listener, useCapture), this.eventListeners.removeValue(type, listener)
    }, function addUploadEventListener(type, listener, useCapture, wantsUntrusted) {
        this.xhr.upload.addEventListener(type, listener, useCapture, wantsUntrusted), this.uploadEventListeners.add(type, listener)
    }, function removeUploadEventListener(type, listener, useCapture) {
        this.xhr.upload.removeEventListener(type, listener, useCapture), this.uploadEventListeners.removeValue(type, listener)
    }, function open(method, url, async, user, password) {
        void 0 === async && (async = !0), this.xhr.open(method, url, async, user, password)
    }, function send(data) {
        this.xhr.send(data)
    }, function abort() {
        this.xhr.abort()
    }, function reset() {
        var self = this
        this.eventListeners.forEach(function (type, listener) {
            self.xhr.removeEventListener(type, listener)
        }), this.eventListeners.clear(), this.uploadEventListeners.forEach(function (type, listener) {
            self.xhr.upload.removeEventListener(type, listener)
        }), this.uploadEventListeners.clear()
        try {
            this.xhr.open("GET", "about:blank")
        } catch (e) {
        }
        this.internalResponseType = ""
        try {
            this.xhr.responseType = ""
        } catch (e) {
        }
        try {
            this.xhr.timeout = 0
        } catch (e) {
        }
        if (this.xhr.response = null, this.xhr.responseText = null, this.internalContentType) {
            try {
                this.xhr.setRequestHeader("Content-Type", null)
            } catch (e) {
            }
            this.internalContentType = null
        }
        this.xhr.abort()
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "Multimap",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    properties: [{
        name: "map", lazyFactory: function () {
            return {}
        }
    }],
    methods: [function add(key, value) {
        this.isArray(this.map[key]) ? this.map[key].push(value) : this.map[key] = [value]
    }, function set(key, value) {
        this.map[key] = [value]
    }, function removeValue(key, value) {
        var values = this.map[key]
        values && this.isArray(values) && (this.map[key] = values.filter(function (element) {
            return element !== value
        }))
    }, function removeKey(key) {
        delete this.map[key]
    }, function clear(key, value) {
        this.map = {}
    }, function forEach(f) {
        for (var key in this.map)if (this.map.hasOwnProperty(key))for (var values = this.map[key], len = values.length, i = 0; i < len; ++i)f(key, values[i])
    }]
}), CLASS({
    package: "com.google.fiber.speedtest", name: "SpeedTestUtils", methods: [function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n)
    }, function round(n) {
        n = Math.max(0, n)
        var amt = 0
        return n < 10 ? amt = 2 : n < 100 && (amt = 1), n.toFixed(amt)
    }, function megabits(bytes, millis) {
        return bytes / (125 * millis)
    }, function isArray(obj) {
        return obj && obj.constructor == Array
    }, function removeElement(array, value) {
        var elementsRemoved = !1
        if (this.isArray(array))for (var i = 0; i < array.length;)array[i] === value ? (array.splice(i, 1), elementsRemoved = !0) : i++
        return elementsRemoved
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TestDownloadSpeed",
    extends: "com.google.fiber.speedtest.AbstractTransferTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    properties: [{name: "downloadSize", defaultValue: 1e7}],
    methods: [function getBigFile(id) {
        var self = this, request = this.pool.takeRequest()
        if (self.requests[id] = request, request.open("GET", this.getServerUrl(id) + "/download?size=" + encodeURIComponent(this.downloadSize)), request.responseType = "blob", request.addEventListener("load", function (evt) {
                self.requestsSucceeded++
            }), request.supportsProgress) {
            var last_loaded = 0
            request.addEventListener("progress", function (evt) {
                if (!self.running)return request.abort(), void 0
                var amt = evt.loaded - last_loaded
                last_loaded = evt.loaded, self.bytesTransferred += amt
            })
        } else request.addEventListener("load", function (evt) {
            return self.running ? (self.bytesTransferred += request.response.size, void 0) : (request.abort(), void 0)
        })
        request.addEventListener("loadend", function () {
            self.pool.returnRequest(request), request = null, self.requests[id] = null, self.running && self.getBigFile(id)
        }), this.requestsStarted++, request.send()
    }, function start() {
        if (this.running)return !1
        this.running = !0, this.bytesTransferred = 0, this.startMillis = window.performance.now(), this.endMillis = null, this.requestsStarted = 0, this.requestsSucceeded = 0
        for (var i = 0; i < this.numTransfers; i++)this.getBigFile(i)
        return !0
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "AbstractTransferTest",
    extends: "com.google.fiber.speedtest.AbstractSpeedTest",
    properties: [{
        model_: "IntProperty",
        name: "startPort",
        swiftDefaultValue: "3051",
        defaultValue: 3051
    }, {
        model_: "IntProperty",
        name: "endPort",
        swiftDefaultValue: "3070",
        defaultValue: 3070
    }, {model_: "ArrayProperty", name: "requests", swiftType: "[NSURLSessionTask]"}, {
        model_: "IntProperty",
        name: "numTransfers",
        swiftDefaultValue: "20",
        defaultValue: 20
    }, {model_: "IntProperty", name: "requestsStarted"}, {
        model_: "IntProperty",
        name: "requestsSucceeded"
    }, {model_: "LongProperty", name: "bytesTransferred", defaultValue: 0}, {
        name: "server", defaultValue: "", postSet: function (o, n) {
            if (!n)return this.baseUrl = "//" + window.location.hostname, n
            var index = n.search(/(:\d+)?\/?$/)
            return index >= 0 ? this.baseUrl = n.substr(0, index) : this.baseUrl = n, n
        }
    }, {
        name: "baseUrl", defaultValueFn: function () {
            return "//" + window.location.hostname
        }
    }, {name: "startPort"}, {name: "endPort"}],
    methods: [function getServerUrl(id) {
        var numPorts = this.endPort - this.startPort + 1, port = this.startPort + id % numPorts
        return this.baseUrl + ":" + port
    }, function abortRequests() {
        for (var i = 0; i < this.requests.length; i++)this.requests[i] && this.requests[i].abort()
    }, function start() {
        return !1
    }, function stop() {
        return !!this.running && (this.running = !1, this.abortRequests(), this.endMillis = window.performance.now(), !0)
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "AbstractSpeedTest",
    requires: ["com.google.fiber.speedtest.RequestPool"],
    properties: [{
        model_: "BooleanProperty",
        name: "running",
        swiftDefaultValue: "false",
        defaultValue: !1
    }, {name: "startMillis", defaultValue: ""}, {name: "endMillis", defaultValue: ""}, {name: "pool"}],
    methods: [function start() {
        return !1
    }, function stop() {
        return !1
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TestPingLatency",
    extends: "com.google.fiber.speedtest.AbstractSpeedTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    imports: ["setInterval", "clearInterval", "logger"],
    properties: [{model_: "FloatProperty", name: "minPingMillis"}, {
        model_: "FloatProperty",
        name: "meanPingMillis"
    }, {name: "runtimeMillis", defaultValue: 3e3}, {name: "timeoutMillis", defaultValue: 300}, {
        name: "server",
        defaultValue: ""
    }, {name: "pingsSent"}, {name: "pingsSucceeded"}, {name: "pingErrors"}, {name: "pingTimeouts"}, {name: "totalPingMillis"}, {name: "intervalId_"}, {name: "id"}, {name: "name"}, {name: "currentPing"}, {
        name: "exitOnSuccess",
        defaultValue: !1
    }],
    methods: [function receivePing(pingMillis) {
        !this.running || pingMillis <= 0 || (this.isNumber(this.minPingMillis) && this.minPingMillis > 0 ? this.minPingMillis = Math.min(pingMillis, this.minPingMillis) : this.minPingMillis = pingMillis, this.totalPingMillis += pingMillis, this.pingsSucceeded++, this.id ? this.logger.info("Ping to " + this.id + " (" + this.server + ") in " + pingMillis.toFixed(2) + " ms (min " + this.minPingMillis.toFixed(2) + " ms)") : this.logger.info("Ping " + pingMillis.toFixed(2) + " ms (min " + this.minPingMillis.toFixed(2) + " ms)"), this.meanPingMillis = this.totalPingMillis / this.pingsSucceeded, this.exitOnSuccess && this.stop())
    }, function ping() {
        var self = this
        if (self.running && !self.currentPing) {
            var started = window.performance.now(), request = this.pool.takeRequest()
            request.open("GET", this.server + "ping?time=" + encodeURIComponent(started)), request.responseType = "text", request.timeout = self.timeoutMillis, request.addEventListener("error", function (e) {
                var ended = window.performance.now(), error = "status " + request.status + " readyState " + request.readyState + " after " + (ended - started).toFixed(2) + " ms"
                return self.id ? self.logger.info("Ping error to " + self.id + " (" + self.server + ") " + error) : self.logger.info("Ping error status " + error), !1
            }), request.addEventListener("timeout", function (e) {
                return self.pingTimeouts++, self.id ? self.logger.warn("Ping to " + self.id + " (" + self.server + ") timed out after " + self.timeoutMillis + " ms") : self.logger.warn("Ping timed out after " + self.timeoutMillis + " ms"), !1
            }), request.addEventListener("load", function (evt) {
                if (self.running)return 200 != request.status ? (self.pingErrors++, void 0) : (self.receivePing(window.performance.now() - started), void 0)
            }), request.addEventListener("loadend", function () {
                self.pool.returnRequest(request), self.currentPing = null
            }), self.currentPing = request, self.pingsSent++, request.send()
        }
    }, function start() {
        return !this.running && (this.server ? this.logger.info("Starting ping to " + this.server + " with timeout " + this.timeoutMillis + " ms") : this.logger.info("Starting ping with timeout " + this.timeoutMillis + " ms"), this.running = !0, this.startMillis = window.performance.now(), this.endMillis = null, this.minPingMillis = "", this.meanPingMillis = 0, this.pingsSent = 0, this.pingsSucceeded = 0, this.totalPingMillis = 0, this.pingErrors = 0, this.pingTimeouts = 0, this.currentPing = null, this.intervalId_ = this.setInterval(function () {
                if (this.running)return window.performance.now() >= this.startMillis + this.runtimeMillis ? (this.stop(), void 0) : (this.ping(), void 0)
            }.bind(this), 100), !0)
    }, function stop() {
        return this.currentPing && (this.currentPing.abort(), this.currentPing = null), !!this.running && (this.running = !1, this.endMillis = window.performance.now(), this.intervalId_ && (this.clearInterval(this.intervalId_), this.intervalId_ = null), !0)
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TestUploadSpeed",
    extends: "com.google.fiber.speedtest.AbstractTransferTest",
    properties: [{name: "uploadData"}],
    methods: [function putBigFile(id) {
        var self = this, request = this.pool.takeRequest()
        self.requests[id] = request, request.open("POST", this.getServerUrl(id) + "/upload?time=" + encodeURIComponent(window.performance.now())), request.addEventListener("load", function (evt) {
            self.requestsSucceeded++
        })
        var last_loaded = 0
        request.addUploadEventListener("progress", function (evt) {
            if (!self.running)return request.abort(), void 0
            var amt = evt.loaded - last_loaded
            last_loaded = evt.loaded, self.bytesTransferred += amt
        }), request.addEventListener("loadend", function () {
            self.pool.returnRequest(request), request = null, self.requests[id] = null, self.running && self.putBigFile(id)
        }), this.requestsStarted++, request.send(this.uploadData)
    }, function start() {
        if (this.running)return !1
        this.running = !0, this.bytesTransferred = 0, this.startMillis = window.performance.now(), this.endMillis = null, this.requestsStarted = 0, this.requestsSucceeded = 0
        for (var i = 0; i < this.numTransfers; i++)this.putBigFile(i)
        return !0
    }, function stop() {
        return this.SUPER(), this.uploadData = null, !0
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "TransferTestRunner",
    extends: "com.google.fiber.speedtest.AbstractSpeedTest",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    imports: ["setInterval", "clearInterval", "logger"],
    properties: [{
        name: "data", postSet: function (o, n) {
            return this.startMillis$ = n.startMillis$, this.endMillis$ = n.endMillis$, n
        }
    }, {name: "minRunTimeMillis", defaultValue: 5e3}, {
        name: "maxRunTimeMillis",
        defaultValue: 1e4
    }, {name: "minPostRampMillis", defaultValue: 2e3}, {name: "endRampUpTimeMillis"}, {
        model_: "ArrayProperty",
        name: "intervals",
        defaultValueFn: function () {
            return []
        }
    }, {name: "minIntervals", defaultValue: 10}, {name: "maxIntervals", defaultValue: 20}, {
        name: "maxVariance",
        defaultValue: .1
    }, {name: "initialVariance", defaultValue: 0}, {
        model_: "FloatProperty",
        name: "speed",
        units: "Mbps",
        defaultValue: 0,
        swiftDefaultValue: "0"
    }, {
        name: "intervalMillis",
        defaultValue: 100
    }, {name: "intervalId"}, {name: "shortSpeedMbps"}, {name: "longSpeedMbps"}, {name: "prevShortSpeedMbps"}, {name: "prevLongSpeedMbps"}, {name: "rampingUp"}, {
        name: "averageType",
        defaultValue: "SIMPLE"
    }, {
        name: "totalBytes", getter: function () {
            return this.intervals && this.intervals.length ? this.intervals[this.intervals.length - 1].totalBytes : 0
        }
    }],
    methods: [function start() {
        this.data.start() && (this.intervals = [{
            totalBytes: 0,
            offsetMillis: 0,
            shortSpeedMbps: 0,
            longSpeedMbps: 0,
            prevShortSpeedMbps: 0,
            prevLongSpeedMbps: 0
        }], this.intervalId = this.setInterval(this.update.bind(this), this.intervalMillis), this.rampingUp = !0), this.speed = 0
    }, function update() {
        var speed = 0, stop = !1
        if (this.data) {
            var interval = {
                totalBytes: this.data.bytesTransferred,
                offsetMillis: window.performance.now() - this.data.startMillis
            }
            this.intervals.push(interval), "EXPONENTIAL" == this.averageType ? (interval.shortSpeedMbps = this.calculateEma("shortSpeedMbps", this.minIntervals), interval.longSpeedMbps = this.calculateEma("longSpeedMbps", this.maxIntervals)) : (interval.shortSpeedMbps = this.getIntervalSpeed(this.minIntervals), interval.longSpeedMbps = this.getIntervalSpeed(this.maxIntervals)), this.prevShortSpeedMbps = this.shortSpeedMbps, this.prevLongSpeedMbps = this.longSpeedMbps, this.shortSpeedMbps = interval.shortSpeedMbps, this.longSpeedMbps = interval.longSpeedMbps, speed = (this.longSpeedMbps + this.shortSpeedMbps) / 2, this.isDone() && (this.clearInterval(this.intervalId), stop = !0)
        }
        this.speed = speed, this.logger.info("Speed: " + speed.toFixed(2) + " (Short: " + this.shortSpeedMbps.toFixed(2) + ", Long: " + this.longSpeedMbps.toFixed(2) + ")"), stop && (this.logger.info("Stopping transfer test"), this.data.stop())
    }, function isDone() {
        if (!this.longSpeedMbps || !this.shortSpeedMbps)return !1
        var runningTime = this.getRunningTime()
        if (runningTime > this.maxRunTimeMillis)return this.logger.info("Max runtime exceeded. Ending"), !0
        var maxVariance = this.getEffectiveMaxVariance(runningTime)
        if (this.rampingUp) {
            var limitMbps = this.prevShortSpeedMbps * (1 + maxVariance)
            if (this.shortSpeedMbps > limitMbps)return !1
            this.logger.info("Ramping up ended"), this.endRampUpMillis = window.performance.now(), this.rampingUp = !1
        }
        if (runningTime <= this.minRunTimeMillis)return !1
        var postRampMillis = window.performance.now() - this.endRampUpMillis
        if (postRampMillis < this.minPostRampMillis)return !1
        var variance = 1 - Math.min(this.shortSpeedMbps, this.longSpeedMbps) / Math.max(this.shortSpeedMbps, this.longSpeedMbps)
        return variance <= maxVariance
    }, function getIntervalSpeed(intervals) {
        if (!this.intervals.length || intervals <= 0)return 0
        var end = this.intervals.length - 1, last = this.intervals[end], start = Math.max(0, end - intervals), first = this.intervals[start], bytes = last.totalBytes - first.totalBytes, time = last.offsetMillis - first.offsetMillis
        return this.megabits(bytes, time)
    }, function calculateEma(rangeType, period) {
        var numIntervals = this.intervals.length
        if (0 != numIntervals) {
            if (1 == numIntervals)return this.intervals[0][rangeType] = 0, void 0
            var end = numIntervals - 1, last = this.intervals[end], prev = this.intervals[end - 1], prevEma = prev[rangeType], lastSpeed = this.getIntervalSpeed(1), percent = 2 / (period + 1), ema = lastSpeed * percent + prevEma * (1 - percent)
            return last[rangeType] = ema, ema
        }
    }, function getRunningTime() {
        if (!this.startMillis)return null
        var end = this.endMillis ? this.endMillis : window.performance.now()
        return end - this.startMillis
    }, function getEffectiveMaxVariance(opt_runningTime) {
        if (this.initialVariance <= 0 || this.initialVariance >= this.maxVariance)return this.maxVariance
        if (void 0 === opt_runningTime && (opt_runningTime = this.getRunningTime()), null === opt_runningTime || opt_runningTime <= this.minRunTimeMillis)return this.maxVariance
        var effectiveMaxVariance
        if (opt_runningTime >= this.maxRunTimeMillis)effectiveMaxVariance = this.maxVariance
        else {
            var runtimeRatio = (opt_runningTime - this.minRunTimeMillis) / (this.maxRunTimeMillis - this.minRunTimeMillis)
            effectiveMaxVariance = this.initialVariance + runtimeRatio * (this.maxVariance - this.initialVariance)
        }
        return effectiveMaxVariance
    }, function stop() {
        return this.intervalId && (this.clearInterval(this.intervalId), this.intervalId = null), this.data.stop()
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTestView",
    extends: "foam.ui.SimpleView",
    requires: ["com.google.fiber.speedtest.SpeedTestGauge", "foam.ui.md.FlatButton"],
    properties: [{
        name: "speedometerView", lazyFactory: function () {
            return this.SpeedTestGauge.create({data$: this.data.currentSpeedMbps$})
        }
    }, {
        name: "data", postSet: function (o, n) {
            o && o.running$.removeListener(this.onRunningChanged), n.running$.addListener(this.onRunningChanged)
        }
    }],
    actions: [{
        name: "showMoreMenu", label: "&#x205E;", code: function () {
            this.MoreMenuPopUp.create().open(this.X.$("more-menu"))
        }
    }],
    messages: [{
        model_: "Message",
        name: "speedTest",
        value: "Speed test",
        translationHint: "Label for date of last speed test."
    }, {
        model_: "Message",
        name: "uploadSpeedMbps",
        value: "UPLOAD",
        translationHint: "Label for upload speed indicator."
    }, {
        model_: "Message",
        name: "downloadSpeedMbps",
        value: "DOWNLOAD",
        translationHint: "Label for download speed indicator."
    }, {
        model_: "Message",
        name: "ping",
        value: "PING:",
        translationHint: "Label for ping indicator."
    }, {
        model_: "Message",
        name: "whatSpeedsToExpectLabel",
        value: "What speeds should I expect?",
        translationHint: "Label that, when clicked, brings the user to a help page that describes the speeds they should expect."
    }, {model_: "Message", name: "learnMore", value: "Learn more", translationHint: "Learn more"}],
    listeners: [{
        name: "onRunningChanged", code: function () {
            this.data.running ? this.$.classList.add("running") : this.$.classList.remove("running")
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate('html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video{margin:0;padding:0;border:0;font:inherit;font-size:100%;vertical-align:baseline}html, body{margin:0;padding:0;height:100%;background-color:#F5F5F5}.speed-test{-webkit-tap-highlight-color:rgba(0, 0, 0, 0);font-family:\'Roboto\', sans-serif;min-width:300px;position:relative;height:auto !important;height:100%;min-height:100%}#top{padding-bottom:270px}#footer{position:absolute;bottom:0;height:240px;width:100%;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;-webkit-align-content:center;align-content:center;background-color:#272A2C;font-family:"Roboto","Noto Sans",sans-serif}#logo{display:-webkit-flex;display:flex;-webkit-justify-content:space-between;justify-content:space-between;-webkit-align-content:center;align-content:center;-webkit-align-items:center;align-items:center;height:56px;background-color:#0091EA;width:100%;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, .14),0 4px 8px rgba(0, 0, 0, .28);box-shadow:0 0 4px rgba(0, 0, 0, .14),0 4px 8px rgba(0, 0, 0, .28);margin:0 0 6px 0;color:white}#logo img{padding-left:4px;height:38px;width:auto}#send-feedback, #send-feedback-large{padding:16px;text-decoration:none;color:white;font-weight:bold;cursor:pointer}#send-feedback-large{display:none}.flat-button{cursor:pointer}.container{max-width:600px;margin:auto}#header{display:-webkit-flex;display:flex;-webkit-justify-content:space-between;justify-content:space-between;-webkit-align-items:center;align-items:center;-webkit-align-content:center;align-content:center;margin:16px auto 6px;padding:0 12px}@media screen and (min-width: 800px){#header{padding:0}#logo img{padding-left:26px}#send-feedback{display:none}#send-feedback-large{display:inline}}#title{color:#0091EA;font-size:24px}#network{color:#333333;font-size:15px}#speed-test{-webkit-box-shadow:0 -1px 0 #e5e5e5,0 0 2px rgba(0, 0, 0, .12),0 2px 4px rgba(0, 0, 0, .24);box-shadow:0 -1px 0 #e5e5e5,0 0 2px rgba(0, 0, 0, .12),0 2px 4px rgba(0, 0, 0, .24)}#speedometer{background-color:#F9F9F9;text-align:center;height:211px;padding-top:16px}#speed-result{background-color:white;border-top:1px solid #DDD}.status{display:block;font-weight:700;font-size:14px;color:#666;padding-top:12px}.footer-row{display:-webkit-flex;display:flex;color:#666;font-size:16px;padding:8px 16px;-webkit-align-items:center;align-items:center}.underlined-content{border-bottom:solid 1px #DAD9D9}.footer-half{width:50%;text-align:center;-webkit-align-self:flex-start;align-self:flex-start}.footer-row .material-icons-extended{width:40px;color:#66BDF2}.speed-label{font-weight:700;padding:6px 8px 6px 16px}.label-row{display:-webkit-flex;display:flex;-webkit-align-items:stretch;align-items:stretch;-webkit-justify-content:center;justify-content:center;width:100%}.label-row .speed-label{padding:2px 16px 2px 2px}.footer-row .speed-value{white-space:nowrap;padding-right:32px;padding:6px 0}.transfer-speed{font-size:36px}.action-button{-webkit-box-shadow:0 0 0px rgba(0, 0, 0, .14),0 2px 2px rgba(0, 0, 0, .28);box-shadow:0 0 0px rgba(0, 0, 0, .14),0 2px 2px rgba(0, 0, 0, .28);background-color:#0091EA;border-radius:50% 50%;border-width:0;height:48px;width:48px;display:inline-block;font-size:24px;color:white;line-height:48px;text-align:center;float:right;margin:-24px 62px -24px -0;padding:0;transition:background-color 300ms, transform 300ms;-webkit-user-select:none;user-select:none}.action-button:focus{outline-width:0}.action-button:disabled{background-color:#7DC7F7;-webkit-transform:rotate(1.0turn);transform:rotate(1.0turn);-webkit-transform:rotate(1.0turn);cursor:default}.action-button img{margin:6px}#cancel-test{display:none}.running #run-test{display:none}.running #cancel-test{display:inline}#ping{padding-left:50px}#speeds{height:5em;padding-left:30px;padding-right:30px}#expected-speeds{text-align:center;padding:16px 8px;font-size:16px;color:#666}#expected-speeds a{text-decoration:none;color:#0091EA}#footer .footer-content{display:-webkit-flex;display:flex;-webkit-justify-content:space-around;justify-content:space-around;-webkit-align-items:flex-start;align-items:flex-start;-webkit-align-content:center;align-content:center;width:100%;margin:0 auto}#footer .footer-section{padding:24px 12px 0}#footer .footer-group-title{color:#fff;cursor:default;letter-spacing:2px;font-size:12px;font-weight:600;text-transform:uppercase}#footer .footer-link-group{margin:24px 0}#footer .footer-item{font-size:14px;line-height:16px;margin-top:8px}#footer .footer-link{color:#fff;opacity:.48;position:relative;-webkit-transition:opacity 160ms cubic-bezier(0.4, 0, 1, 1);transition:opacity 160ms cubic-bezier(0.4, 0, 1, 1)}#footer a{cursor:pointer;text-decoration:none}ol, ul{list-style:none}li{display:list-item;text-align:-webkit-match-parent}'),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="', self.id, '" class="speed-test">\n        <div id="top">\n          <div id="logo">\n            <img src="/logo.png" alt="Google Fiber">\n            ', self.createTemplateView("sendFeedback", {
                id: "send-feedback",
                className: "flat-button",
                tagName: "a"
            }), "\n            ", self.createTemplateView("sendFeedbackLarge", {
                id: "send-feedback-large",
                className: "flat-button",
                tagName: "a"
            }), '\n          </div>\n          <div id="header" class="container">\n            <h1 id="title">', self.speedTest, '</h1>\n            <div id="network">\n              ', self.createTemplateView("speedToLabel", {
                mode: "read-only",
                className: "speed-to-label"
            }), "\n              ", self.createTemplateView("speedTo", {
                mode: "read-only",
                className: "speed-to"
            }), '\n            </div>\n          </div>\n          <div id="speed-test" class="container">\n            <div id="speedometer">\n              ', this.speedometerView, "\n              ", self.createTemplateView("status", {
                mode: "read-only",
                extraClassName: "status"
            }), '\n            </div>\n            <div id="speed-result">\n              ', self.createTemplateView("runTest", {
                id: "run-test",
                className: "flat-button",
                extraClassName: "action-button"
            }), "\n              ", self.createTemplateView("cancelTest", {
                id: "cancel-test",
                className: "flat-button",
                extraClassName: "action-button"
            }), '\n              <div id="ping" class="footer-row">\n                <div class="speed-label">', self.ping, '</div>\n                <div class="speed-value">\n                  ', self.createTemplateView("ping", {mode: "read-only"}), "\n                  ", self.createTemplateView("pingUnits", {mode: "read-only"}), '\n                </div>\n              </div>\n              <div id="speeds" class="footer-row">\n                <div class="footer-half">\n                  <div class="label-row">\n                    <img src="/ic_file_download_black_24dp_1x.png">\n                    <div class="speed-label">', self.downloadSpeedMbps, '</div>\n                  </div>\n                  <div class="speed-value upload-speed">\n                    ', self.createTemplateView("downloadSpeedMbps", {
                mode: "read-only",
                className: "transfer-speed"
            }), "\n                    ", self.createTemplateView("downloadSpeedUnits", {
                mode: "read-only",
                className: "transfer-units"
            }), '\n                  </div>\n                </div>\n                <div class="footer-half">\n                  <div class="label-row">\n                    <img src="/ic_file_upload_black_24dp_1x.png">\n                    <div class="speed-label">', self.uploadSpeedMbps, '</div>\n                  </div>\n                  <div class="speed-value download-speed">\n                    ', self.createTemplateView("uploadSpeedMbps", {
                mode: "read-only",
                className: "transfer-speed"
            }), "\n                    ", self.createTemplateView("uploadSpeedUnits", {
                mode: "read-only",
                className: "transfer-units"
            }), '\n                  </div>\n                </div>\n              </div>\n              <div id="expected-speeds">\n                <span>', self.whatSpeedsToExpectLabel, '</span>\n                <a href="https://support.google.com/fiber/answer/6250056" target="_blank">\n                  ', self.learnMore, '\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id="footer">\n          <div class="footer-content container">\n            <div class="footer-section"><p class="footer-group-title">About</p>\n              <ul class="footer-link-group">\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://googlefiberblog.blogspot.com/"\n                                           target="_self">Blog</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://fiber.google.com/careers/"\n                                           target="_self">Careers</a>\n                </li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://fiber.google.com/legal/"\n                                           target="_blank">Privacy\n                  &amp; Terms</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://fiber.google.com/support/"\n                                           target="_self">Support</a></li>\n                </li>\n              </ul>\n            </div>\n            <div class="footer-section"><p class="footer-group-title">Social Media</p>\n              <ul class="footer-link-group">\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://plus.google.com/+GoogleFiber"\n                                           target="_blank">Google+</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://www.facebook.com/GoogleFiber"\n                                           target="_blank">Facebook</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://twitter.com/GoogleFiber"\n                                           target="_blank">Twitter</a></li>\n                <li class="footer-item"><a class="footer-link"\n                                           href="https://www.youtube.com/GoogleFiberOfficial"\n                                           target="_blank">YouTube</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    '), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "com.google.fiber.speedtest",
    name: "SpeedTestGauge",
    extends: "foam.ui.SimpleView",
    traits: ["com.google.fiber.speedtest.SpeedTestUtils"],
    properties: [{
        model_: "FloatProperty", name: "data", postSet: function (o, n) {
            if (this.$) {
                this.isNumber(n) ? this.units = "Mbps" : (this.units = "", n = 0)
                var min = .05, max = .446, percent = Math.min(Math.max(0, n / this.max), this.max), rotate
                rotate = percent <= .025 ? 10 * percent : percent <= .1 ? 10 * percent / 3 + 1 / 6 : percent <= .25 ? 5 * percent / 3 + 1 / 3 : percent / 3 + 2 / 3
                var rotateBy = Math.min(min + (max - min) * rotate, max), val = "rotate(" + rotateBy + "turn)"
                this.X.$(this.id + "-meter").style.transform = val, this.X.$(this.id + "-meter").style.webkitTransform = val
            }
        }
    }, {name: "max", defaultValue: 1e3}, {name: "units", defaultValue: "Mbps"}, {
        name: "shortUnits",
        defaultValue: "M"
    }],
    methods: [function initHTML() {
        this.SUPER(), this.data = this.data
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate('.gauge{display:inline-block;position:relative;overflow:hidden;height:84px;width:214px}.gauge, .inner-circle, .clip-left, .clip-right{background:#F9F9F9}.gauge:before{background:#F0F0F0;content:"";display:block;border-radius:50%/100%;border-bottom-left-radius:0;border-bottom-right-radius:0;height:0;padding-bottom:50%;width:100%}.inner-circle{content:"";display:block;border-radius:50%/100%;border-top-left-radius:0;border-top-right-radius:0;height:0;padding-bottom:37.5%;width:75%;-webkit-transform-origin:center top;transform-origin:center top;-webkit-transform:rotate(.5turn);transform:rotate(.5turn);margin:auto}.clip-left, .clip-right{height:100%;position:absolute;width:100%;z-index:1000}.clip-left{-webkit-transform:rotate(.05turn) translateX(-50%);transform:rotate(.05turn) translateX(-50%)}.clip-right{-webkit-transform:rotate(.95turn) translateX(50%);transform:rotate(.95turn) translateX(50%)}.meter{background:linear-gradient(to left, #F4FF81, #AEEA00);position:absolute;width:100%;height:0;padding-bottom:50%;border-radius:50% / 100%;border-top-left-radius:0;border-top-right-radius:0;transition:500ms;-webkit-transform-origin:center top;transform-origin:center top}.speed-test-gauge{text-align:center;position:relative;padding-top:26px}.tick{position:absolute;display:inline-block;z-index:1;margin-left:auto;margin-right:auto;right:0;left:0;top:0;font-weight:700;color:#000000;opacity:0.3;font-size:12px}.tick-unit{font-size:11px}.current-speed{display:block;font-weight:300;font-size:56px;color:#000000;opacity:0.6;margin-top:-32px}.current-speed-units{font-size:16px;width:0px;display:inline-block;margin-left:-12px}'),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <div id="', self.id, '" class="speed-test-gauge">\n        <div class="tick" style="top: 84px; left: -260px;">\n          0<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 24px; left: -160px;">\n          ', this.max / 40, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 0px; left: 0px;">\n          ', this.max / 10, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 24px; left: 160px;">\n          ', this.max / 4, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="tick" style="top: 84px; left: 270px;">\n          ', this.max, '<span class="tick-unit">', self.shortUnits, '</span>\n        </div>\n        <div class="gauge">\n          <div class="clip-left"></div>\n          <div class="clip-right"></div>\n          <div>\n            <div class="meter" id="', self.id, '-meter"></div>\n            <div class="inner-circle"></div>\n          </div>\n        </div>\n        <span class="current-speed">\n          ', self.createTemplateView("data", {mode: "read-only"}), "\n          ", self.createTemplateView("units", {
                mode: "read-only",
                extraClassName: "current-speed-units"
            }), "\n        </span>\n      </div>\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui.md",
    name: "FlatButton",
    extends: "foam.flow.Element",
    requires: ["foam.ui.Color", "foam.ui.Icon", "foam.ui.md.HaloView"],
    properties: [{
        name: "className", defaultValue: "md-button flatbutton noselect", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className.split(" ").concat(this.extraClassName.split(" ")).join(" "))
        }
    }, {
        name: "extraClassName", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className.split(" ").concat(this.extraClassName.split(" ")).join(" "))
        }
    }, {model_: "BooleanProperty", name: "raised", type: "Boolean", defaultValue: !1}, {
        model_: "foam.ui.ColorProperty",
        name: "color",
        defaultValueFn: function () {
            return "ICON_ONLY" == this.displayMode_ ? "currentColor" : "#02A8F3"
        },
        help: "The text and background color to use for the active state"
    }, {
        model_: "StringProperty", name: "font", type: "String", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.font = nu)
        }
    }, {
        model_: "FloatProperty", name: "alpha", type: "Float", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.opacity = null === nu ? "" : nu)
        }, defaultValue: null
    }, {
        model_: "StringProperty", name: "background", type: "String", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.background = nu)
        }
    }, {
        model_: "foam.ui.ColorProperty", name: "haloColor", postSet: function (old, nu) {
            old || Events.unfollow(this.currentColor_$, this.haloColor_$), nu ? this.haloColor_ = nu : Events.follow(this.currentColor_$, this.haloColor_$)
        }
    }, {
        name: "action", postSet: function (_, nu) {
            this.bindData()
        }
    }, {
        name: "data", postSet: function () {
            this.bindData()
        }
    }, {name: "escapeHtml", defaultValue: !0}, {
        model_: "foam.core.types.StringEnumProperty",
        name: "displayMode",
        defaultValue: "ICON_AND_LABEL",
        choices: [["ICON_AND_LABEL", "Icon and Label"], ["ICON_ONLY", "Icon Only"], ["LABEL_ONLY", "Label Only"]]
    }, {
        model_: "foam.core.types.StringEnumProperty", name: "displayMode_", getter: function () {
            return this.iconUrl || this.ligature ? this.displayMode : "LABEL_ONLY"
        }
    }, {model_: "StringProperty", name: "iconUrl", type: "String"}, {
        model_: "StringProperty",
        name: "ligature",
        type: "String"
    }, {
        name: "icon", lazyFactory: function () {
            return this.Icon.create({
                url$: this.iconUrl$,
                ligature$: this.ligature$,
                color$: this.currentColor_$
            }, this.Y)
        }
    }, {
        name: "halo", lazyFactory: function () {
            return this.HaloView.create({
                className: "halo",
                recentering: !1,
                pressedAlpha: .2,
                startAlpha: .2,
                finishAlpha: 0
            }, this.Y)
        }
    }, {
        name: "tooltip", defaultValueFn: function () {
            return this.action && this.action.help
        }
    }, {
        model_: "foam.ui.ColorProperty",
        name: "currentColor_",
        visibility: "hidden",
        hidden: !0,
        defaultValueFn: function () {
            return this.color
        },
        preSet: function (old, nu) {
            return old !== nu && nu && this.Color.isInstance(nu) ? (this.alpha = nu.alpha, nu.alpha = 1, nu) : nu
        }
    }, {
        model_: "foam.ui.ColorProperty",
        name: "haloColor_",
        visibility: "hidden",
        hidden: !0
    }, {model_: "BooleanProperty", name: "isHidden", type: "Boolean", defaultValue: !1}],
    methods: [function init() {
        this.SUPER(), this.haloColor || Events.follow(this.currentColor_$, this.haloColor_$), Events.map(this.haloColor_$, this.halo.color$, function (color) {
            if ("currentColor" == color && this.$) {
                var s = this.X.window.getComputedStyle(this.$)
                if (s && s.color)return s.color
            }
            return color.toString()
        }.bind(this))
    }, function initHTML() {
        this.SUPER(), this.currentColor_$.addListener(function () {
            this.$ && (this.$.style.color = this.currentColor_.toString())
        }.bind(this)), this.$.style.color = this.currentColor_.toString(), this.$.style.font = this.font, this.$.style.opacity = this.alpha, this.$.style.background = this.background
        var temp = this.haloColor_
        this.haloColor_ = "black", this.haloColor_ = temp
    }, function bindData() {
        if (this.action && this.data) {
            this.iconUrl || (this.iconUrl = this.action.iconUrl), this.ligature || (this.ligature = this.action.ligature)
            var self = this
            this.action.labelFn && this.X.dynamicFn(function () {
                self.action.label = self.action.labelFn.call(self.data, self.action)
            }, function () {
                self.$ && (self.X.document.getElementById(self.id + "CONTENT").innerHTML = self.labelHTML())
            }), this.X.dynamicFn(function () {
                self.action.isEnabled.call(self.data, self.action)
            }, function () {
                self.action.isEnabled.call(self.data, self.action) ? self.currentColor_ = self.color : self.currentColor_ = "rgba(0,0,0,0.65)"
            }), this.X.dynamicFn(function () {
                self.action.isAvailable.call(self.data, self.action)
            }, function () {
                self.isHidden = !self.action.isAvailable.call(self.data, self.action)
            })
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate("flat-button{display:inline-flex;-webkit-align-items:baseline;align-items:baseline;-webkit-justify-content:center;justify-content:center;overflow:hidden;position:relative;border-radius:2px;cursor:pointer}flat-button.md-style-trait-inline{padding:8px 8px;margin:-4px -4px}flat-button .halo{border-radius:inherit}flat-button spacer{display:block;width:12px}flat-button.icon-only spacer, flat-button.label-only spacer{width:0px}flat-button.icon-only{border-radius:50%;transition:transform 250ms ease, width 249ms ease, margin 249ms ease, padding 249ms ease;transition-delay:249ms, 0ms, 0ms, 0ms;-webkit-transform:unset;transform:unset;width:40px;-webkit-flex-shrink:0;flex-shrink:0}flat-button.floatingActionButton{padding:10px}flat-button.md-button .md-button-label{color:inherit}flat-button.hidden, flat-button.label-only .flat-button-icon-container, flat-button.icon-only .md-button-label{display:none}flat-button.icon-only.hidden{display:inherit!important;-webkit-transform:rotateZ(180deg) scaleY(0);transform:rotateZ(180deg) scaleY(0);transition-delay:0ms, 250ms, 250ms, 250ms;width:0;margin:0;padding:0}flat-button:not(.label-only) .md-button-label{text-transform:none}flat-button .halo{position:absolute;left:0;top:0;z-index:2}flat-button:not(.icon-only) .flat-button-icon-container{width:24px;height:0px;position:relative}flat-button:not(.icon-only) .flat-button-icon{position:absolute;left:0px;bottom:-7px}flat-button.icon-only.floatingActionButton{width:44px;height:44px}"),
        language: "css"
    }, {
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      <", self.tagName, ' id="', self.id, '" ', this.cssClassAttr(), " >\n        ", self.halo, '\n        <div class="flat-button-icon-container">\n          <div class="flat-button-icon">\n            ', self.icon, '\n          </div>\n        </div>\n        <spacer>\n        </spacer>\n        <span id="', this.id + "CONTENT", '" class="md-button-label">'), this.labelHTML(out), out("</span>\n      </", self.tagName, ">\n      "), this.on("click", function (e) {
                e.preventDefault(), e.stopPropagation(), self.action.maybeCall(self.X, self.data)
            }, this.id), this.setClass("icon-only", function () {
                return this.iconUrl, this.ligature, this.displayMode, "ICON_ONLY" === this.displayMode_
            }, this.id), this.setClass("label-only", function () {
                return this.iconUrl, this.ligature, this.displayMode, "LABEL_ONLY" === this.displayMode_
            }, this.id), this.setClass("hidden", function () {
                return self.isHidden
            }, this.id), this.setClass("raised", function () {
                return self.raised
            }, this.id), out("\n    "), out.toString()
        }, language: "html"
    }, {
        name: "labelHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      "), this.action ? (out("\n        "), this.escapeHtml ? out("\n          ", escapeHTML(this.action.label), "\n        ") : out("\n          ", this.action.label, "\n        "), out("\n      ")) : this.inner ? out("\n         ", this.inner(), "\n      ") : out("label"), out("\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "Color",
    properties: [{
        model_: "IntProperty", name: "red", type: "Int", preSet: function (_, v) {
            return Math.max(0, Math.min(255, v))
        }
    }, {
        model_: "IntProperty", name: "green", type: "Int", preSet: function (_, v) {
            return Math.max(0, Math.min(255, v))
        }
    }, {
        model_: "IntProperty", name: "blue", type: "Int", preSet: function (_, v) {
            return Math.max(0, Math.min(255, v))
        }
    }, {
        model_: "FloatProperty", name: "alpha", type: "Float", preSet: function (_, v) {
            return Math.max(0, Math.min(1, v))
        }
    }],
    methods: [function toString() {
        return "rgba(" + this.red + "," + this.green + "," + this.blue + "," + this.alpha + ")"
    }]
}), CLASS({
    package: "foam.ui",
    name: "Icon",
    extends: "foam.ui.SimpleView",
    requires: ["foam.fonts.LigatureTester", "foam.ui.ImageView", "foam.ui.LigatureView"],
    imports: ["document"],
    properties: [{model_: "StringProperty", name: "url", type: "String"}, {
        model_: "StringProperty",
        name: "ligature",
        type: "String",
        postSet: function (old, nu) {
            old !== nu && nu && this.document.createElement && (this.ligatureTester = this.LigatureTester.create({
                ligature$: this.ligature$,
                expectedWidth$: this.width$,
                expectedHeight$: this.height$,
                ligatureViewFactory: function () {
                    return this.LigatureView.create({
                        data$: this.ligature$,
                        color$: this.color$,
                        fontSize$: this.fontSize$,
                        className$: this.ligatureClassName$
                    }, this.Y)
                }.bind(this)
            }, this.Y))
        }
    }, {model_: "IntProperty", name: "width", type: "Int", defaultValue: 24}, {
        model_: "IntProperty",
        name: "height",
        type: "Int",
        defaultValue: 24
    }, {
        model_: "foam.ui.ColorProperty", name: "color", lazyFactory: function () {
            return "currentColor"
        }, postSet: function (old, nu) {
            old && old.alpha$ && Events.unfollow(old.alpha$, this.alpha$), nu && nu.alpha$ && Events.follow(nu.alpha$, this.alpha$)
        }
    }, {model_: "FloatProperty", name: "alpha", type: "Float", defaultValue: 1}, {
        model_: "IntProperty",
        name: "fontSize",
        type: "Int",
        defaultValue: 24
    }, {
        model_: "StringProperty",
        name: "imageClassName",
        type: "String",
        defaultValue: "icon"
    }, {
        model_: "StringProperty",
        name: "imageClassName",
        type: "String",
        defaultValue: "material-icons-extended"
    }, {
        name: "imageView", lazyFactory: function () {
            return this.ImageView.create({
                data$: this.url$,
                className$: this.imageClassName$,
                alpha$: this.alpha$,
                displayWidth$: this.width$,
                displayHeight$: this.height$
            }, this.Y)
        }
    }, {
        name: "ligatureView", defaultValue: null, postSet: function (old, nu) {
            if (old !== nu && this.$) {
                for (var i = 0; i < this.children.length; ++i)this.children[i].destroy()
                this.children = []
                var out = TemplateOutput.create(nu)
                nu.toHTML(out), this.$.innerHTML = out.toString(), nu.initHTML(), this.addChild(nu)
            }
        }
    }, {name: "ligatureTester", defaultValue: null}],
    methods: [function init() {
        this.SUPER(), this.ligatureTester && this.ligatureTester.ligatureViewFuture(function (ligatureView) {
            this.ligatureView = ligatureView
        }.bind(this))
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <icon id="', self.id, '" ', self.cssClassAttr(), ">\n        "), this.ligatureView ? out("\n             ", self.ligatureView, "\n        ") : out("\n             ", self.imageView, "\n        "), out("\n      </icon>\n    "), out.toString()
        }, language: "html"
    }, {name: "CSS", code: ConstantTemplate("icon{display:block}"), language: "css"}]
}), CLASS({
    package: "foam.fonts",
    name: "LigatureTester",
    requires: ["foam.ui.LigatureView"],
    imports: ["window", "document"],
    properties: [{
        name: "ligature", defaultValue: "accessibility", postSet: function (old, nu) {
            old !== nu && this.ligatureView && (this.ligatureView.data = nu)
        }
    }, {
        model_: "IntProperty",
        name: "expectedWidth",
        type: "Int",
        required: !0,
        defaultValue: 24
    }, {
        model_: "IntProperty",
        name: "expectedHeight",
        type: "Int",
        required: !0,
        defaultValue: 24
    }, {model_: "IntProperty", name: "timeout", type: "Int", units: "ms", defaultValue: 1e3}, {
        name: "$parent",
        lazyFactory: function () {
            return this.document.createElement("div")
        },
        postSet: function (old, nu) {
            old !== nu && (old && (this.document.body.removeChild(old), old.removeEventListener("scroll", this.onParentScroll)), nu && (this.initParentStyle(), this.document.body.appendChild(nu), nu.addEventListener("scroll", this.onParentScroll)))
        }
    }, {
        name: "parentStyle", factory: function () {
            return {
                position: "fixed",
                bottom: "0",
                right: "0",
                visibility: "hidden",
                width: "1px",
                height: "1px",
                overflow: "hidden",
                "z-index": "-1000"
            }
        }, postSet: function (old, nu) {
            old !== nu && this.$parent && this.initParentStyle()
        }
    }, {
        model_: "ViewFactoryProperty",
        name: "ligatureViewFactory",
        type: "ViewFactory",
        defaultValue: "foam.ui.LigatureView"
    }, {
        name: "ligatureView", factory: function () {
            return this.ligatureViewFactory({data$: this.ligature$})
        }, postSet: function (old, nu) {
            if (old !== nu && nu) {
                var out = TemplateOutput.create(nu)
                nu.toHTML(out), this.$parent.innerHTML = out.toString(), nu.initHTML(), this.$parent.scrollTop = this.$parent.scrollHeight - this.$parent.clientHeight
            }
        }
    }, {
        name: "ligatureViewFuture", lazyFactory: function () {
            return this.ligatureViewFuture_.get
        }
    }, {
        name: "ligatureViewFuture_", lazyFactory: function () {
            return afuture()
        }
    }, {model_: "IntProperty", name: "timeoutID", type: "Int"}],
    methods: [function init() {
        this.SUPER(), this.timeoutID = this.window.setTimeout(function () {
            this.ligatureViewFuture_.set(null), this.ligatureView = this.$parent = null
        }.bind(this), this.timeout)
    }, function initParentStyle() {
        var parent = this.$parent
        Object_forEach(this.parentStyle, function (value, key) {
            parent.style[key] = value
        })
    }],
    listeners: [{
        name: "onParentScroll", code: function () {
            this.ligatureView && this.ligatureView.$ && this.ligatureView.width === this.expectedWidth && this.ligatureView.height === this.expectedHeight && (this.window.clearTimeout(this.timeoutID), this.ligatureViewFuture_.set(this.ligatureView), this.ligatureView = this.$parent = null)
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "LigatureView",
    extends: "foam.ui.SimpleView",
    properties: [{
        model_: "StringProperty",
        name: "data",
        type: "String",
        defaultValue: "accessibility",
        postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.textContent = nu)
        }
    }, {
        model_: "StringProperty", name: "tagName", type: "String", defaultValue: "i", postSet: function (old, nu) {
            if (old !== nu && this.$) {
                var out = TemplateOutput.create(this)
                this.toHTML(out), this.$.outerHTML = out.toString()
            }
        }
    }, {
        model_: "StringProperty",
        name: "className",
        type: "String",
        defaultValue: "material-icons-extended",
        postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className + (this.extraClassName ? " " + this.extraClassName : ""))
        }
    }, {
        model_: "StringProperty", name: "extraClassName", type: "String", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.className = this.className + (this.extraClassName ? " " + this.extraClassName : ""))
        }
    }, {
        model_: "IntProperty", name: "width", type: "Int", getter: function () {
            return this.$ ? this.$.scrollWidth : 0
        }
    }, {
        model_: "IntProperty", name: "height", type: "Int", getter: function () {
            return this.$ ? this.$.scrollHeight : 0
        }
    }, {
        model_: "IntProperty", name: "fontSize", type: "Int", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style["font-size"] = nu + "px")
        }, defaultValue: 24
    }, {
        name: "color", defaultValue: "currentColor", postSet: function (old, nu) {
            old !== nu && this.$ && (this.$.style.color = nu)
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("\n      <", escapeHTML(this.tagName), ' id="', self.id, '" ', self.cssClassAttr(), '\n                        style="font-size: ', escapeHTML(this.fontSize), "px; color: ", self.color, '">', self.data, "</", self.tagName, ">\n    "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "ImageView",
    extends: "foam.ui.View",
    properties: [{name: "className", defaultValue: "imageView"}, {name: "backupImage"}, {
        name: "domValue",
        postSet: function (oldValue, newValue) {
            oldValue && Events.unfollow(this.data$, oldValue), newValue && Events.follow(this.data$, newValue)
        }
    }, {
        name: "displayWidth", postSet: function (_, newValue) {
            this.$ && (this.$.style.width = newValue)
        }
    }, {
        name: "displayHeight", postSet: function (_, newValue) {
            this.$ && (this.$.style.height = newValue)
        }
    }, {
        name: "alpha", defaultValue: 1, postSet: function (_, newValue) {
            this.$ && (this.$.style.opacity = newValue)
        }
    }],
    methods: [function toHTML() {
        var src = window.IS_CHROME_APP && !this.isSupportedUrl(this.data) ? this.backupImage ? ' src="' + this.backupImage + '"' : "" : ' src="' + this.data + '"'
        return "<img " + this.cssClassAttr() + ' id="' + this.id + '"' + src + 'style="opacity:' + this.alpha + '">'
    }, function isSupportedUrl(url) {
        return url = url.trim().toLowerCase(), url.startsWith("data:") || url.startsWith("blob:") || url.startsWith("filesystem:")
    }, function initHTML() {
        if (this.SUPER(), this.backupImage && this.$.addEventListener("error", function () {
                this.data = this.backupImage
            }.bind(this)), window.IS_CHROME_APP && !this.isSupportedUrl(this.data)) {
            var self = this, xhr = new XMLHttpRequest
            xhr.open("GET", this.data), xhr.responseType = "blob", xhr.asend(function (blob) {
                blob && (self.$.src = URL.createObjectURL(blob))
            })
        } else this.domValue = DomValue.create(this.$, void 0, "src"), this.displayHeight = this.displayHeight, this.displayWidth = this.displayWidth
    }]
}), CLASS({
    package: "foam.ui",
    name: "View",
    extends: "foam.ui.DestructiveDataView",
    traits: ["foam.ui.HTMLViewTrait", "foam.ui.U2ViewTrait"],
    requires: ["Property"],
    exports: ["propertyViewProperty"],
    properties: [{
        name: "propertyViewProperty", type: "Property", defaultValueFn: function () {
            return this.Property.DETAIL_VIEW
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "DestructiveDataView",
    extends: "foam.ui.BaseView",
    requires: ["SimpleValue"],
    properties: [{
        name: "data", preSet: function (old, nu) {
            return this.shouldDestroy(old, nu) && this.destroy(), nu
        }, postSet: function (old, nu) {
            this.shouldDestroy(old, nu) && this.construct()
        }
    }, {
        name: "dataLinkedChildren", factory: function () {
            return []
        }
    }],
    methods: [function shouldDestroy(old, nu) {
        return !0
    }, function destroy(isParentDestroyed) {
        isParentDestroyed || (this.dataLinkedChildren.forEach(function (child) {
            Events.unfollow(this.data$, child.data$)
        }.bind(this)), this.dataLinkedChildren = []), this.SUPER(isParentDestroyed)
    }, function addDataChild(child) {
        Events.follow(this.data$, child.data$), this.dataLinkedChildren.push(child), this.addChild(child)
    }]
}), CLASS({
    package: "foam.ui",
    name: "ColorProperty",
    extends: "ColorProperty",
    requires: ["foam.ui.Color"],
    properties: [{
        name: "adapt", defaultValue: function (old, nu, self) {
            if (old === nu || self.Color.isInstance(nu))return nu
            if ("currentColor" == nu)return nu
            var c = self.Color.create(), rgb = self.COLORS[nu]
            if (rgb)return c.red = rgb[0], c.green = rgb[1], c.blue = rgb[2], c.alpha = 1, c
            if (rgb = nu.match(/^\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])\s*$/), rgb)return c.red = parseInt(rgb[1] + rgb[1], 16), c.green = parseInt(rgb[2] + rgb[2], 16), c.blue = parseInt(rgb[3] + rgb[3], 16), c.alpha = 1, c
            if (rgb = nu.match(/^\s*#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])\s*$/), rgb)return c.red = parseInt(rgb[1], 16), c.green = parseInt(rgb[2], 16), c.blue = parseInt(rgb[3], 16), c.alpha = 1, c
            if (rgb = nu.match(/^\s*rgb[(]\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*[)]\s*$/), rgb)return c.red = parseInt(rgb[1]), c.green = parseInt(rgb[2]), c.blue = parseInt(rgb[3]), c.alpha = 1, c
            var rgba = nu.match(/^\s*rgba[(]\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]*[.]?[0-9]*)\s*[)]\s*$/)
            return rgba ? (c.red = parseInt(rgba[1]), c.green = parseInt(rgba[2]), c.blue = parseInt(rgba[3]), c.alpha = parseFloat(rgba[4]), c) : (c.red = c.green = c.blue = 0, c.alpha = 1, c)
        }
    }],
    constants: [{
        name: "COLORS",
        value: {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50]
        }
    }]
}), CLASS({
    package: "foam.ui.md",
    name: "HaloView",
    extends: "foam.graphics.CView",
    requires: ["foam.ui.md.Halo", "foam.ui.md.HaloCViewView as CViewView"],
    properties: [{name: "background", defaultValue: "rgba(0,0,0,0)"}, {
        model_: "ViewFactoryProperty",
        name: "halo",
        type: "ViewFactory",
        defaultValue: {factory_: "foam.ui.md.Halo"}
    }, {
        name: "haloView", factory: function () {
            return this.halo({
                easeInTime$: this.easeInTime$,
                easeOutTime$: this.easeOutTime$,
                startAlpha$: this.startAlpha$,
                pressedAlpha$: this.pressedAlpha$,
                finishAlpha$: this.finishAlpha$,
                color$: this.color$,
                recentering$: this.recentering$
            }, this.Y)
        }
    }, {
        name: "style", defaultValue: "solid", postSet: function (_, style) {
            style !== this.RING_INNER_COLOR && this.setColorAndBorder()
        }
    }, {name: "easeInTime", defaultValue: 200}, {name: "easeOutTime", defaultValue: 150}, {
        name: "startAlpha",
        defaultValue: .8
    }, {name: "pressedAlpha", defaultValue: .4}, {
        name: "finishAlpha",
        defaultValue: 0
    }, {name: "color"}, {name: "recentering", defaultValue: !0}],
    methods: [function init() {
        this.SUPER(), this.addChild(this.haloView)
    }]
}), CLASS({
    package: "foam.ui.md",
    name: "Halo",
    extends: "foam.graphics.Circle",
    properties: [{
        name: "style", defaultValue: "solid", postSet: function (_, style) {
            style !== this.RING_INNER_COLOR && this.setColorAndBorder()
        }
    }, {name: "state_", defaultValue: "default"}, {
        name: "nextColor_", defaultValueFn: function () {
            return this.color
        }
    }, {
        name: "color", preSet: function (old, nu) {
            return "default" !== this.state_ ? (this.nextColor_ = nu, old) : nu
        }
    }, {name: "easeInTime", defaultValue: 200}, {name: "easeOutTime", defaultValue: 150}, {
        name: "startAlpha",
        defaultValue: .8
    }, {name: "pressedAlpha", defaultValue: .4}, {name: "finishAlpha", defaultValue: 0}, {
        name: "alpha",
        defaultValue: 0
    }, {name: "recentering", defaultValue: !0}, {
        model_: "FunctionProperty",
        name: "isEnabled",
        type: "Function",
        defaultValue: function () {
            return !0
        }
    }],
    constants: [{name: "RING_INNER_COLOR", value: "rgba(0, 0, 0, 0)"}],
    methods: [function setColorAndBorder() {
        if ("ring" === this.style) {
            var color = this.color
            this.border = color, this.borderWidth = 12, this.color = this.RING_INNER_COLOR
        }
    }, function initCView() {
        this.$.addEventListener("mousedown", this.onMouseDown), this.$.addEventListener("mouseup", this.onMouseUp), this.$.addEventListener("mouseleave", this.onMouseUp), this.$.addEventListener("touchstart", this.onMouseDown), this.$.addEventListener("touchend", this.onMouseUp), this.$.addEventListener("touchleave", this.onMouseUp), this.$.addEventListener("touchcancel", this.onMouseUp)
    }, function isTouchInRect(t, rect) {
        return t.clientX >= rect.left && t.clientX <= rect.right && t.clientY >= rect.top && t.clientY <= rect.bottom
    }],
    listeners: [{
        name: "onMouseDown", code: function (evt) {
            if ("default" === this.state_ && this.isEnabled()) {
                if (this.state_ = "pressing", "touchstart" === evt.type) {
                    for (var rect = this.$.getBoundingClientRect(), touchFound = !1, t, i = 0; i < evt.touches.length; ++i)if (t = evt.touches[i], this.isTouchInRect(t, rect)) {
                        touchFound = !0
                        break
                    }
                    touchFound ? (this.x = t.clientX - rect.left, this.y = t.clientY - rect.top) : (console.warn("No touches", evt.touches, "in element rect", rect), this.x = rect.width / 2, this.y = rect.height / 2)
                } else this.x = evt.offsetX, this.y = evt.offsetY
                this.r = 2, this.alpha = this.startAlpha
                var recentering = this.recentering
                this.X.animate(this.easeInTime, function () {
                    recentering ? (this.x = this.parent.width / 2, this.y = this.parent.height / 2, this.r = Math.min(28, Math.min(this.$.clientWidth, this.parent.height) / 2)) : this.r = Math.max(28, Math.max(this.$.clientWidth, this.parent.height)), this.alpha = this.pressedAlpha
                }.bind(this), void 0, function () {
                    "cancelled" === this.state_ ? (this.state_ = "pressed", this.onMouseUp()) : this.state_ = "pressed"
                }.bind(this))()
            }
        }
    }, {
        name: "onMouseUp", code: function (evt) {
            if ("default" !== this.state_)return "pressing" === this.state_ ? (this.state_ = "cancelled", void 0) : ("cancelled" !== this.state_ && (this.state_ = "released", this.X.animate(this.easeOutTime, function () {
                this.alpha = this.finishAlpha
            }.bind(this), Movement.easeIn(.5), function () {
                "released" === this.state_ && (this.state_ = "default", this.color = this.nextColor_)
            }.bind(this))()), void 0)
        }
    }]
}), CLASS({
    package: "foam.graphics",
    name: "Circle",
    extends: "foam.graphics.CView",
    properties: [{
        model_: "StringProperty",
        name: "border",
        label: "Border Color",
        type: "String",
        defaultValue: ""
    }, {name: "borderWidth", defaultValue: 1}, {
        model_: "FloatProperty",
        name: "r",
        label: "Radius",
        type: "Float",
        defaultValue: 20
    }, {name: "startAngle", defaultValue: 0}, {name: "endAngle", defaultValue: 6.283185307179586}, {
        name: "width",
        defaultValueFn: function () {
            return 2 * (this.r + (this.border ? this.borderWidth : 0))
        }
    }, {
        name: "height", defaultValueFn: function () {
            return 2 * (this.r + (this.border ? this.borderWidth : 0))
        }
    }],
    methods: [function paintSelf(c) {
        c && this.r && (this.color && (c.beginPath(), c.moveTo(0, 0), c.arc(0, 0, this.r, -this.endAngle, -this.startAngle, !1), c.closePath(), c.fillStyle = this.color, c.fill()), this.paintBorder(c))
    }, function paintBorder(c) {
        this.border && (c.lineWidth = this.borderWidth, c.beginPath(), c.arc(0, 0, this.r + this.borderWidth / 2 - 1, this.startAngle, this.endAngle), c.closePath(), c.strokeStyle = this.border, c.stroke())
    }, function intersects(c) {
        var r = this.r + c.r
        return this.border && (r += this.borderWidth - 2), c.border && (r += c.borderWidth - 2), Movement.distance(this.x - c.x, this.y - c.y) <= r
    }]
}), CLASS({
    package: "foam.graphics",
    name: "CView",
    label: "CView",
    traits: ["foam.patterns.ChildTreeTrait"],
    requires: ["foam.graphics.PositionedCViewView", "foam.graphics.CViewView"],
    properties: [{
        name: "view", visibility: "hidden", hidden: !0, transient: !0, postSet: function (_, view) {
            for (var key in this.children) {
                var child = this.children[key]
                child.view = view, view && child.addListener(view.paint)
            }
        }
    }, {name: "children", visibility: "hidden", hidden: !0}, {
        name: "$",
        visibility: "hidden",
        hidden: !0,
        transient: !0,
        defaultValueFn: function () {
            return this.view && this.view.$
        }
    }, {name: "state", defaultValue: "initial"}, {
        model_: "BooleanProperty",
        name: "suspended",
        type: "Boolean",
        defaultValue: !1
    }, {
        name: "className", defaultValue: "", postSet: function () {
            this.$ && (this.$.className = this.className)
        }, help: "CSS class name(s), space separated. Used if adapted with a CViewView."
    }, {model_: "FloatProperty", name: "x", type: "Float", defaultValue: 0}, {
        model_: "FloatProperty",
        name: "y",
        type: "Float",
        defaultValue: 0
    }, {
        model_: "FloatProperty",
        name: "a",
        label: "Rotation",
        type: "Float",
        defaultValue: 0
    }, {model_: "FloatProperty", name: "scaleX", type: "Float", defaultValue: 1}, {
        model_: "FloatProperty",
        name: "scaleY",
        type: "Float",
        defaultValue: 1
    }, {
        name: "canvasX", visibility: "hidden", hidden: !0, getter: function () {
            return this.x + (this.parent ? this.parent.canvasX : 0)
        }
    }, {
        name: "canvasY", visibility: "hidden", hidden: !0, getter: function () {
            return this.y + (this.parent ? this.parent.canvasY : 0)
        }
    }, {model_: "IntProperty", name: "width", type: "Int", defaultValue: 10}, {
        model_: "IntProperty",
        name: "height",
        type: "Int",
        defaultValue: 10
    }, {model_: "FloatProperty", name: "alpha", type: "Float", defaultValue: 1}, {
        model_: "StringProperty",
        name: "color",
        label: "Foreground Color",
        type: "String",
        defaultValue: "black"
    }, {
        model_: "StringProperty",
        name: "background",
        label: "Background Color",
        type: "String",
        defaultValue: "white"
    }, {name: "font"}, {model_: "BooleanProperty", name: "clipped", type: "Boolean", defaultValue: !1}],
    methods: [function toView_() {
        if (!this.view) {
            var params = {cview: this}
            this.className && (params.className = this.className), this.tooltip && (params.tooltip = this.tooltip), this.speechLabel && (params.speechLabel = this.speechLabel), this.tabIndex && (params.tabIndex = this.tabIndex), this.role && (params.role = this.role), this.data$ && (params.data$ = this.data$), this.view = this.CViewView.create(params)
        }
        return this.view
    }, function toGLView_() {
        var model = this.X.lookup("foam.graphics.webgl.CViewGLView")
        return model ? model.create({sourceView: this}, this.Y) : ""
    }, function toPositionedView_() {
        if (!this.view) {
            var params = {cview: this}
            this.className && (params.className = this.className), this.view = this.PositionedCViewView.create(params)
        }
        return this.view
    }, function initCView() {
    }, function write(opt_X) {
        var X = opt_X || this.X
        X.writeView(this.toView_(), X)
    }, function addChild(child) {
        if (this.SUPER(child), child === this, this.view) {
            child.view = this.view, child.addListener(this.view.paint)
            try {
                this.view.paint()
            } catch (x) {
            }
        }
        return this
    }, function removeChild(child) {
        return this.SUPER(child), child.view = void 0, this.view && (child.removeListener(this.view.paint), this.view.paint()), this
    }, function removeAllChildren(child) {
        for (var i = this.children.length - 1; i >= 0; i--)this.removeChild(this.children[i])
        return this
    }, function findChildAt(x, y) {
        for (var c2 = {x: x, y: y, r: 1}, cs = this.children, i = cs.length - 1; i >= 0; i--) {
            var c1 = cs[i]
            if (c1.intersects && c1.intersects(c2))return c1
        }
    }, function erase(canvas) {
        canvas.fillStyle = this.background, canvas.fillRect(0, 0, this.width, this.height)
    }, function paintChildren(c) {
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i]
            c.save(), c.beginPath(), child.paint(c), c.restore()
        }
    }, function paintSelf(canvas) {
    }, function paint(canvas) {
        if (this.width && this.height && ("initial" === this.state && (this.state = "active", this.initCView()), !this.suspended)) {
            var c = canvas || this.view.canvas
            c.save(), c.globalAlpha *= this.alpha, this.transform(c), this.clipped && (c.rect(0, 0, this.width, this.height), c.clip()), this.paintSelf(c), this.paintChildren(c), c.restore()
        }
    }, function transform(canvas) {
        canvas.translate(this.x, this.y), canvas.scale(this.scaleX, this.scaleY), this.a && canvas.rotate(this.a)
    }, function scale(s) {
        this.scaleX = this.scaleY = s
    }, function mapToParent(point) {
        return point.x += this.x, point.y += this.y, point
    }, function mapToCanvas(point) {
        return this.mapToParent(point), this.parent && this.parent.mapToCanvas && this.parent.mapToCanvas(point), point
    }, function destroy() {
    }]
}), CLASS({
    package: "foam.graphics",
    name: "PositionedCViewView",
    extends: "foam.graphics.AbstractCViewView",
    traits: ["foam.ui.layout.PositionedDOMViewTrait"],
    properties: [{
        name: "tagName", factory: function () {
            return "canvas"
        }
    }],
    methods: [function init() {
        this.SUPER(), this.X.dynamicFn(function () {
            this.cview, this.width, this.height
        }.bind(this), function () {
            this.cview && (this.cview.width = this.width, this.cview.height = this.height)
        }.bind(this))
    }, function toHTML() {
        var className = this.className ? ' class="' + this.className + '"' : ""
        return '<canvas id="' + this.id + '"' + className + ' width="' + this.canvasWidth() + '" height="' + this.canvasHeight() + '" ' + this.layoutStyle() + "></canvas>"
    }],
    listeners: [{
        name: "resize", code: function () {
            this.$ && (this.$.width = this.canvasWidth(), this.$.style.width = this.styleWidth(), this.$.height = this.canvasHeight(), this.$.style.height = this.styleHeight(), this.cview.width = this.width, this.cview.height = this.height, this.paint())
        }, isFramed: !0
    }]
}), CLASS({
    package: "foam.ui.layout",
    name: "PositionedDOMViewTrait",
    traits: ["foam.ui.layout.PositionedViewTrait"],
    properties: [{name: "tagName", defaultValue: "div"}],
    methods: [function toHTML() {
        return "<" + this.tagName + ' id="' + this.id + '"' + this.layoutStyle() + this.cssClassAttr() + ">" + this.toInnerHTML() + "</div>"
    }, function layoutStyle() {
        return ' style="-webkit-transform:' + this.transform() + ";width:" + this.styleWidth() + ";height:" + this.styleHeight() + ';position:absolute;"'
    }, function initHTML() {
        this.SUPER()
        var self = this
        this.X.dynamicFn(function () {
            self.x, self.y, self.z
        }, this.position), this.X.dynamicFn(function () {
            self.width, self.height
        }, this.resize), this.$.style.position = "absolute", this.position(), this.resize()
    }, function transform() {
        return "translate3d(" + this.x + "px," + this.y + "px," + this.z + "px)"
    }, function styleWidth() {
        return this.width + "px"
    }, function styleHeight() {
        return this.height + "px"
    }],
    listeners: [{
        name: "position", code: function () {
            this.$ && (this.$.style.webkitTransform = this.transform())
        }
    }, {
        name: "resize", code: function () {
            this.$ && (this.$.style.width = this.styleWidth(), this.$.style.height = this.styleHeight())
        }
    }]
}), CLASS({
    package: "foam.ui.layout",
    name: "PositionedViewTrait",
    properties: [{
        model_: "FloatProperty",
        name: "x",
        type: "Float",
        units: "px",
        defaultValue: 0
    }, {model_: "FloatProperty", name: "y", type: "Float", units: "px", defaultValue: 0}, {
        model_: "FloatProperty",
        name: "z",
        type: "Float",
        units: "px",
        defaultValue: 0
    }, {model_: "IntProperty", name: "width", type: "Int", units: "px", defaultValue: 100}, {
        model_: "IntProperty",
        name: "height",
        type: "Int",
        units: "px",
        defaultValue: 100
    }, {
        model_: "IntProperty",
        name: "preferredWidth",
        type: "Int",
        units: "px",
        defaultValue: 100
    }, {model_: "IntProperty", name: "preferredHeight", type: "Int", units: "px", defaultValue: 100}]
}), CLASS({
    package: "foam.graphics",
    name: "AbstractCViewView",
    extends: "foam.ui.View",
    properties: [{
        name: "cview", postSet: function (_, cview) {
            cview.view = this, this.width = cview.x + cview.width, this.height = cview.y + cview.height
        }
    }, {name: "className", defaultValue: "", help: "CSS class name(s), space separated."}, {
        model_: "FloatProperty",
        name: "scalingRatio",
        type: "Float",
        preSet: function (_, v) {
            return v <= 0 ? 1 : v
        },
        defaultValue: 1
    }, {name: "speechLabel"}, {name: "role"}, {name: "tabIndex"}, {
        model_: "IntProperty",
        name: "width",
        type: "Int",
        defaultValue: 100
    }, {model_: "IntProperty", name: "height", type: "Int", defaultValue: 100}, {
        name: "canvas", getter: function () {
            return this.instance_.canvas ? this.instance_.canvas : this.instance_.canvas = this.$ && this.$.getContext("2d")
        }
    }, {
        name: "gl", getter: function () {
            return null
        }
    }],
    methods: [function init() {
        this.SUPER(), this.X.dynamicFn(function () {
            this.scalingRatio, this.width, this.height
        }.bind(this), this.resize)
    }, function styleWidth() {
        return this.width + "px"
    }, function canvasWidth() {
        return this.width * this.scalingRatio
    }, function styleHeight() {
        return this.height + "px"
    }, function canvasHeight() {
        return this.height * this.scalingRatio
    }, function toString() {
        return "CViewView(" + this.cview + ")"
    }, function toHTML() {
        var className = this.className ? ' class="' + this.className + '"' : "", title = this.speechLabel ? ' aria-role="button" aria-label="' + this.speechLabel + '"' : "", tabIndex = this.tabIndex ? ' tabindex="' + this.tabIndex + '"' : "", role = this.role ? ' role="' + this.role + '"' : ""
        return '<canvas id="' + this.id + '"' + className + title + tabIndex + role + ' width="' + this.canvasWidth() + '" height="' + this.canvasHeight() + '" style="width:' + this.styleWidth() + ";height:" + this.styleHeight() + ";min-width:" + this.styleWidth() + ";min-height:" + this.styleHeight() + '"></canvas>'
    }, function initHTML() {
        if (this.$) {
            this.maybeInitTooltip(), this.canvas = this.$.getContext("2d")
            var devicePixelRatio = this.X.window.devicePixelRatio || 1, backingStoreRatio = this.canvas.backingStoreRatio || this.canvas.webkitBackingStorePixelRatio || 1
            devicePixelRatio !== backingStoreRatio && (this.scalingRatio = devicePixelRatio / backingStoreRatio)
            var style = this.X.window.getComputedStyle(this.$)
            style.backgroundColor && !this.cview.hasOwnProperty("background") && (this.cview.background = style.backgroundColor), this.paint()
        }
    }, function destroy(isParentDestroyed) {
        this.SUPER(isParentDestroyed)
    }],
    listeners: [{
        name: "resize", code: function () {
            this.$ && (this.$.width = this.canvasWidth(), this.$.style.width = this.styleWidth(), this.$.style.minWidth = this.styleWidth(), this.$.height = this.canvasHeight(), this.$.style.height = this.styleHeight(), this.$.style.minHeight = this.styleHeight(), this.paint())
        }, isFramed: !0
    }, {
        name: "paint", code: function () {
            if (!this.$)throw EventService.UNSUBSCRIBE_EXCEPTION
            this.canvas.save(), this.canvas.clearRect(0, 0, this.canvasWidth(), this.canvasHeight()), this.canvas.fillStyle = this.cview.background, this.canvas.fillRect(0, 0, this.canvasWidth(), this.canvasHeight()), this.canvas.scale(this.scalingRatio, this.scalingRatio), this.cview.paint(this.canvas), this.canvas.restore()
        }, isFramed: !0
    }]
}), CLASS({
    package: "foam.graphics", name: "CViewView", extends: "foam.graphics.AbstractCViewView", properties: [{
        name: "cview", postSet: function (_, cview) {
            cview.view = this, this.X.dynamicFn(function () {
                var w = cview.x + cview.width, h = cview.y + cview.height
                this.width = w ? Math.max(this.width, w) : 0, this.height = h ? Math.max(this.height, h) : 0
            }.bind(this))
        }
    }], methods: [function shouldDestroy() {
        return !1
    }, function destroy() {
        this.SUPER(), this.cview && this.cview.destroy()
    }], help: "DOM wrapper for a CView, auto adjusts it size to fit the given cview."
}), CLASS({
    package: "foam.ui.md",
    name: "HaloCViewView",
    extends: "foam.graphics.AbstractCViewView",
    properties: [{
        name: "cview", postSet: function (_, cview) {
            cview.view = this, cview.x = 0, cview.y = 0, this.resize()
        }
    }],
    methods: [function initHTML() {
        this.SUPER(), this.$ && this.$.addEventListener("mousedown", this.resize)
    }],
    listeners: [{
        name: "resize", code: function () {
            this.$ && this.$.clientWidth && this.$.clientHeight && (this.width = this.$.clientWidth, this.height = this.$.clientHeight, this.$.width = this.canvasWidth(), this.$.height = this.canvasHeight(), this.cview && (this.cview.width = this.width, this.cview.height = this.height, this.paint()))
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n      <canvas id="', self.id, '"\n              ', this.className ? 'class="' + this.className + '"' : "", '\n              style="width: 100%; height: 100%"></canvas>\n    '), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.flow",
    name: "Element",
    extends: "foam.ui.View",
    requires: ["foam.Name"],
    properties: [{
        model_: "ViewFactoryProperty",
        name: "inner",
        type: "ViewFactory"
    }, {
        model_: "foam.core.types.DocumentInstallProperty", name: "registerElement", documentInstallFn: function (X) {
            X.registerElement(this.getTagName(X), this.model_.package + "." + this.name_)
        }
    }],
    methods: [function init() {
        this.SUPER.apply(this, arguments), this.tagName = this.getTagName()
    }, function getTagName(X) {
        if (this.ELEMENT_NAME)return this.ELEMENT_NAME
        var Name = this.X.lookup("foam.Name")
        return Name ? Name.create({initial: this.name_}, X || this.X).toTagName() : "foam-flow-element"
    }, function replaceAll(str, a, b) {
        for (var next = str, prev = ""; prev !== next;)prev = next, next = next.replace(a, b)
        return next
    }, function fromElement(e) {
        if (this.SUPER(e), 1 !== e.children.length || "inner" !== e.children[0].nodeName) {
            for (var childrenToRemove = [], i = 0; i < e.children.length; i++)for (var child = e.children[i], properties = this.model_.getRuntimeProperties(), j = 0; j < properties.length; j++) {
                var prop = properties[j]
                if (child.nodeName === prop.name) {
                    childrenToRemove.push(child)
                    break
                }
            }
            for (i = 0; i < childrenToRemove.length; i++)e.removeChild(childrenToRemove[i])
            this.inner = e.innerHTML
        }
        return this
    }],
    templates: [{
        name: "toInnerHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out("", this.inner(), ""), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam",
    name: "Name",
    requires: ["foam.Memo"],
    properties: [{
        model_: "StringProperty",
        name: "initial",
        type: "String",
        required: !0
    }, {model_: "StringArrayProperty", name: "parts", type: "StringArray"}, {
        model_: "FunctionProperty",
        name: "toUpperCamel",
        type: "Function",
        factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts.map(function (p) {
                        return p.charAt(0).toUpperCase() + p.slice(1)
                    }).join("")
                }
            }).get()
        }
    }, {
        model_: "FunctionProperty", name: "toLowerCamel", type: "Function", factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts[0].toLowerCase() + this.parts.slice(1).map(function (p) {
                            return p.charAt(0).toUpperCase() + p.slice(1)
                        }).join("")
                }
            }).get()
        }
    }, {
        model_: "FunctionProperty", name: "toHyphen", type: "Function", factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts.map(function (p) {
                        return p.toLowerCase()
                    }).join("-")
                }
            }).get()
        }
    }, {
        model_: "FunctionProperty", name: "toUpperUnderscore", type: "Function", factory: function () {
            return this.Memo.create({
                f: function () {
                    return this.parts.map(function (p) {
                        return p.toUpperCase()
                    }).join("_")
                }
            }).get()
        }
    }],
    methods: [function init() {
        this.SUPER.apply(this, arguments)
        var str = this.initial, match = str.match(/^[^A-Z]*/), prefix = ""
        for (match && match[0] && (prefix = match[0], this.parts.push(prefix), str = str.slice(prefix.length)); str;)match = str.match(/^[A-Z]+/), match && match[0] && match[0].length > 1 ? (prefix = match[0].length === str.length ? match[0] : match[0].slice(0, match[0].length - 1), this.parts.push(prefix), str = str.slice(prefix.length)) : (match = str.match(/^[A-Z][^A-Z]*/), match && match[0] && (prefix = match[0], this.parts.push(prefix), str = str.slice(prefix.length)))
    }, function toModelName() {
        return this.toUpperCamel()
    }, function toMethodName() {
        return this.toLowerCamel()
    }, function toPropertyName() {
        return this.toLowerCamel()
    }, function toTagName() {
        return this.toHyphen()
    }, function toValueName() {
        return this.toLowerCamel() + "$"
    }, function toConstantName() {
        return this.toUpperUnderscore()
    }, function toPropertySymbolName() {
        return this.toUpperUnderscore()
    }, function toPropertyValueSymbolName() {
        return this.toUpperUnderscore() + "$"
    }]
}), CLASS({
    package: "foam",
    name: "Memo",
    properties: [{model_: "FunctionProperty", name: "f", type: "Function", required: !0}, {
        model_: "FunctionProperty",
        name: "f_",
        type: "Function",
        transient: !0
    }, {
        model_: "FunctionProperty", name: "hashFunction", type: "Function", defaultValueFn: function () {
            return this.IDENTITY
        }, defaultValue: function () {
        }
    }, {
        name: "memos", factory: function () {
            return {}
        }
    }],
    constants: [{
        name: "IDENTITY", value: function () {
            var args = argsToArray(arguments)
            return JSON.stringify(args.map(function (a) {
                return "object" == typeof a ? a.$UID : a.toString()
            }))
        }
    }, {
        name: "MODEL_IDENTITY", value: function () {
            var args = argsToArray(arguments)
            return JSON.stringify(args.map(function (a) {
                return a.model_ ? a.$UID : a.toString()
            }))
        }
    }, {
        name: "DEEP_VALUE", value: function () {
            var args = argsToArray(arguments)
            return JSON.stringify(args.map(function (a) {
                return a.model_ ? JSONUtil.stringify(a) : a
            }))
        }
    }],
    methods: [function init() {
        this.SUPER.apply(this, arguments)
        var self = this
        this.f_ = function () {
            var hash = self.hashFunction.apply(self, arguments)
            return self.memos[hash] ? self.memos[hash] : (self.memos[hash] = self.f.apply(this, arguments), self.memos[hash])
        }
    }, function get() {
        return this.f_
    }]
}), CLASS({
    package: "foam.core.types",
    name: "StringEnumProperty",
    extends: "StringProperty",
    traits: ["foam.core.types.EnumPropertyTrait"]
}), CLASS({
    package: "foam.core.types",
    name: "EnumPropertyTrait",
    properties: [{
        model_: "ArrayProperty", name: "choices", type: "Array", required: !0, preSet: function (_, a) {
            return a.map(function (c) {
                return Array.isArray(c) ? c : [c, c]
            })
        }, help: "Array of [value, label] choices."
    }, {name: "view", defaultValue: "foam.ui.ChoiceView"}, {
        name: "toPropertyE", defaultValue: function (X) {
            return X.lookup("foam.u2.tag.Select").create({prop: this, choices: this.choices}, X)
        }
    }],
    methods: [function choiceLabel(value) {
        var vl = this.choices.filter(function (vl) {
            return vl[0] === value
        })[0]
        return vl ? vl[1] : ""
    }, function choiceValue(label) {
        var vl = this.choices.filter(function (vl) {
            return vl[1] === label
        })[0]
        return vl ? vl[0] : ""
    }]
}), CLASS({
    package: "foam.input.touch",
    name: "GestureManager",
    requires: ["foam.input.touch.DragGesture", "foam.input.touch.Gesture", "foam.input.touch.GestureTarget", "foam.input.touch.PinchTwistGesture", "foam.input.touch.ScrollGesture", "foam.input.touch.TapGesture", "foam.input.touch.InputPoint"],
    imports: ["document", "touchManager"],
    properties: [{
        name: "gestures", factory: function () {
            return {
                verticalScroll: this.ScrollGesture.create(),
                verticalScrollMomentum: this.ScrollGesture.create({momentumEnabled: !0}),
                verticalScrollNative: this.ScrollGesture.create({nativeScrolling: !0}),
                horizontalScroll: this.ScrollGesture.create({direction: "horizontal"}),
                horizontalScrollMomentum: this.ScrollGesture.create({direction: "horizontal", momentumEnabled: !0}),
                horizontalScrollNative: this.ScrollGesture.create({direction: "horizontal", nativeScrolling: !0}),
                tap: this.TapGesture.create(),
                drag: this.DragGesture.create(),
                pinchTwist: this.PinchTwistGesture.create()
            }
        }
    }, {
        name: "targets", factory: function () {
            return {}
        }
    }, {
        name: "active",
        factory: function () {
            return {}
        },
        help: "Gestures that are active right now and should be checked for recognition. This is the gestures active on the FIRST touch. Rectangles are not checked for subsequent touches."
    }, {
        name: "recognized",
        help: "Set to the recognized gesture. Cleared when all points are lifted."
    }, {
        name: "points", factory: function () {
            return {}
        }
    }, {name: "wheelTimer"}, {name: "scrollWheelTimeout", defaultValue: 300}, {
        name: "scrollViewTargets",
        defaultValue: 0
    }],
    methods: [function init() {
        this.SUPER(), this.touchManager.subscribe(this.touchManager.TOUCH_START, this.onTouchStart), this.touchManager.subscribe(this.touchManager.TOUCH_MOVE, this.onTouchMove), this.touchManager.subscribe(this.touchManager.TOUCH_END, this.onTouchEnd), this.document.addEventListener("mousedown", this.onMouseDown), this.document.addEventListener("mousemove", this.onMouseMove), this.document.addEventListener("mouseup", this.onMouseUp), this.document.addEventListener("wheel", this.onWheel), this.document.addEventListener("contextmenu", this.onContextMenu)
    }, function install(target) {
        target.containerID ? (this.targets[target.containerID] || (this.targets[target.containerID] = []), this.targets[target.containerID].push(target)) : console.warn("no container ID on touch target")
    }, function uninstall(target) {
        var arr = this.targets[target.containerID]
        if (arr) {
            for (var i = 0; i < arr.length; i++)if (arr[i] === target) {
                arr.splice(i, 1)
                break
            }
            0 === arr.length && delete this.targets[target.containerID]
        }
    }, function purge() {
        for (var keys = Object.keys(this.targets), count = 0, i = 0; i < keys.length; i++)this.document.getElementById(keys[i]) || (delete this.targets[keys[i]], count++)
        return console.log("Purged " + count + " targets"), count
    }, function activateContainingGestures(x, y, opt_predicate) {
        for (var e = this.X.document.elementFromPoint(x, y); e;) {
            if (e.id) {
                var matches = this.targets[e.id]
                if (matches && matches.length)for (var i = 0; i < matches.length; i++) {
                    var t = matches[i], g = this.gestures[t.gesture]
                    !g || opt_predicate && !opt_predicate(g) || (this.active[g.name] || (this.active[g.name] = []), this.active[g.name].push(t))
                }
            }
            e = e.parentNode
        }
    }, function checkRecognition() {
        if (!this.recognized) {
            var self = this, matches = []
            if (Object.keys(this.active).forEach(function (name) {
                    var answer = self.gestures[name].recognize(self.points)
                    answer >= self.Gesture.WAIT ? matches.push([name, answer]) : delete self.active[name]
                }), 0 !== matches.length) {
                var i, lastYes = -1
                for (i = 0; i < matches.length; i++)matches[i][1] === this.Gesture.YES && (lastYes = i)
                var lastMaybe = -1
                for (i = 0; i < matches.length; i++)matches[i][1] === this.Gesture.MAYBE && (lastMaybe = i)
                var match
                if (lastYes < 0) {
                    if (matches.length > 1 || lastMaybe < 0)return
                    match = matches[lastMaybe][0]
                } else match = matches[lastYes][0]
                var matched = this.active[match].filter(function (m) {
                    if (!m.enforceContainment)return !0
                    for (var r = m.getElement().getBoundingClientRect(), keys = Object.keys(self.points), i = 0; i < keys.length; ++i) {
                        var p = self.points[keys[i]]
                        if (p.x < r.left || p.x > r.right || p.y < r.top || p.y > r.bottom)return !1
                    }
                    return !0
                }), legal = []
                for (i = 0; i < matched.length; i++) {
                    for (var m = matched[i].getElement(), contained = 0, j = 0; j < matched.length; j++) {
                        var n = matched[j].getElement()
                        m !== n && m.contains(n) && contained++
                    }
                    0 === contained && legal.push(matched[i].handler)
                }
                legal.length > 0 && this.gestures[match].attach(this.points, legal), this.recognized = this.gestures[match]
            }
        }
    }, function resetState() {
        this.active = {}, this.recognized = null, this.points = {}
    }],
    listeners: [{
        name: "onTouchStart", code: function (_, __, touch) {
            if (this.recognized)return this.recognized.addPoint && this.recognized.addPoint(touch), void 0
            var pointCount = Object.keys(this.points).length
            pointCount || this.activateContainingGestures(touch.x, touch.y), this.points[touch.id] = touch, this.checkRecognition()
        }
    }, {
        name: "onMouseDown", code: function (event) {
            var point = this.InputPoint.create({id: "mouse", type: "mouse", x: event.clientX, y: event.clientY})
            if (this.recognized)return this.recognized.addPoint && this.recognized.addPoint(point), void 0
            var pointCount = Object.keys(this.points).length
            pointCount || this.activateContainingGestures(point.x, point.y), this.points[point.id] = point, this.checkRecognition()
        }
    }, {
        name: "onTouchMove", code: function (_, __, touch) {
            this.recognized || this.checkRecognition()
        }
    }, {
        name: "onMouseMove", code: function (event) {
            this.points.mouse && (this.points.mouse.x = event.clientX, this.points.mouse.y = event.clientY, this.checkRecognition())
        }
    }, {
        name: "onTouchEnd", code: function (_, __, touch) {
            this.recognized || this.checkRecognition(), delete this.points[touch.id], this.active = {}, this.recognized = void 0
        }
    }, {
        name: "onMouseUp", code: function (event) {
            this.points.mouse && (this.points.mouse.x = event.clientX, this.points.mouse.y = event.clientY, this.points.mouse.done = !0, this.recognized || this.checkRecognition(), delete this.points.mouse, this.active = {}, this.recognized = void 0)
        }
    }, {
        name: "onWheel", code: function (event) {
            if (this.wheelTimer)this.points.wheel.x -= event.deltaX, this.points.wheel.y -= event.deltaY, this.X.window.clearTimeout(this.wheelTimer), this.wheelTimer = this.X.window.setTimeout(this.onWheelDone, this.scrollWheelTimeout)
            else {
                if (this.recognized || Object.keys(this.points).length > 0)return
                var wheel = this.InputPoint.create({
                    id: "wheel",
                    type: "wheel",
                    x: event.clientX,
                    y: event.clientY
                }), dir = Math.abs(event.deltaX) > Math.abs(event.deltaY) ? "horizontal" : "vertical", gestures = [dir + "Scroll", dir + "ScrollMomentum", dir + "ScrollNative"]
                this.activateContainingGestures(wheel.x, wheel.y, function (g) {
                    return gestures.indexOf(g.name) >= 0
                }), wheel.x -= event.deltaX, wheel.y -= event.deltaY
                for (var i = 0; i < gestures.length; i++) {
                    var gesture = gestures[i]
                    if (this.active[gesture] && this.active[gesture].length) {
                        this.points.wheel || (this.points.wheel = wheel), this.gestures[gesture].attach(this.points, this.active[gesture].map(function (gt) {
                            return gt.handler
                        })), this.recognized = this.gestures[gesture], this.wheelTimer = this.X.window.setTimeout(this.onWheelDone, this.scrollWheelTimeout)
                        break
                    }
                }
            }
        }
    }, {
        name: "onWheelDone", code: function () {
            this.wheelTimer = void 0, this.points.wheel.done = !0, delete this.points.wheel, this.recognized = void 0
        }
    }, {
        name: "onContextMenu", code: function () {
            this.resetState()
        }
    }]
}), CLASS({
    package: "foam.input.touch",
    name: "DragGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{name: "name", defaultValue: "drag"}],
    constants: [{name: "DRAG_TOLERANCE", value: 20}],
    methods: [function recognize(map) {
        var keys = Object.keys(map)
        if (keys.length > 1)return this.NO
        var point = map[keys[0]]
        if (point.done)return this.NO
        var delta = Math.max(Math.abs(point.totalX), Math.abs(point.totalY)), r = delta >= this.DRAG_TOLERANCE ? this.YES : this.MAYBE
        return r != this.NO && (point.shouldPreventDefault = !0), r
    }, function attach(map, handlers) {
        var point = map[Object.keys(map)[0]]
        this.handlers = handlers || [], point.done$.addListener(this.onDone), this.pingHandlers("dragStart", point)
    }, function pingHandlers(method, point) {
        for (var i = 0; i < this.handlers.length; i++) {
            var h = this.handlers[i]
            h && h[method] && h[method](point)
        }
    }],
    listeners: [{
        name: "onDone", code: function (obj, prop, old, nu) {
            obj.done$.removeListener(this.onDone), this.pingHandlers("dragEnd", obj)
        }
    }],
    help: "Gesture that understands a hold and drag with mouse or one touch point."
}), CLASS({
    package: "foam.input.touch",
    name: "Gesture",
    properties: [{name: "name", required: !0}],
    constants: [{name: "YES", value: 3}, {name: "MAYBE", value: 2}, {name: "WAIT", value: 1}, {name: "NO", value: 0}],
    methods: [function recognize(map) {
        return this.NO
    }, function attach(handlers) {
    }, function newPoint(point) {
    }],
    help: "Installed in the GestureManager to watch for a particular kind of gesture"
}), CLASS({
    package: "foam.input.touch",
    name: "PinchTwistGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{name: "name", defaultValue: "pinchTwist"}, {name: "handlers"}, {name: "points"}],
    methods: [function getPoints(map) {
        var keys = Object.keys(map)
        return [map[keys[0]], map[keys[1]]]
    }, function recognize(map) {
        if (2 !== Object.keys(map).length)return this.NO
        var points = this.getPoints(map)
        if (points[0].done || points[1].done)return this.NO
        var moved = !(0 === points[0].dx && 0 === points[0].dy || 0 === points[1].dx && 0 === points[1].dy)
        return moved ? this.YES : this.MAYBE
    }, function attach(map, handlers) {
        Object_forEach(map, function (p) {
            p.shouldPreventDefault = !0
        }), this.points = this.getPoints(map), this.handlers = handlers || [], this.points.forEach(function (p) {
            p.x$.addListener(this.onMove), p.y$.addListener(this.onMove), p.done$.addListener(this.onDone)
        }.bind(this)), this.pingHandlers("pinchStart"), this.onMove()
    }, function pingHandlers(method, scale, rotation) {
        for (var i = 0; i < this.handlers.length; i++) {
            var h = this.handlers[i]
            h && h[method] && h[method](scale, rotation)
        }
    }, function distance(x1, y1, x2, y2) {
        var dx = x2 - x1, dy = y2 - y1
        return Math.sqrt(dx * dx + dy * dy)
    }],
    listeners: [{
        name: "onMove", code: function () {
            for (var oldDist = this.distance(this.points[0].x0, this.points[0].y0, this.points[1].x0, this.points[1].y0), newDist = this.distance(this.points[0].x, this.points[0].y, this.points[1].x, this.points[1].y), scale = newDist / oldDist, oldAngle = Math.atan2(this.points[1].y0 - this.points[0].y0, this.points[1].x0 - this.points[0].x0), newAngle = Math.atan2(this.points[1].y - this.points[0].y, this.points[1].x - this.points[0].x), rotation = newAngle - oldAngle; rotation < -Math.PI;)rotation += 2 * Math.PI
            for (; rotation > Math.PI;)rotation -= 2 * Math.PI
            rotation *= 360, rotation /= 2 * Math.PI, this.pingHandlers("pinchMove", scale, rotation)
        }
    }, {
        name: "onDone", code: function (obj, prop, old, nu) {
            this.points.forEach(function (p) {
                p.x$.removeListener(this.onMove), p.y$.removeListener(this.onMove), p.done$.removeListener(this.onDone)
            }), this.pingHandlers("pinchEnd")
        }
    }],
    help: "Gesture that understands a two-finger pinch/stretch and rotation"
}), CLASS({
    package: "foam.input.touch",
    name: "ScrollGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{
        name: "name", factory: function () {
            return this.direction + "Scroll" + (this.momentumEnabled ? "Momentum" : this.nativeScrolling ? "Native" : "")
        }
    }, {name: "direction", defaultValue: "vertical"}, {
        name: "isVertical", factory: function () {
            return "vertical" === this.direction
        }
    }, {
        name: "momentumEnabled",
        defaultValue: !1,
        help: 'Set me to true (usually by attaching the "verticalScrollMomentum" gesture) to enable momentum'
    }, {
        name: "nativeScrolling",
        defaultValue: !1,
        help: 'Set me to true (usually by attaching the "verticalScrollNative" gesture) to enable native browser scrolling'
    }, {
        name: "dragCoefficient",
        defaultValue: .94,
        help: "Each frame, the momentum will be multiplied by this coefficient. Higher means LESS drag."
    }, {
        name: "dragClamp",
        defaultValue: .05,
        help: "The speed threshold (pixels/millisecond) below which the momentum drops to 0."
    }, {
        name: "momentum",
        defaultValue: 0,
        help: "The current speed, in pixels/millisecond, at which the scroller is sliding."
    }, {
        name: "lastTime",
        visibility: "hidden",
        hidden: !0,
        defaultValue: 0,
        help: "The performance.now() value for the last time we computed the momentum slide."
    }, {
        name: "tickRunning",
        visibility: "hidden",
        hidden: !0,
        defaultValue: !1,
        help: "True when the physics tick should run."
    }, {name: "handlers"}],
    constants: [{name: "DRAG_TOLERANCE", value: 10}],
    methods: [function recognize(map) {
        if (1 !== Object.keys(map).length)return this.NO
        var point = map[Object.keys(map)[0]]
        if ("mouse" === point.type || point.done)return this.NO
        if (Math.abs(this.momentum) > 0)return this.YES
        var delta = Math.abs(this.isVertical ? point.totalY : point.totalX)
        return delta > this.DRAG_TOLERANCE ? this.YES : this.MAYBE
    }, function attach(map, handlers) {
        var point = map[Object.keys(map)[0]]
        this.handlers = handlers || [], this.nativeScrolling || (Object_forEach(map, function (p) {
            p.shouldPreventDefault = !0
        }), (this.isVertical ? point.y$ : point.x$).addListener(this.onDelta), point.done$.addListener(this.onDone), 0 === this.momentum ? this.pingHandlers(this.direction + "ScrollStart", 0, 0, this.isVertical ? point.y0 : point.x0) : this.tickRunning = !1)
    }, function pingHandlers(method, d, t, c) {
        for (var i = 0; i < this.handlers.length; i++) {
            var h = this.handlers[i]
            h && h[method] && h[method](d, t, c, this.stopMomentum)
        }
    }, function sendEndEvent(point) {
        var delta = this.isVertical ? point.dy : point.dx, total = this.isVertical ? point.totalY : point.totalX, current = this.isVertical ? point.y : point.x
        this.pingHandlers(this.direction + "ScrollEnd", delta, total, current)
    }, function calculateInstantaneousVelocity(point) {
        var now = this.X.performance.now(), lastTime = this.tickRunning ? this.lastTime : point.lastTime, velocity = (this.isVertical ? point.dy : point.dx) / (now - point.lastTime)
        return this.tickRunning && (this.lastTime = now), velocity
    }],
    listeners: [{
        name: "onDelta", code: function (obj, prop, old, nu) {
            if (this.momentumEnabled) {
                var velocity = this.calculateInstantaneousVelocity(obj), delta = velocity - this.momentum
                this.momentum += delta
            }
            var delta = this.isVertical ? obj.dy : obj.dx, total = this.isVertical ? obj.totalY : obj.totalX, current = this.isVertical ? obj.y : obj.x
            this.pingHandlers(this.direction + "ScrollMove", delta, total, current)
        }
    }, {
        name: "onDone", code: function (obj, prop, old, nu) {
            (this.isVertical ? obj.y$ : obj.x$).removeListener(this.onDelta), obj.done$.removeListener(this.onDone), this.momentumEnabled ? Math.abs(this.momentum) < this.dragClamp ? (this.momentum = 0, this.sendEndEvent(obj)) : (this.tickRunning = !0, this.lastTime = this.X.performance.now(), this.tick(obj)) : this.sendEndEvent(obj)
        }
    }, {
        name: "tick", code: function (touch) {
            if (this.tickRunning) {
                var xy = this.isVertical ? "y" : "x", now = this.X.performance.now(), elapsed = now - this.lastTime
                this.lastTime = now
                var distance = this.momentum * elapsed
                touch[xy] += distance
                var delta, total, current
                this.isVertical ? (delta = touch.dy, total = touch.totalY, current = touch.y) : (delta = touch.dx, total = touch.totalX, current = touch.x), 0 != delta && this.pingHandlers(this.direction + "ScrollMove", delta, total, current), this.momentum *= this.dragCoefficient, Math.abs(this.momentum) < this.dragClamp ? (this.momentum = 0, this.tickRunning = !1, this.sendEndEvent(touch)) : this.tick(touch)
            }
        }, isFramed: !0
    }, {
        name: "stopMomentum", code: function () {
            this.momentum = 0
        }
    }],
    help: "Gesture that understands vertical or horizontal scrolling."
}), CLASS({
    package: "foam.input.touch",
    name: "TapGesture",
    extends: "foam.input.touch.Gesture",
    properties: [{name: "name", defaultValue: "tap"}, {name: "handlers"}],
    constants: [{name: "DRAG_TOLERANCE", value: 40}],
    methods: [function recognize(map) {
        for (var response, doneCount = 0, self = this, keys = Object.keys(map), i = 0; i < keys.length; i++) {
            var key = keys[i], p = map[key]
            if (Math.abs(p.totalX) >= this.DRAG_TOLERANCE || Math.abs(p.totalY) >= this.DRAG_TOLERANCE)return this.NO
            p.done && doneCount++
        }
        return response === this.NO ? response : doneCount === keys.length ? this.YES : this.WAIT
    }, function attach(map, handlers) {
        if (handlers && handlers.length) {
            var points = 0
            Object_forEach(map, function (point) {
                points++, point.shouldPreventDefault = !0
            }), handlers.forEach(function (h) {
                h && h.tapClick && h.tapClick(map)
            })
        }
    }],
    help: "Gesture that understands a quick, possible multi-point tap. Calls into the handler: tapClick(numberOfPoints)."
}), CLASS({
    package: "foam.input.touch",
    name: "InputPoint",
    properties: [{name: "id"}, {name: "type"}, {model_: "BooleanProperty", name: "done", type: "Boolean"}, {
        name: "x",
        postSet: function (old, nu) {
            this.lastX = old
        }
    }, {
        name: "y", postSet: function (old, nu) {
            this.lastY = old
        }
    }, {
        name: "x0", factory: function () {
            return this.x
        }
    }, {
        name: "y0", factory: function () {
            return this.y
        }
    }, {
        name: "lastX", factory: function () {
            return this.x
        }
    }, {
        name: "lastY", factory: function () {
            return this.y
        }
    }, {
        name: "dx", getter: function () {
            return this.x - this.lastX
        }
    }, {
        name: "dy", getter: function () {
            return this.y - this.lastY
        }
    }, {
        name: "totalX", getter: function () {
            return this.x - this.x0
        }
    }, {
        name: "totalY", getter: function () {
            return this.y - this.y0
        }
    }, {name: "lastTime"}, {name: "shouldPreventDefault", defaultValue: !1}]
}), CLASS({
    package: "foam.input.touch",
    name: "TouchManager",
    requires: ["foam.input.touch.InputPoint"],
    properties: [{
        name: "touches", factory: function () {
            return {}
        }
    }],
    constants: [{name: "TOUCH_START", value: ["touch-start"]}, {
        name: "TOUCH_END",
        value: ["touch-end"]
    }, {name: "TOUCH_MOVE", value: ["touch-move"]}],
    methods: [function init() {
        this.SUPER(), this.X.document && this.install(this.X.document)
    }, function install(d) {
        d.addEventListener("touchstart", this.onTouchStart)
    }, function attach(e) {
        e.addEventListener("touchmove", this.onTouchMove), e.addEventListener("touchend", this.onTouchEnd), e.addEventListener("touchcancel", this.onTouchCancel), e.addEventListener("touchleave", this.onTouchEnd)
    }, function detach(e) {
        e.removeEventListener("touchmove", this.onTouchMove), e.removeEventListener("touchend", this.onTouchEnd), e.removeEventListener("touchcancel", this.onTouchCancel), e.removeEventListener("touchleave", this.onTouchEnd)
    }, function touchStart(i, t, e) {
        this.touches[i] = this.InputPoint.create({
            id: i,
            type: "touch",
            x: t.pageX,
            y: t.pageY
        }), this.publish(this.TOUCH_START, this.touches[i])
    }, function touchMove(i, t, e) {
        var touch = this.touches[i]
        touch.x = t.pageX, touch.y = t.pageY, touch.lastTime = this.X.performance.now(), touch.shouldPreventDefault && e.preventDefault(), this.publish(this.TOUCH_MOVE, this.touch)
    }, function touchEnd(i, t, e) {
        var touch = this.touches[i]
        touch.x = t.pageX, touch.y = t.pageY, touch.done = !0, this.publish(this.TOUCH_END, touch), touch.shouldPreventDefault && e.cancelable && e.preventDefault(), delete this.touches[i]
    }, function touchCancel(i, t, e) {
        this.touches[i].done = !0, this.publish(this.TOUCH_END, this.touches[i])
    }, function touchLeave(i, t, e) {
        this.touches[i].done = !0, this.publish(this.TOUCH_END, this.touches[i])
    }],
    listeners: [{
        name: "onTouchStart", code: function (e) {
            e._touchcount || (e._touchcount = 0), e._touchcount++, 1 == e._touchcount && this.attach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i]
                this.touchStart(t.identifier, t, e)
            }
        }
    }, {
        name: "onTouchMove", code: function (e) {
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchMove(id, t, e) : console.warn("Touch move for unknown touch.")
            }
        }
    }, {
        name: "onTouchEnd", code: function (e) {
            e._touchcount--, 0 == e._touchcount && this.detach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchEnd(id, t, e) : console.warn("Touch end for unknown touch " + id, Object.keys(this.touches))
            }
        }
    }, {
        name: "onTouchCancel", code: function (e) {
            this.detach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchCancel(id, t, e) : console.warn("Touch cancel for unknown touch.")
            }
        }
    }, {
        name: "onTouchLeave", code: function (e) {
            this.detach(e.target)
            for (var i = 0; i < e.changedTouches.length; i++) {
                var t = e.changedTouches[i], id = t.identifier
                this.touches[id] ? this.touchLeave(id, t, e) : console.warn("Touch cancel for unknown touch.")
            }
        }
    }]
}), CLASS({
    package: "foam.ui",
    name: "DetailView",
    extends: "foam.ui.View",
    requires: ["Property", "foam.ui.TextFieldView", "foam.ui.IntFieldView", "foam.ui.FloatFieldView", "foam.ui.DAOController"],
    exports: ["propertyViewProperty"],
    properties: [{name: "className", defaultValue: "detailView"}, {
        name: "data", preSet: function (old, nu) {
            return nu.model_ && (this.model = nu.model_), nu
        }
    }, {
        name: "model", postSet: function (_, model) {
            console.assert(Model.isInstance(model), "Invalid model specified for " + this.name_)
        }
    }, {
        name: "title", defaultValueFn: function () {
            return this.model.label
        }
    }, {model_: "StringProperty", name: "mode", type: "String", defaultValue: "read-write"}, {
        model_: "BooleanProperty",
        name: "showRelationships",
        type: "Boolean",
        defaultValue: !1
    }, {
        name: "propertyViewProperty", type: "Property", defaultValueFn: function () {
            return this.Property.DETAIL_VIEW
        }
    }],
    methods: [function shouldDestroy(old, nu) {
        return !(old && old.model_ && nu && nu.model_) || old.model_ !== nu.model_
    }, function generateContent() {
        this.$ && (this.$.outerHTML = this.toHTML(), this.initHTML())
    }, function titleHTML() {
        var title = this.title
        return title ? '<tr><td colspan="2" class="heading">' + title + "</td></tr>" : ""
    }, function startForm() {
        return "<table>"
    }, function endForm() {
        return "</table>"
    }, function startColumns() {
        return "<tr><td colspan=2><table valign=top><tr><td valign=top><table>"
    }, function nextColumn() {
        return "</table></td><td valign=top><table valign=top>"
    }, function endColumns() {
        return "</table></td></tr></table></td></tr>"
    }, function rowToHTML(prop, view) {
        var str = ""
        return prop.detailViewPreRow && (str += prop.detailViewPreRow(this)), str += '<tr class="detail-' + prop.name + '">', this.DAOController.isInstance(view) ? (str += "<td colspan=2><div class=detailArrayLabel>" + prop.label + "</div>", str += view.toHTML(), str += "</td>") : (str += "<td class='label'>" + prop.label + "</td>", str += "<td>", str += view.toHTML(), str += "</td>"), str += "</tr>", prop.detailViewPostRow && (str += prop.detailViewPostRow(this)), str
    }, function toHTML() {
        if (!this.data)return '<span id="' + this.id + '"></span>'
        if (!this.model)throw"DetailView: either 'data' or 'model' must be specified."
        return (this.model.getPrototype().toDetailHTML || this.defaultToHTML).call(this)
    }, function getDefaultProperties() {
        return this.model.getRuntimeProperties()
    }, function defaultToHTML() {
        this.children = []
        var model = this.model, str = ""
        str += '<div id="' + this.id + '" ' + this.cssClassAttr() + '" name="form">', str += this.startForm(), str += this.titleHTML()
        for (var properties = this.getDefaultProperties(), i = 0; i < properties.length; i++) {
            var prop = properties[i]
            if (!prop.hidden) {
                var view = this.createView(prop)
                this.addDataChild(view), str += this.rowToHTML(prop, view)
            }
        }
        if (str += this.endForm(), this.showRelationships) {
            var view = this.X.lookup("foam.ui.RelationshipsView").create({data: this.data})
            this.addDataChild(view), str += view.toHTML()
        }
        return str += "</div>", str
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".detailView{border:solid 2px #dddddd;background:#fafafa;display:table}.detailView .heading{color:black;float:left;font-size:16px;margin-bottom:8px;padding:2px}.detailView .propertyLabel{font-size:14px;display:block;font-weight:bold;text-align:right;float:left}.detailView input{font-size:12px;padding:4px 2px;border:solid 1px #aacfe4;margin:2px 0 0px 10px}.detailView textarea{float:left;font-size:12px;padding:4px 2px;border:solid 1px #aacfe4;margin:2px 0 0px 10px;width:98%;overflow:auto}.detailView select{font-size:12px;padding:4px 2px;border:solid 1px #aacfe4;margin:2px 0 0px 10px}.detailView .label{color:#444;font-size:smaller;padding-left:6px;padding-top:8px;vertical-align:top}.detailArrayLabel{font-size:medium}.detailArrayLabel .foamTable{margin:1px}"),
        language: "css"
    }]
}), CLASS({
    package: "foam.ui",
    name: "TextFieldView",
    label: "Text Field",
    extends: "foam.ui.SimpleView",
    requires: ["foam.ui.AutocompleteView"],
    properties: [{
        model_: "StringProperty",
        name: "name",
        type: "String",
        defaultValue: "field"
    }, {model_: "IntProperty", name: "displayWidth", type: "Int", defaultValue: 30}, {
        model_: "IntProperty",
        name: "displayHeight",
        type: "Int",
        defaultValue: 1
    }, {model_: "StringProperty", name: "type", type: "String", defaultValue: "text"}, {
        model_: "StringProperty",
        name: "placeholder",
        type: "String",
        defaultValue: ""
    }, {
        model_: "BooleanProperty", name: "onKeyMode", type: "Boolean", getter: function () {
            return this.updateMode === this.EACH_KEYSTROKE
        }, setter: function (nu) {
            this.updateMode = nu ? this.EACH_KEYSTROKE : this.DONE_EDITING
        }, help: "If true, value is updated on each keystroke."
    }, {
        model_: "foam.core.types.StringEnumProperty",
        name: "updateMode",
        defaultValue: "DONE_EDITING",
        help: "Controls when the real .data is updated: on every keystroke, when the user presses enter or blurs the box, or on enter only.",
        choices: [["DONE_EDITING", "Done editing"], ["EACH_KEYSTROKE", "Every keystroke"], ["ENTER_ONLY", "Enter only"]]
    }, {
        model_: "BooleanProperty",
        name: "escapeHTML",
        type: "Boolean",
        help: "If true, HTML content is escaped in display mode.",
        defaultValue: !0
    }, {
        model_: "StringProperty",
        name: "mode",
        type: "String",
        defaultValue: "read-write",
        view: {factory_: "foam.ui.ChoiceView", choices: ["read-only", "read-write", "final"]}
    }, {model_: "BooleanProperty", name: "required", type: "Boolean"}, {
        model_: "StringProperty",
        name: "pattern",
        type: "String"
    }, {name: "domValue", visibility: "hidden", hidden: !0}, {name: "data"}, {
        model_: "StringProperty",
        name: "readWriteTagName",
        type: "String",
        visibility: "hidden",
        hidden: !0,
        defaultValueFn: function () {
            return 1 === this.displayHeight ? "input" : "textarea"
        }
    }, {
        model_: "BooleanProperty",
        name: "autocomplete",
        type: "Boolean",
        defaultValue: !0
    }, {name: "autocompleter"}, {name: "autocompleteView"}],
    constants: [{name: "ESCAPE", value: ["escape"]}, {
        name: "DONE_EDITING",
        value: "DONE_EDITING"
    }, {name: "EACH_KEYSTROKE", value: "EACH_KEYSTROKE"}, {name: "ENTER_ONLY", value: "ENTER_ONLY"}],
    methods: [function toHTML() {
        return "read-write" === this.mode ? this.toReadWriteHTML() : this.toReadOnlyHTML()
    }, function toReadWriteHTML() {
        var str = "<" + this.readWriteTagName + ' id="' + this.id + '"'
        return str += ' type="' + this.type + '" ' + this.cssClassAttr(), this.on("click", this.onClick, this.id), str += "input" === this.readWriteTagName ? ' size="' + this.displayWidth + '"' : ' rows="' + this.displayHeight + '" cols="' + this.displayWidth + '"', this.required && (str += " required"), this.pattern && (str += ' pattern="' + this.pattern + '"'), str += this.extraAttributes(), str += ' name="' + this.name + '">', str += "</" + this.readWriteTagName + ">", str
    }, function extraAttributes() {
        return ""
    }, function toReadOnlyHTML() {
        var self = this
        return this.setClass("placeholder", function () {
            return "" === self.data
        }, this.id), "<" + this.tagName + ' id="' + this.id + '"' + this.cssClassAttr() + ' name="' + this.name + '"></' + this.tagName + ">"
    }, function setupAutocomplete() {
        if (this.autocomplete && this.autocompleter) {
            var view = this.autocompleteView = this.AutocompleteView.create({
                autocompleter: this.autocompleter,
                target: this
            })
            this.bindAutocompleteEvents(view)
        }
    }, function onAutocomplete(data) {
        this.data = data
    }, function bindAutocompleteEvents(view) {
        this.$.addEventListener("blur", function () {
            view.publish("blur")
        }), this.$.addEventListener("input", function () {
            view.autocomplete(this.textToValue(this.$.value))
        }.bind(this)), this.$.addEventListener("focus", function () {
            view.autocomplete(this.textToValue(this.$.value))
        }.bind(this))
    }, function initHTML() {
        this.$ && (this.SUPER(), "read-write" === this.mode ? (this.placeholder && (this.$.placeholder = this.placeholder), this.updateMode === this.EACH_KEYSTROKE ? this.domValue = DomValue.create(this.$, "input") : this.updateMode === this.DONE_EDITING ? this.domValue = DomValue.create(this.$, "change") : this.domValue = this.OnEnterValue.create({element: this.$}), Events.relate(this.data$, this.domValue, this.valueToText.bind(this), this.textToValue.bind(this), this.updateMode === this.EACH_KEYSTROKE), this.updateMode === this.EACH_KEYSTROKE && this.$.addEventListener("blur", this.onBlur), this.$.addEventListener("keydown", this.onKeyDown), this.$.addEventListener("keypress", this.onKeyPress), this.setupAutocomplete()) : (this.domValue = DomValue.create(this.$, "undefined", this.escapeHTML ? "textContent" : "innerHTML"), Events.map(this.data$, this.domValue, this.valueToText.bind(this))))
    }, function textToValue(text) {
        return text
    }, function valueToText(value) {
        return "read-only" === this.mode && "" === value ? this.placeholder : value
    }, function destroy(isParentDestroyed) {
        this.SUPER(isParentDestroyed), Events.unlink(this.domValue, this.data$)
    }],
    listeners: [{
        name: "onKeyDown", code: function (e) {
            27 == e.keyCode ? (this.domValue.set(this.data), this.publish(this.ESCAPE)) : this.publish(["keydown"], e)
        }
    }, {
        name: "onKeyPress", code: function (e) {
            e.stopPropagation()
        }
    }, {
        name: "onBlur", code: function (e) {
            this.domValue.get() !== this.data && this.domValue.set(this.data)
        }
    }, {
        name: "onClick", code: function (e) {
            this.$ && this.$.focus()
        }
    }],
    models: [{
        package: "foam.ui.TextFieldView",
        name: "OnEnterValue",
        properties: [{name: "element"}, {
            name: "listeners", factory: function () {
                return []
            }
        }],
        methods: [function get() {
            return this.element.value
        }, function set(value) {
            this.get() !== value && (this.element.value = value)
        }, function addListener(listener) {
            listener && (0 === this.listeners.length && this.element.addEventListener("keydown", this.onKeyDown), this.listeners.push(listener))
        }, function removeListener(listener) {
            var index = this.listeners.indexOf(listener)
            index >= 0 && this.listeners.splice(i, 1)
        }, function fireListeners(e) {
            for (var i = 0; i < this.listeners.length; i++)this.listeners[i](e)
        }],
        listeners: [{
            name: "onKeyDown", code: function (e) {
                13 === e.keyCode && this.fireListeners(e)
            }
        }]
    }]
}), CLASS({
    package: "foam.ui",
    name: "AutocompleteView",
    extends: "foam.ui.PopupView",
    requires: ["foam.ui.ChoiceListView"],
    properties: [{name: "closeTimeout"}, {name: "autocompleter"}, {name: "completer"}, {name: "current"}, {
        model_: "IntProperty",
        name: "closeTime",
        type: "Int",
        units: "ms",
        help: "Time to delay the actual close on a .close call.",
        defaultValue: 200
    }, {
        name: "view", postSet: function (prev, v) {
            prev && (prev.data$.removeListener(this.complete), prev.choices$.removeListener(this.choicesUpdate)), v.data$.addListener(this.complete), v.choices$.addListener(this.choicesUpdate)
        }
    }, {
        name: "target", postSet: function (prev, v) {
            prev && prev.unsubscribe(["keydown"], this.onKeyDown), v.subscribe(["keydown"], this.onKeyDown)
        }
    }, {name: "maxHeight", defaultValue: 400}, {name: "className", defaultValue: "autocompletePopup"}],
    methods: [function autocomplete(partial) {
        if (!this.completer) {
            var proto = this.X.lookup(this.autocompleter)
            this.completer = proto.create(null, this.Y)
        }
        this.view || (this.view = this.makeView()), this.current = partial, this.open(this.target), this.completer.autocomplete(partial)
    }, function makeView() {
        return this.ChoiceListView.create({
            dao: this.completer.autocompleteDao$Proxy,
            extraClassName: "autocomplete",
            orientation: "vertical",
            mode: "final",
            objToChoice: this.completer.f,
            useSelection: !0
        }, this.Y)
    }, function init(args) {
        this.SUPER(args), this.subscribe("blur", function () {
            this.close()
        }.bind(this))
    }, function open(e, opt_delay) {
        if (this.closeTimeout && (this.X.clearTimeout(this.closeTimeout), this.closeTimeout = 0), this.$)return this.position(this.$.firstElementChild, e.$ || e), void 0
        var parentNode = e.$ || e, document = parentNode.ownerDocument
        console.assert(this.X.document === document, "X.document is not global document")
        var div = document.createElement("div"), window = document.defaultView
        console.assert(this.X.window === window, "X.window is not global window"), parentNode.insertAdjacentHTML("afterend", this.toHTML().trim()), this.position(this.$.firstElementChild, parentNode), this.initHTML()
    }, function close(opt_now) {
        if (opt_now)return this.closeTimeout && (this.X.clearTimeout(this.closeTimeout), this.closeTimeout = 0), this.SUPER(), void 0
        if (!this.closeTimeout) {
            var realClose = this.SUPER, self = this
            this.closeTimeout = this.X.setTimeout(function () {
                self.closeTimeout = 0, realClose.call(self)
            }, this.closeTime)
        }
    }, function position(div, parentNode) {
        var document = parentNode.ownerDocument, pos = findPageXY(parentNode), pageWH = [document.firstElementChild.offsetWidth, document.firstElementChild.offsetHeight]
        pageWH[1] - (pos[1] + parentNode.offsetHeight) < (this.height || this.maxHeight || 400) && (div.style.bottom = parentNode.offsetHeight, document.defaultView.innerHeight - pos[1]), pos[2].offsetWidth - pos[0] < 600 ? div.style.left = 600 - pos[2].offsetWidth : div.style.left = -parentNode.offsetWidth, this.width && (div.style.width = this.width + "px"), this.height && (div.style.height = this.height + "px"), this.maxWidth && (div.style.maxWidth = this.maxWidth + "px", div.style.overflowX = "auto"), this.maxHeight && (div.style.maxHeight = this.maxHeight + "px", div.style.overflowY = "auto")
    }],
    listeners: [{
        name: "onKeyDown", code: function (_, __, e) {
            this.view && (38 === e.keyCode ? (this.view.index--, this.view.scrollToSelection(this.$), e.preventDefault()) : 40 === e.keyCode ? (this.view.index++, this.view.scrollToSelection(this.$), e.preventDefault()) : 13 === e.keyCode && (this.view.commit(), e.preventDefault()))
        }
    }, {
        name: "complete", code: function () {
            this.target.onAutocomplete(this.view.data), this.view = this.makeView(), this.close(!0)
        }
    }, {
        name: "choicesUpdate", code: function () {
            this.view && (0 === this.view.choices.length || 1 === this.view.choices.length && this.view.choices[0][1] === this.current) && this.close(!0)
        }
    }],
    templates: [{
        name: "toHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out('\n  <span id="', this.id, '" style="position:relative"><div ', this.cssClassAttr(), ' style="position:absolute">', this.view, "</div></span>\n    "), out.toString()
        }, language: "html"
    }],
    help: "Default autocomplete popup."
}), CLASS({
    package: "foam.ui",
    name: "ChoiceListView",
    extends: "foam.ui.AbstractChoiceView",
    properties: [{
        name: "orientation",
        view: {factory_: "foam.ui.ChoiceView", choices: [["horizontal", "Horizontal"], ["vertical", "Vertical"]]},
        defaultValue: "horizontal",
        postSet: function (old, nu) {
            this.$ && (DOM.setClass(this.$, old, !1), DOM.setClass(this.$, nu))
        }
    }, {
        name: "className", defaultValueFn: function () {
            return "foamChoiceListView " + this.orientation
        }
    }, {name: "tagName", defaultValue: "ul"}, {name: "innerTagName", defaultValue: "li"}],
    methods: [function init() {
        this.SUPER(), this.index$.addListener(this.updateSelected), this.choices$.addListener(this.updateSelected)
    }, function choiceToHTML(id, choice) {
        return "<" + this.innerTagName + ' id="' + id + '" class="choice">' + choice[1] + "</" + this.innerTagName + ">"
    }, function toInnerHTML() {
        for (var out = [], i = 0; i < this.choices.length; i++) {
            var choice = this.choices[i], id = this.nextID()
            this.on("click", function (index) {
                this.choice = this.choices[index]
            }.bind(this, i), id), out.push(this.choiceToHTML(id, choice))
        }
        return out.join("")
    }, function initInnerHTML() {
        this.SUPER(), this.updateSelected()
    }, function scrollToSelection() {
        var e = this.$ && this.$.children[this.index]
        if (e) {
            for (var parent = e.parentElement; parent;) {
                var overflow = this.X.window.getComputedStyle(parent).overflowY
                if ("scroll" === overflow || "auto" === overflow)break
                parent = parent.parentElement
            }
            parent = parent || this.X.window, e.offsetTop < parent.scrollTop ? parent.scrollTop = e.offsetTop : e.offsetTop + e.offsetHeight >= parent.scrollTop + parent.offsetHeight && (parent.scrollTop = e.offsetTop + e.offsetHeight - parent.offsetHeight)
        }
    }],
    listeners: [{
        name: "updateSelected", code: function () {
            if (this.$ && this.$.children)for (var i = 0; i < this.$.children.length; i++) {
                var c = this.$.children[i]
                DOM.setClass(c, "selected", i === this.index)
            }
        }
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".foamChoiceListView{list-style-type:none}.foamChoiceListView .selected{font-weight:bold}.foamChoiceListView.vertical{padding:0}.foamChoiceListView.vertical .choice{margin:4px}.foamChoiceListView.horizontal{padding:0}.foamChoiceListView.horizontal .choice{display:inline;margin:12px}"),
        language: "css"
    }]
}), CLASS({
    package: "foam.ui",
    name: "AbstractChoiceView",
    extends: "foam.ui.View",
    properties: [{
        model_: "BooleanProperty",
        name: "autoSetData",
        type: "Boolean",
        help: "If true, this.data is set when choices update and the current data is not one of the choices.",
        defaultValue: !0
    }, {name: "prop", visibility: "hidden", hidden: !0}, {
        name: "label",
        help: 'The user-visible label for the ChoiceView. Not to be confused with $$DOC{ref:".text"}, the name of the currently selected choice.'
    }, {
        name: "text", postSet: function (_, d) {
            for (var i = 0; i < this.choices.length; i++)if (this.choices[i][1] === d)return this.index !== i && (this.index = i), void 0
        }, help: "The user-visible text of the current choice (ie. [value, text] -> text)."
    }, {
        name: "choice", getter: function () {
            for (var value = this.data, i = 0; i < this.choices.length; i++) {
                var choice = this.choices[i]
                if (value === choice[0])return choice
            }
        }, setter: function (choice) {
            var oldValue = this.choice
            this.data = choice[0], this.text = choice[1], this.propertyChange("choice", oldValue, this.choice)
        }, help: "The current choice (ie. [value, text])."
    }, {
        name: "choices", factory: function () {
            return []
        }, preSet: function (_, a) {
            if ("object" == typeof a && !Array.isArray(a)) {
                var out = []
                for (var key in a)a.hasOwnProperty(key) && out.push([key, a[key]])
                return out
            }
            a = a.clone()
            for (var i = 0; i < a.length; i++)Array.isArray(a[i]) || (a[i] = [a[i], a[i]])
            return a
        }, postSet: function (oldValue, newValue) {
            for (var value = this.data, i = 0; i < newValue.length; i++) {
                var choice = newValue[i]
                if (value === choice[0]) {
                    this.useSelection ? this.index = i : this.choice = choice
                    break
                }
            }
            this.autoSetData && i === newValue.length && (this.useSelection ? this.index = 0 : this.data = newValue.length ? newValue[0][0] : void 0)
            var labelsChanged = !0
            if ((oldValue && oldValue.length) == (newValue && newValue.length)) {
                labelsChanged = !1
                for (var i = 0; i < oldValue.length; ++i)if (!equals(oldValue[i][1], newValue[i][1])) {
                    labelsChanged = !0
                    break
                }
            }
            labelsChanged && this.updateHTML()
        }
    }, {
        model_: "IntProperty", name: "index", type: "Int", transient: !0, preSet: function (_, i) {
            return i < 0 || 0 == this.choices.length ? 0 : i >= this.choices.length ? this.choices.length - 1 : i
        }, postSet: function (_, i) {
            this.useSelection || this.choices.length && this.data !== this.choices[i][0] && (this.data = this.choices[i][0])
        }, help: "The index of the current choice.", defaultValue: -1
    }, {
        model_: "FunctionProperty",
        name: "objToChoice",
        type: "Function",
        help: "A Function which adapts an object from the DAO to a [key, value, ...] choice."
    }, {
        model_: "BooleanProperty",
        name: "useSelection",
        type: "Boolean",
        help: "When set, data and choice do not update until an entry is firmly selected"
    }, {model_: "foam.core.types.DAOProperty", name: "dao", onDAOUpdate: "onDAOUpdate"}, {
        name: "data", postSet: function (old, nu) {
            for (var i = 0; i < this.choices.length; i++)if (this.choices[i][0] === nu)return this.index !== i && (this.text = this.choices[i][1], this.index = i), void 0
            nu && this.choices.length && console.warn("ChoiceView data set to invalid choice: ", nu)
        }
    }],
    methods: [function initHTML() {
        this.SUPER(), this.dao = this.dao
    }, function findChoiceIC(name) {
        name = name.toLowerCase()
        for (var i = 0; i < this.choices.length; i++)if (this.choices[i][1].toLowerCase() == name)return this.choices[i]
    }, function commit() {
        this.useSelection && this.choices[this.index] && (this.choice = this.choices[this.index])
    }],
    listeners: [{
        name: "onDAOUpdate", code: function () {
            this.dao.select(MAP(this.objToChoice))(function (map) {
                this.choices = map.arg2
            }.bind(this))
        }, isFramed: !0
    }]
}), CLASS({
    package: "foam.core.types",
    name: "DAOProperty",
    extends: "Property",
    requires: ["foam.dao.FutureDAO", "foam.dao.ProxyDAO"],
    imports: ["console"],
    properties: [{name: "type", defaultValue: "DAO", help: "The FOAM type of this property."}, {
        model_: "ModelProperty",
        name: "model",
        type: "Model",
        help: "The model for objects stored in the DAO."
    }, {name: "view", defaultValue: "foam.ui.DAOListView"}, {name: "onDAOUpdate"}, {
        name: "install", defaultValue: function (prop) {
            defineLazyProperty(this, prop.name + "$Proxy", function () {
                if (this[prop.name])delegate = this[prop.name]
                else var future = afuture(), delegate = prop.FutureDAO.create({future: future.get})
                var proxy = prop.ProxyDAO.create({delegate: delegate})
                return this.addPropertyListener(prop.name, function (_, __, ___, dao) {
                    return future ? (future.set(dao), future = null, void 0) : (proxy.delegate = dao, void 0)
                }), {
                    get: function () {
                        return proxy
                    }, configurable: !0
                }
            })
        }
    }, {
        name: "fromElement_", defaultValue: function (e, p, model) {
            for (var children = e.children, i = 0; i < children.length; i++)this[p.name].put(model.create(null, this.Y).fromElement(children[i], p))
        }
    }, {
        name: "fromElement", defaultValue: function (e, p) {
            var model = e.getAttribute("model") || this[p.name] && this[p.name].model || p.model || ""
            return model ? ("string" == typeof model ? this.X.arequire(model)(function (model) {
                p.fromElement_.call(this, e, p, model)
            }.bind(this)) : p.fromElement_.call(this, e, p, model), void 0) : (this.console.warn("Attempt to load DAO from element without model"), void 0)
        }
    }],
    help: "Describes a DAO property."
}), CLASS({
    package: "foam.dao",
    name: "FutureDAO",
    extends: "foam.dao.ProxyDAO",
    properties: [{
        name: "delegate", factory: function () {
            return null
        }
    }, {name: "future", required: !0}, {
        name: "model", defaultValueFn: function () {
            return this.delegate ? this.delegate.model : ""
        }
    }],
    methods: [function init() {
        this.SUPER(), this.future(function (delegate) {
            var listeners = this.daoListeners_
            this.daoListeners_ = [], this.delegate = delegate, this.daoListeners_ = listeners, this.daoListeners_.length && this.delegate.listen(this.relay)
        }.bind(this))
    }, function put(value, sink) {
        this.delegate ? this.delegate.put(value, sink) : this.future(this.put.bind(this, value, sink))
    }, function remove(query, sink) {
        this.delegate ? this.delegate.remove(query, sink) : this.future(this.remove.bind(this, query, sink))
    }, function removeAll() {
        if (this.delegate)return this.delegate.removeAll.apply(this.delegate, arguments)
        var a = arguments, f = afuture()
        return this.future(function (delegate) {
            this.removeAll.apply(this, a)(f.set)
        }.bind(this)), f.get
    }, function find(key, sink) {
        this.delegate ? this.delegate.find(key, sink) : this.future(this.find.bind(this, key, sink))
    }, function select(sink, options) {
        if (this.delegate)return this.delegate.select(sink, options)
        var a = arguments, f = afuture()
        return this.future(function () {
            this.select.apply(this, a)(f.set)
        }.bind(this)), f.get
    }]
}), CLASS({
    package: "foam.dao", name: "ProxyDAO", extends: "AbstractDAO", requires: ["foam.dao.NullDAO"], properties: [{
        name: "relay", factory: function () {
            var self = this
            return {
                put: function () {
                    self.notify_("put", arguments)
                }, remove: function () {
                    self.notify_("remove", arguments)
                }, reset: function () {
                    self.notify_("reset", arguments)
                }, toString: function () {
                    return "RELAY(" + this.$UID + ", " + self.model_.name + ", " + self.delegate + ")"
                }
            }
        }
    }, {
        name: "delegate",
        mode: "read-only",
        required: !0,
        visibility: "hidden",
        hidden: !0,
        transient: !0,
        factory: function () {
            return this.NullDAO.create()
        },
        postSet: function (oldDAO, newDAO) {
            this.daoListeners_.length && (oldDAO && oldDAO.unlisten(this.relay), newDAO.listen(this.relay), this.notify_("reset", []))
        }
    }, {
        model_: "ModelProperty", name: "model", type: "Model", required: !1, defaultValueFn: function () {
            return this.delegate.model
        }
    }], methods: [function put(value, sink) {
        this.delegate.put(value, sink)
    }, function remove(query, sink) {
        this.delegate.remove(query, sink)
    }, function removeAll() {
        return this.delegate.removeAll.apply(this.delegate, arguments)
    }, function find(key, sink) {
        this.delegate.find(key, sink)
    }, function select(sink, options) {
        return this.delegate.select(sink, options)
    }, function listen(sink, options) {
        !this.daoListeners_.length && this.delegate && this.delegate.listen(this.relay), this.SUPER(sink, options)
    }, function unlisten(sink) {
        this.SUPER(sink), 0 === this.daoListeners_.length && this.delegate && this.delegate.unlisten(this.relay)
    }, function toString() {
        return this.name_ + "(" + this.delegate + ")"
    }]
}), CLASS({
    package: "foam.dao", name: "NullDAO", methods: [function put(obj, sink) {
        sink && sink.put && sink.put(obj)
    }, function remove(obj, sink) {
        sink && sink.remove && sink.remove(obj)
    }, function select(sink) {
        return sink && sink.eof && sink.eof(), aconstant(sink || [].sink)
    }, function find(q, sink) {
        sink && sink.error && sink.error("find", q)
    }, function listen() {
    }, function removeAll() {
    }, function unlisten() {
    }, function pipe() {
    }, function where() {
        return this
    }, function limit() {
        return this
    }, function skip() {
        return this
    }, function orderBy() {
        return this
    }], help: "A DAO that stores nothing and does nothing."
}), CLASS({
    package: "foam.ui",
    name: "PopupView",
    extends: "foam.ui.SimpleView",
    properties: [{name: "view"}, {name: "x"}, {name: "y"}, {name: "width", defaultValue: ""}, {
        name: "maxWidth",
        defaultValue: ""
    }, {name: "maxHeight", defaultValue: ""}, {name: "height", defaultValue: ""}],
    constants: [{name: "CLOSED_TOPIC", value: ["closed"]}],
    methods: [function open() {
        if (!this.$) {
            var document = this.X.document, div = document.createElement("div")
            div.style.left = this.x + "px", div.style.top = this.y + "px", this.width && (div.style.width = this.width + "px"), this.height && (div.style.height = this.height + "px"), this.maxWidth && (div.style.maxWidth = this.maxWidth + "px"), this.maxHeight && (div.style.maxHeight = this.maxHeight + "px"), div.style.position = "absolute", div.id = this.id, div.innerHTML = this.view.toHTML(), document.body.appendChild(div), this.view.initHTML()
        }
    }, function openOn(parent) {
        if (!this.$) {
            var self = this, document = this.X.document, bg = document.createElement("div"), div = document.createElement("div")
            bg.style.width = bg.style.height = "10000px", bg.style.opacity = 0, bg.style.position = "fixed", bg.style.top = "0", bg.style.zIndex = 998, div.style.zIndex = 999, this.y || (this.y = (parent.clientHeight - this.height) / 2), this.x || (this.x = (parent.clientWidth - this.width) / 2), div.className = "popup", div.style.left = this.x + "px", div.style.top = this.y + "px", this.width && (div.style.width = this.width + "px"), this.height && (div.style.height = this.height + "px"), this.maxWidth && (div.style.maxWidth = this.maxWidth + "px"), this.maxHeight && (div.style.maxHeight = this.maxHeight + "px"), parent.style.position = "relative", div.id = this.id, div.innerHTML = this.view.toHTML(), document.body.appendChild(bg), bg.addEventListener("click", function () {
                div.remove(), bg.remove(), self.destroy(), self.publish(self.CLOSED_TOPIC)
            }), parent.appendChild(div), this.view.initHTML()
        }
    }, function close() {
        this.$ && this.$.remove()
    }, function destroy(isParentDestroyed) {
        this.SUPER(isParentDestroyed), this.close(), this.view.destroy()
    }],
    templates: [{
        name: "CSS",
        code: ConstantTemplate(".popup{background:#999;-webkit-box-shadow:3px 3px 6px 0 gray;box-shadow:3px 3px 6px 0 gray;color:white;font-size:18px;opacity:0.9;padding:20px;position:absolute;box-sizing:border-box}"),
        language: "css"
    }]
}), CLASS({
    package: "foam.ui",
    name: "IntFieldView",
    extends: "foam.ui.AbstractNumberFieldView",
    methods: [function textToValue(text) {
        return parseInt(text) || "0"
    }, function valueToText(value) {
        return value ? value : "0"
    }]
}), CLASS({
    package: "foam.ui",
    name: "AbstractNumberFieldView",
    extends: "foam.ui.TextFieldView",
    properties: [{name: "type", defaultValue: "number"}, {name: "step"}],
    methods: [function extraAttributes() {
        return this.step ? ' step="' + this.step + '"' : ""
    }]
}), CLASS({
    package: "foam.ui",
    name: "FloatFieldView",
    extends: "foam.ui.AbstractNumberFieldView",
    properties: [{name: "precision", defaultValue: ""}],
    methods: [function formatNumber(val) {
        if (!val)return "0"
        val = val.toFixed(this.precision)
        for (var i = val.length - 1; i > 0 && "0" === val.charAt(i); i--);
        return val.substring(0, "." === val.charAt(i) ? i : i + 1)
    }, function valueToText(val) {
        return this.hasOwnProperty("precision") ? this.formatNumber(val) : "" + val
    }, function textToValue(text) {
        return parseFloat(text) || 0
    }]
}), CLASS({
    package: "foam.ui",
    name: "DAOController",
    label: "DAO Controller",
    extends: "foam.ui.View",
    properties: [{model_: "ModelProperty", name: "model", type: "Model"}, {
        name: "subType", setter: function (v) {
            this.model = v
        }
    }, {name: "dao", view: "foam.ui.TableView"}, {
        name: "data", getter: function () {
            return this.dao
        }, setter: function (v) {
            this.dao = v
        }
    }, {name: "selection"}, {model_: "BooleanProperty", name: "useSearchView", type: "Boolean", defaultValue: !1}],
    actions: [{
        name: "new", help: "Create a new record.", code: function () {
            var createView = this.X.DAOCreateController.create({model: this.model, dao: this.dao, showActions: !0})
            createView.parentController = this, this.X.stack.pushView(createView, "New")
        }
    }, {
        name: "edit", help: "Edit the current record.", default: !0, code: function () {
            this.selection = this.daoView.selection
            for (var obj = this.selection, actions = this.X.DAOUpdateController.actions.slice(0), i = 0; i < this.model.actions.length; i++) {
                var action = this.model.actions[i], newAction = this.X.Action.create(action)
                newAction.action = function (oldAction) {
                    return function () {
                        oldAction.call(obj)
                    }
                }(action.action), actions.push(newAction)
            }
            console.log(["selection: ", this.selection])
            var updateView = this.X.DAOUpdateController.create({
                data: this.selection,
                model: this.model,
                dao: this.dao,
                showActions: !0
            })
            this.X.stack.pushView(updateView, "Edit")
        }
    }, {
        name: "delete", help: "Delete the current record.", code: function () {
            this.selection = this.daoView.selection
            var self = this
            this.dao.remove(this.selection)
        }
    }],
    methods: [function init() {
        this.SUPER(), this.showActions = !0
    }, function initHTML() {
        this.SUPER(), this.daoView.subscribe(this.daoView.DOUBLE_CLICK, this.onDoubleClick), this.daoView.selection$.addListener(this.onSelection)
    }],
    listeners: [{
        name: "onDoubleClick", code: function (evt) {
            for (var i = 0; i < this.model_.getRuntimeActions().length; i++) {
                var action = this.model_.getRuntimeActions()[i]
                if (action.default) {
                    action.action.call(this)
                    break
                }
            }
        }
    }, {
        name: "onSelection", code: function (evt) {
            var obj = this.daoView.selection
            obj && this.X.stack.setPreview(this.X.SummaryView.create({model: this.model, data: this.daoView.selection}))
        }
    }],
    templates: [{
        name: "toInnerHTML", code: function (opt_out) {
            var self = this, X = this.X, Y = this.Y, out = opt_out ? opt_out : TOC(this)
            return out(" ", self.createTemplateView("dao", {model: this.model}), " "), out.toString()
        }, language: "html"
    }]
}), CLASS({
    package: "foam.ui",
    name: "ActionButton",
    extends: "foam.ui.BaseView",
    traits: ["foam.ui.HTMLViewTrait"],
    properties: [{
        name: "action", postSet: function (old, nu) {
            old && old.removeListener(this.render), nu.addListener(this.render)
        }
    }, {name: "data"}, {
        name: "className", factory: function () {
            return "actionButton actionButton-" + this.action.name
        }
    }, {name: "tagName", defaultValue: "button"}, {
        name: "showLabel", defaultValueFn: function () {
            return this.action.showLabel
        }
    }, {
        name: "label", defaultValueFn: function () {
            return this.data ? this.action.labelFn.call(this.data, this.action) : this.action.label
        }, postSet: function () {
            this.updateHTML()
        }
    }, {
        name: "iconUrl", defaultValueFn: function () {
            return this.data ? this.action.iconUrlFn.call(this.data, this.action) : this.action.iconUrl
        }
    }, {
        name: "tooltip", defaultValueFn: function () {
            return this.action.help
        }
    }],
    methods: [function toHTML() {
        var superResult = this.SUPER(), self = this
        return this.on("click", function () {
            self.action.maybeCall(self.X, self.data)
        }, this.id), this.setAttribute("disabled", function () {
            return self.closeTooltip(), self.action.isEnabled.call(self.data, self.action) ? void 0 : "disabled"
        }, this.id), this.setClass("available", function () {
            return self.closeTooltip(), self.action.isAvailable.call(self.data, self.action)
        }, this.id), this.X.dynamicFn(function () {
            self.action.labelFn.call(self.data, self.action), self.updateHTML()
        }), this.X.dynamicFn(function () {
            self.action.iconUrlFn.call(self.data, self.action), self.updateHTML()
        }), superResult
    }, function toInnerHTML() {
        var out = ""
        return this.iconUrl && (out += '<img src="' + XMLUtil.escapeAttr(this.iconUrl) + '">'), this.showLabel && (out += this.label), out
    }, function initKeyboardShortcuts() {
    }],
    listeners: [{
        name: "render", code: function () {
            this.updateHTML()
        }, isFramed: !0
    }]
})

